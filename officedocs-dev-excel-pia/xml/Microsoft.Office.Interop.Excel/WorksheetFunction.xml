<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3799dd3aab76ef91457248bfb93a39319ab94831a31142a4195f749f0f13c96" /><Meta Name="ms.sourcegitcommit" Value="daf501296516d104cf396246ac0d336adfeffd0d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/06/2021" /><Meta Name="ms.locfileid" Value="54511871" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Usado como um contêiner para Excel funções de planilha que podem ser chamadas de Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data de emissão - Data de emissão de segurança.</param>
        <param name="Arg2">Primeiro juro - Data de primeiro juro de segurança.</param>
        <param name="Arg3">Liquidação - Data de liquidação de segurança</param>
        <param name="Arg4">Taxa - A taxa anual de cupom de segurança.</param>
        <param name="Arg5">Par - O valor par de segurança.</param>
        <param name="Arg6">Frequência - Número de pagamentos de cupom por ano.</param>
        <param name="Arg7">Base - O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna juros acumulados de um título que paga juros periódicos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir descreve os valores que podem ser usados para <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de emissão de segurança.</param>
        <param name="Arg2">A data de vencimento do título.</param>
        <param name="Arg3">A taxa anual do cupom de segurança.</param>
        <param name="Arg4">O valor par de segurança. Se você omitir par, ACCRINTM usará R$1,000.</param>
        <param name="Arg5">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna juros acumulados de um título que paga juros no vencimento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir descreve os valores que podem ser usados para <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>A lista a seguir contém informações a serem cientes ao trabalhar com a ACCRINTM:</para>
          <list type="bullet">
            <item>
              <description>O Microsoft Excel armazena datas como números de série sequenciais que podem ser usados em cálculos. Por padrão, 1 de janeiro, 1900 é o número de série 1, e 1 de janeiro, 2008 é o número de série 39448 porque é 39.448 dias depois de 1 de janeiro, 1900.</description>
            </item>
            <item>
              <description>Emissão, vencimento e base são truncados para números inteiros.</description>
            </item>
            <item>
              <description>Se emissão ou vencimento não for uma data válida, JUROSACUMV gerará um erro.</description>
            </item>
            <item>
              <description>Se taxa ≤ 0 ou se par ≤ 0, JUROSACUMV gerará um erro.</description>
            </item>
            <item>
              <description>Se base &lt; 0 ou se base &gt; 4, ACCRINTM gerará um erro. </description>
            </item>
            <item>
              <description>Se emissão ≥ maturidade, JUROSACUMV gerará um erro.</description>
            </item>
            <item>
              <description>ACCRINTM é calculado da seguinte forma: </description>
            </item>
          </list>
          <para>em que:</para>
          <para>A = Número de dias acumulados contados de acordo com uma base mensal. Para os juros nos itens de vencimento, o número de dias da data de emissão até a data de vencimento é usado.</para>
          <para>D = Base Anual.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O cosseno do ângulo desejado e deve estar entre -1 e 1.</param>
        <summary>Retorna o arco cosseno, ou inverso do cosseno, de um número. O arccosine é o ângulo cujo cosseno é <paramref name="Arg1" /> . O ângulo retornado é dado em radianos no intervalo de 0 (zero) a pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se desejar converter o resultado de radianos para graus, multiplique por 180/PI() ou use o método Graus.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Qualquer número real igual ou maior do que 1.</param>
        <summary>Retorna o cosseno hiperbólico inverso de um número. O número deve ser maior ou igual a 1. O cosseno hiperbólico inverso é o valor cujo cosseno hiperbólico <paramref name="Arg1" /> é , portanto, Acosh(Cosh(number)) é igual <paramref name="Arg1" /> a .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O cotangente do ângulo que você deseja.</param>
        <summary>Retorna o arccotangent de um número, em radianos no intervalo 0 para Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O cotangente hiperbólico do ângulo que você deseja.</param>
        <summary>Retorna o cotangente hiperbólico inverso de um número.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm_função - um número de 1 a 19 que especifica qual função usar.</param>
        <param name="Arg2">Opções - um valor numérico que determina quais valores ignorar no intervalo de avaliação da função.</param>
        <param name="Arg3">Ref1 - O primeiro argumento numérico para funções que levam vários argumentos numéricos para os quais você deseja o valor agregado.</param>
        <param name="Arg4">Ref2 - Ref30 - Argumentos numéricos de 2 a 30 para os quais você deseja o valor agregado.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna um valor agregado em uma lista ou banco de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>As restrições a seguir se aplicam aos argumentos Ref (Arg3 - Arg 30) com base no valor <b>Function_num</b> valor.</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Tipos válidos:Qualquer referência de célula Unions Interseções Nomes definidos Referências estruturadasInvalid tipos: Matrizes de dados reais</description>
              <description>Tipos válidos:Qualquer referência de célula Unions Interseções Nomes definidos Referências estruturadasInvalid tipos: Matrizes de dados reais</description>
              <description>Tipos válidos:Qualquer referência de célula Unions Interseções Nomes definidos Referências estruturadasInvalid tipos: Matrizes de dados reais</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Tipos válidos:Qualquer referência de célula Unions Interseções Nomes definidos Referências estruturadas Matrizes de dados reais</description>
              <description>Tipos válidos:Qualquer referência de célula Unions Interseções Nomes definidos Referências estruturadas Matrizes de dados reais</description>
              <description>Nenhuma referência é permitida</description>
            </item>
          </list>
          <para>Se um segundo argumento ref for necessário, mas não fornecido, AGGREGATE retornará um #VALUE! .</para>
          <para>Se uma ou mais das referências são referências 3D, AGGREGATE retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O custo do ativo.</param>
        <param name="Arg2">A data de compra do ativo.</param>
        <param name="Arg3">A data do fim do primeiro período.</param>
        <param name="Arg4">O valor residual no fim da vida útil do ativo.</param>
        <param name="Arg5">O período.</param>
        <param name="Arg6">A taxa de depreciação.</param>
        <param name="Arg7">O ano base a ser usado.</param>
        <summary>Retorna a depreciação para cada período contábil. Esta função é fornecida para o sistema contábil francês.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se um ativo é comprado no meio do período contábil, a depreciação rateada é levada em consideração. O método é semelhante a , exceto que um coeficiente de depreciação é aplicado no <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> cálculo, dependendo da vida útil dos ativos. A tabela a seguir descreve os valores usados em <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>360 dias (método NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Real</description>
            </item>
            <item>
              <term>3</term>
              <description>365 dias em um ano</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 dias em um ano (método europeu)</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Esta função retorna a depreciação até o último período da vida útil dos ativos ou até que o valor combinado de depreciação seja maior do que o custo dos ativos menos o valor residual.</para>
          <para>Os coeficientes de depreciação são:</para>
          <list type="table">
            <item>
              <term>Entre 3 e 4 anos</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Entre 5 e 6 anos</term>
              <description>2</description>
            </item>
            <item>
              <term>Mais de 6 anos</term>
              <description>2.5</description>
            </item>
          </list>
          <para>A taxa de depreciação aumentará para 50 por cento no período que antecede o último período e aumentará para 100 por cento no último período.</para>
          <para>Se a vida dos ativos estiver entre 0 (zero) e 1, 1 e 2, 2 e 3 ou 4 e 5, será retornado o valor de erro #NÚM!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O custo do ativo.</param>
        <param name="Arg2">A data de compra do ativo.</param>
        <param name="Arg3">A data do fim do primeiro período.</param>
        <param name="Arg4">O valor residual no fim da vida útil do ativo.</param>
        <param name="Arg5">O período.</param>
        <param name="Arg6">A taxa de depreciação.</param>
        <param name="Arg7">O ano base a ser usado.</param>
        <summary>Retorna a depreciação para cada período contábil. Esta função é fornecida para o sistema contábil francês.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se um ativo for comprado no meio do período contábil, a depreciação prorativa será levada em conta. A tabela a seguir descreve os valores usados para <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>360 dias (método NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Real</description>
            </item>
            <item>
              <term>3</term>
              <description>365 dias em um ano</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 dias em um ano (método europeu)</description>
            </item>
          </list>
          <para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto.</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 30 condições que você deseja testar que podem ser <b>verdadeiras</b> ou <b>falsas.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna <b>true</b> se todos os seus argumentos são <b>verdadeiros;</b> retorna <b>false</b> se um ou mais argumentos for <b>false</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser avaliadas como valores lógicos, como <b>true</b> ou <b>false,</b>ou os argumentos devem ser matrizes ou referências que contenham valores lógicos. </para>
          <para>Se um argumento de matriz ou referência contiver texto ou células vazias, esses valores serão ignorados.</para>
          <para>Se o intervalo especificado não contiver valores lógicos, este método gerará um valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando usada sem um qualificador de objeto, essa propriedade retorna um <see cref="T:Microsoft.Office.Interop.Excel.Application" /> objeto que representa o Microsoft Excel aplicativo. Quando usada com um qualificador de objeto, essa propriedade retorna um objeto que representa o <see cref="T:Microsoft.Office.Interop.Excel.Application" /> criador do objeto especificado. É possível usar essa propriedade com um objeto de automação OLE para retornar o aplicativo desse objeto. Somente leitura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">O numeral romano que você deseja converter.</param>
        <summary>Converte um numeral romano em um numeral árabe.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">O texto ou uma referência a uma célula que contém o texto que você deseja alterar. Se o texto não contiver letras de largura total, o texto não será alterado.</param>
        <summary>Para idiomas de conjunto de caracteres de byte duplo (DBCS), altera caracteres de largura total (byte duplo) para caracteres de meia largura (de byte único).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O seno do ângulo desejado e deve estar entre -1 e 1.</param>
        <summary>Retorna o arco seno, ou inverso do seno, de um número. O arco é o ângulo cujo seno é <paramref name="Arg1" /> . O ângulo retornado é dado em radianos no intervalo de -pi/2 a pi/2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para expressar o arco em graus, multiplique o resultado por 180/PI( ) ou use o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> método.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Qualquer número real.</param>
        <summary>Retorna o seno hiperbólico inverso de um número. O seno hiperbólico inverso é o valor cujo seno hiperbólico é , portanto <paramref name="Arg1" /> Asinh(Sinh(number)) é igual <paramref name="Arg1" /> a .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A coordenada x do ponto.</param>
        <param name="Arg2">A coordenada y do ponto.</param>
        <summary>Retorna o arco tangente, ou a tangente inversa, das coordenadas x e y especificadas. O arco tangente é o ângulo a partir do eixo x até uma linha contendo a origem (0, 0) e um ponto com as coordenadas (núm_x, núm_y). O ângulo é dado em radianos entre -pi e pi, excluindo -pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Um resultado positivo representa um ângulo no sentido anti-horário a partir do eixo x; um resultado negativo representa um ângulo no sentido horário.</para>
          <para>
            <b>Atan2(a,b)</b> é igual <b>a Atan(b/a)</b>, exceto que a pode ser igual a 0 em <b>Atan2</b>. </para>
          <para>Se ambos <paramref name="Arg1" /> <paramref name="Arg2" /> e são 0, Atan2 retorna um valor de erro. </para>
          <para>Para expressar o arctangent em graus, multiplique o resultado por 180/PI( ) ou use o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> método.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Qualquer número real entre 1 e -1.</param>
        <summary>Retorna a tangente hiperbólica inversa de um número. O número deve estar entre -1 e 1 (excluindo -1 e 1).</summary>
        <returns>To be added.</returns>
        <remarks><para>A tangente hiperbólica inversa é o valor cuja tangente hiperbólica é <b>Arg1</b>, portanto <b>Atanh(Tanh(number))</b> é igual <paramref name="Arg1" /> a .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 30 argumentos para os quais você deseja obter a média aritmética dos desvios absolutos. Você também pode usar uma matriz única ou uma referência a matriz em vez dos argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a média dos desvios absolutos de pontos de dados com relação a sua média. Desv.Médio é uma medida da variabilidade em um conjunto de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev</b> é influenciado pela unidade de medida nos dados de entrada. </para>
          <para>Argumentos devem ser números, ou ser nomes, matrizes ou referências que contenham números.</para>
          <para>Valores lógicos e representações de números em forma de texto que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>A equação para o desvio médio é: 

</para>
          <para>Figura 1: Equação para desvio médio</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 30 argumentos numéricos para os quais você deseja obter a média.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a média aritmética dos argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto que não podem ser traduzidos em números geram erros. Se desejar incluir valores lógicos e representações de números em forma de texto em uma referência como parte do cálculo, use a função MÉDIAA. </para>
          <para>O <b>método Average</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média que é a média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median que é o número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4.</description>
            </item>
            <item>
              <description>Modo que é o número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para>Ao calcular a média de células, lembre-se da diferença entre células vazias e aquelas que contêm o valor zero, principalmente se você tiver desmarcado a caixa de seleção Valores zero na guia Exibir (comando Opções, menu Ferramentas). As células vazias não são contadas mas os valores zero são.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma ou mais células para calcular a média.</param>
        <param name="Arg2">O critério na forma de um número, expressão, referência de célula ou texto que define para quais células será calculada a média. Por exemplo, os critérios podem ser expressos como 32, "32", " &gt; 32", "maçãs" ou B4.</param>
        <param name="Arg3">O conjunto real de células para calcular a média. Se omitido, o intervalo é usado.</param>
        <summary>Retorna a média (aritmética) de todas as células em um intervalo que satisfazem um determinado critério.</summary>
        <returns>To be added.</returns>
        <remarks><para>As células no intervalo que contêm <b>true</b> ou <b>false</b> são ignoradas. </para>
          <para>Se uma célula no intervalo ou average_range for uma célula vazia, <b>AverageIf</b> a ignorará. </para>
          <para>Se uma célula em critérios estiver vazia, <b>AverageIf</b> a tratará como um valor 0. </para>
          <para>Se nenhuma célula no intervalo atender aos critérios, <b>AverageIf</b> gerará um valor de erro. </para>
          <para>Você pode usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*) nos critérios. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para>Intervalo_média não precisa ter o mesmo tamanho e a mesma forma do intervalo. As células reais para as quais é calculada a média são determinadas pelo uso da célula superior esquerda em intervalo_média como a célula inicial e, em seguida, pela inclusão das células que correspondem em tamanho e forma ao intervalo. Por exemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>O <b>método AverageIf</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média que é a média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median que é o número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4.</description>
            </item>
            <item>
              <description>Modo que é o número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Um ou mais intervalos nos quais avaliar o critério associado.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Retorna a média (aritmética) de todas as células que satisfazem múltiplos critérios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se uma célula no average_range for uma célula vazia, <b>AverageIfs</b> a ignorará. </para>
          <para>Se uma célula em um intervalo de critérios estiver vazia, <b>AverageIfs</b> a tratará como um valor 0. </para>
          <para>Células no intervalo que contêm <b>valores verdadeiros</b> como 1; células no intervalo que contêm <b>false</b> avaliar como 0 (zero). </para>
          <para>Cada célula em intervalo_média é usada no cálculo da média apenas se todos os critérios correspondentes especificados forem verdadeiros para aquela célula.</para>
          <para>Se as células average_range estão vazias ou contêm valores de texto que não podem ser convertidos em números, <b>AverageIfs</b> gerará um erro. </para>
          <para>Se não houver células que atendem a todos os <b>critérios, AverageIfs</b> gerará um valor de erro. </para>
          <para>Você pode usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*) nos critérios. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para>Cada intervalo_critérios não precisa ter o mesmo tamanho e a mesma forma do intervalo_média. As células reais para as quais é calculada a média são determinadas pelo uso da célula superior esquerda no intervalo_critérios como a célula inicial e, em seguida, pela inclusão das células que correspondem em tamanho e forma ao intervalo. Por exemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>A <b>função AverageIfs</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média que é a média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median que é o número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4.</description>
            </item>
            <item>
              <description>Modo que é o número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Um número que você deseja converter em texto, uma referência em uma célula contendo um número ou uma fórmula que resulta em um número.</param>
        <summary>Converte um número em texto tailandês e adiciona um sufixo de "Baht."</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número que você deseja converter.</param>
        <param name="Arg2">O Radix base em que você deseja converter o número.</param>
        <param name="Arg3">O comprimento mínimo da cadeia de caracteres retornada. Se zeros à esquerda omitidos não são adicionados.</param>
        <summary>Converte um número em uma representação de texto com o raio determinado (base).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em que a função deve ser avaliada.</param>
        <param name="Arg2">A ordem da função de Bessel. Se N não for um inteiro, será truncado.</param>
        <summary>Retorna a função de Bessel modificada, que equivale à função de Bessel avaliada por argumentos puramente imaginários.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numérico, BesselI retornará o valor de erro #VALOR!. </para>
          <para>Se n não for numérico, BesselI gerará um valor de erro. </para>
          <para>Se n &lt; 0, BesselI gerará um valor de erro. </para>
          <para>A enésima ordem modificada da função de Bessel da variável x é: 

</para>
          <para>Figura 1: Função Bessel da variável x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em que a função deve ser avaliada.</param>
        <param name="Arg2">A ordem da função de Bessel. Se N não for um inteiro, será truncado.</param>
        <summary>Retorna a função de Bessel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numerado, <b>BesselJ</b> gerará um valor de erro. </para>
          <para>Se n não for númérico, <b>BesselJ</b> retornará o gerará um valor de erro. </para>
          <para>Se n &lt; 0, <b>BesselJ</b> gerará um valor de erro. </para>
          <para>A enésima ordem da função de Bessel da variável x é: 

 </para>
          <para>Figura 1: Função Bessel da variável x</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Figura 2: Função Gamma</para>
          <para> </para>
          <para> </para>
          <para>é a função Gamma.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em que a função deve ser avaliada.</param>
        <param name="Arg2">A ordem da função. Se n não for um inteiro, será truncado.</param>
        <summary>Retorna a função de Bessel modificada, que equivale às funções de Bessel avaliadas por argumentos puramente imaginários.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não fornumérico, <b>BesselK</b> gerará um valor de erro. </para>
          <para>Se n não for númérico, <b>BesselK</b> gerará um valor de erro. </para>
          <para>Se n &lt; 0, <b>BesselK</b> gerará um valor de erro. </para>
          <para>A enésima ordem modificada da função de Bessel da variável x é: 

 </para>
          <para>Figura 1: Função Bessel da variável x</para>
          <para> </para>
          <para> </para>
          <para>onde Jn e Yn são as funções J e Y Bessel, respectivamente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em que a função deve ser avaliada.</param>
        <param name="Arg2">A ordem da função. Se n não for um inteiro, será truncado.</param>
        <summary>Retorna a função de Bessel, também chamada de função de Weber ou de Neumann.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numerado, <b>BesselY</b> gerará um valor de erro. </para>
          <para>Se n não for númérico, <b>BesselY</b> gerará um valor de erro. </para>
          <para>Se n &lt; 0, <b>BesselY</b> gerará um valor de erro. </para>
          <para>A enésima ordem da função de Bessel da variável x é: 

 </para>
          <para>Figura 1: Função Bessel da variável x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor entre A e B no qual se avalia a função.</param>
        <param name="Arg2">O parâmetro alfa da distribuição.</param>
        <param name="Arg3">O parâmetro beta da distribuição.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro</b>, BETA. DIST retorna a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <param name="Arg5">Um limite inferior opcional para o intervalo de x.</param>
        <param name="Arg6">Um limite superior opcional para o intervalo de x.</param>
        <summary>Retorna a função de distribuição cumulativa beta.</summary>
        <returns>To be added.</returns>
        <remarks><para>A distribuição beta geralmente é usada para estudar a variação na porcentagem de algo em amostras, como a fração do dia que as pessoas passam assistindo televisão:</para>
          <list type="bullet">
            <item>
              <description>Se algum argumento não for numerado, <b>Beta_Dist</b> retornará o #VALUE! valor de erro.</description>
            </item>
            <item>
              <description>Se alfa ≤ 0 ou beta ≤ 0, <b>Beta_Dist</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se x &lt; A, x B ou A = B, Beta_Dist &gt; gerar um valor de erro. <b></b></description>
            </item>
            <item>
              <description>Se você omitir valores para A e B (limite inferior e <b>superior),</b> Beta_Dist usará a distribuição beta cumulativa padrão, de modo que A = 0 e B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma probabilidade associada à distribuição beta.</param>
        <param name="Arg2">O parâmetro alfa da distribuição.</param>
        <param name="Arg3">O parâmetro Beta da distribuição.</param>
        <param name="Arg4">Um limite inferior opcional para o intervalo de x.</param>
        <param name="Arg5">Um limite superior opcional para o intervalo de x.</param>
        <summary>Retorna o inverso da função de distribuição cumulativa de uma distribuição beta especificada. Ou seja, se a probabilidade = Beta_Dist(x,...), então Beta_Inv(probabilidade,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>A distribuição beta pode ser usada em planejamento de projeto para modelar tempos de conclusão prováveis, considerando um tempo de conclusão e variabilidade previstos:</para>
          <list type="bullet">
            <item>
              <description>Se qualquer argumento não for numerado, <b>Beta_Inv</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se alfa ≤ 0 ou beta ≤ 0, <b>Beta_Inv</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se a probabilidade ≤ 0 ou probabilidade &gt; 1, <b>Beta_Inv</b> gerar um valor de erro.</description>
            </item>
            <item>
              <description>Se você omitir valores para A e B (limite inferior e <b>superior),</b> o Beta_Inv usará a distribuição beta cumulativa padrão, para que A = 0 e B = 1.</description>
            </item>
          </list>
          <para>Dado um valor para <b>probabilidade,</b> Beta_Inv busca esse valor x de forma que Beta_Dist(x, alfa, beta, TRUE, A, B) = probabilidade. Assim, a precisão <b>de Beta_Inv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> . <b>Beta_Inv</b> usa uma técnica de pesquisa iterativa.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor entre A e B no qual se avalia a função.</param>
        <param name="Arg2">Um parâmetro da distribuição.</param>
        <param name="Arg3">Um parâmetro da distribuição.</param>
        <param name="Arg4">Um limite inferior opcional para o intervalo de x.</param>
        <param name="Arg5">Um limite superior opcional para o intervalo de x.</param>
        <summary>Retorna a função de distribuição cumulativa beta.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> método.</para>
          <para>A distribuição beta geralmente é usada para estudar a variação na porcentagem de determinado valor em amostras, como a fração do dia que as pessoas passam assistindo televisão.</para>
          <list type="bullet">
            <item>
              <description>Se algum argumento não for numerado, <b>BetaDist</b> retornará o #VALUE! valor de erro.</description>
            </item>
            <item>
              <description>Se alfa ≤ 0 ou beta ≤ 0, <b>BetaDist</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se x &lt; A, x &gt; B ou A = B, <b>BetaDist</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se você omitir valores para A e B, <b>BetaDist</b> usará a distribuição beta cumulativa padrão, para que A = 0 e B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma probabilidade associada à distribuição beta.</param>
        <param name="Arg2">O parâmetro alfa da distribuição.</param>
        <param name="Arg3">O parâmetro Beta da distribuição.</param>
        <param name="Arg4">Um limite inferior opcional para o intervalo de x.</param>
        <param name="Arg5">Um limite superior opcional para o intervalo de x.</param>
        <summary>Retorna o inverso da função de distribuição cumulativa para uma distribuição beta especificada. Ou seja, se probabilidade = DistBeta(x,...), Beta.Acum.Inv(probabilidade,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> método.</para>
          <para>A distribuição beta pode ser usada no planejamento de projeto para modelar tempos de conclusão prováveis, considerando tempo de conclusão e variabilidade previstos.</para>
          <list type="bullet">
            <item>
              <description>Se qualquer argumento não for numerado, <b>BetaInv</b> gerará um valor de erro.</description>
            </item>
            <item>
              <description>Se alfa ≤ 0 ou beta ≤ 0, <b>BetaInv</b> gerará um valor de erro. </description>
            </item>
            <item>
              <description>Se probabilidade ≤ 0 ou probabilidade &gt; 1, <b>BetaInv</b> gerará um valor de erro. </description>
            </item>
            <item>
              <description>Se você omitir valores para A e B, <b>BetaInv</b> usará a distribuição beta cumulativa padrão, para que A = 0 e B = 1.</description>
            </item>
          </list>
          <para>Dado um valor para probabilidade, <b>BetaInv</b> procura esse valor x de forma que BetaDist(x, alfa, beta, A, B) = probabilidade. Assim, a precisão <b>do BetaInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . <b>BetaInv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido após 100 iterações, a função gerará um valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número binário que você deseja converter. O número não pode conter mais de 10 caracteres (10 bits). O bit mais significativo do número é o bit de sinal. Os 9 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <summary>Converte um número binário em decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for um número binário válido, ou se contiver mais de 10 caracteres (10 bits), BinaDec gerará um valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número binário que você deseja converter. O número não pode conter mais de 10 caracteres (10 bits). O bit mais significativo do número é o bit de sinal. Os 9 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">O número de caracteres a ser usado. Se locais for omitido, <b>Bin2Hex</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número binário em hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for um número binário válido ou se o número contiver mais de 10 caracteres (10 bits), <b>Bin2Hex</b> gerará um erro. </para>
          <para>Se o número for negativo, <b>Bin2Hex</b> ignorará os locais e retornará um número hexadecimal de 10 caracteres. </para>
          <para>Se <b>Bin2Hex</b> exigir mais do que os caracteres de colocação, ele gerará um erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Bin2Hex</b> gerará um erro. </para>
          <para>Se os locais for negativo, <b>Bin2Hex</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número binário que você deseja converter. O número não pode conter mais de 10 caracteres (10 bits). O bit mais significativo do número é o bit de sinal. Os 9 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">O número de caracteres a ser usado. Se locais for omitido, <b>Bin2Oct</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número binário em octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for um número binário válido ou se o número contiver mais de 10 caracteres (10 bits), <b>Bin2Oct</b> gerará um erro. </para>
          <para>Se o número for negativo, <b>Bin2Oct</b> ignorará os locais e retornará um número octal de 10 caracteres. </para>
          <para>Se <b>Bin2Oct</b> exigir mais do que coloca caracteres, ele gerará um erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Bin2Oct</b> gerará um erro. </para>
          <para>Se os locais for negativo, <b>Bin2Oct</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s - o número de sucessos em avaliações.</param>
        <param name="Arg2">Trials - o número de avaliação independente.</param>
        <param name="Arg3">Probability_s - a probabilidade de sucesso em cada avaliação.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>True</b>, o método retornará a função de distribuição cumulativa, que é a probabilidade de que haja no máximo number_s êxitos; se False , ele retornará a função de massa de probabilidade, que é a probabilidade de que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> haja number_s sucessos. <b></b></param>
        <summary>Retorna a probabilidade de distribuição binomial do termo individual.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use o método <b>Binom_Dist</b> em problemas com um número fixo de testes ou tentativas quando os resultados de determinada tentativa forem apenas sucesso ou fracasso, quando as tentativas forem independentes e quando a probabilidade de sucesso for constante durante toda a experiência. Por exemplo, o <b>Binom_Dist</b> método Binom_Dist pode calcular a probabilidade de que dois dos próximos três recém-nascidos sejam do sexo masculino. </para>
          <list type="bullet">
            <item>
              <description>Núm_s e tentativas são truncados para inteiros.</description>
            </item>
            <item>
              <description>Se number_s, testes ou probability_s não for numerado, o método <b>Binom_Dist</b> gerará um erro. </description>
            </item>
            <item>
              <description>Se number_s 0 ou number_s, o método &lt; &gt; <b>Binom_Dist</b> gerará um erro. </description>
            </item>
            <item>
              <description>Se probability_s &lt; 0 ou probability_s &gt; 1, o método <b>Binom_Dist</b> gerará um erro. A função de massa de probabilidade binomial é: </description>
            </item>
          </list>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>é COMBIN(n,x).</para>
          <para>A distribuição binomial cumulativa é:</para>
          <para>Figura 3: Distribuição binomial cumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número de avaliação independente.</param>
        <param name="Arg2">A probabilidade de sucesso em cada avaliação.</param>
        <param name="Arg3">O número de sucessos em avaliações.</param>
        <param name="Arg4">Se fornecida, essa função retornará a probabilidade de que o número de tentativas bem-sucedidas deve estar entre Arg3 e Arg4.</param>
        <summary>Retorna a probabilidade de um resultado de avaliação usando uma distribuição binomial.</summary>
        <returns>Duplo</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Trials - o número de tentativas de Bernoulli.</param>
        <param name="Arg2">Probability_s - a probabilidade de um sucesso em cada avaliação.</param>
        <param name="Arg3">Alfa - o valor de critério.</param>
        <summary>Retorna o inverso da probabilidade de distribuição binomial do termo individual.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se Trials, Probability_s ou Alpha não for numerado, o método <b>Binom_Inv</b> gerará um erro. </para>
          <para>Se Tentativas não for um inteiro, será truncado.</para>
          <para>Se Trials &lt; 0, o <b>método Binom_Inv</b> gerará um erro. </para>
          <para>Se Probability_s 0 ou Probability_s 1, o método &lt; &gt; <b>Binom_Inv</b> gerará um erro. </para>
          <para>Se Alfa &lt; 0 ou Alfa &gt; 1, o <b>método Binom_Inv</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número de sucessos em avaliações.</param>
        <param name="Arg2">O número de avaliação independente.</param>
        <param name="Arg3">A probabilidade de sucesso em cada avaliação.</param>
        <param name="Arg4">Um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>BinomDist</b> retornará a função de distribuição cumulativa, que é a probabilidade de que haja no máximo number_s sucessos; if <b>false</b>, it returns the probability mass function, which is the probability that there are number_s successes.</param>
        <summary>Retorna a probabilidade de distribuição binomial do termo individual.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>BinomDist</b> em problemas com um número fixo de testes ou tentativas, quando os resultados de qualquer avaliação são apenas sucesso ou falha, quando as tentativas são independentes e quando a probabilidade de sucesso é constante em todo o experimento. Por exemplo, <b>BinomDist</b> pode calcular a probabilidade de que dois dos próximos três recém-nascidos sejam do sexo masculino. </para>
          <para>Núm_s e tentativas são truncados para inteiros.</para>
          <para>Se number_s, testes ou probability_s não for numerado, <b>BinomDist</b> gerará um erro. </para>
          <para>Se number_s &lt; 0 ou &gt; number_s, <b>BinomDist</b> gerará um erro. </para>
          <para>Se probability_s &lt; 0 ou probability_s &gt; 1, <b>BinomDist</b> gerará um erro. </para>
          <para>A função de massa de probabilidade binomial é: </para>
          <para>Figura 1: Função de massa de probabilidade binomial</para>
          <para> </para>
          <para> </para>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>é COMBIN(n,x).</para>
          <para>A distribuição binomial cumulativa é:</para>
          <para>Figura 3: Distribuição binomial cumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A representação decimal do número binário que você deseja avaliar.</param>
        <param name="Arg2">A representação decimal do número binário que você deseja avaliar.</param>
        <summary>Retorna um "Bitwise And" de dois números.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A representação decimal do número binário que você deseja avaliar.</param>
        <param name="Arg2">O número de bits que você deseja deslocar Arg1 à esquerda.</param>
        <summary>Retorna um número de valor deslocado à esquerda por shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A representação decimal do número binário que você deseja avaliar.</param>
        <param name="Arg2">A representação decimal do número binário que você deseja avaliar.</param>
        <summary>Retorna um bitwise OR de 2 números.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A representação decimal do número binário que você deseja avaliar.</param>
        <param name="Arg2">O número de bits que você deseja transferir Arg1 para a direita.</param>
        <summary>Retorna um número de valor deslocado para a direita por shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">A representação decimal do número binário que você deseja avaliar.</param>
        <param name="Arg2">A representação decimal do número binário que você deseja avaliar.</param>
        <summary>Retorna um bit 'Exclusive Or' de dois números.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor que você deseja arredondar.</param>
        <param name="Arg2">Significância - o múltiplo para o qual você deseja arredondar.</param>
        <summary>Retorna um número arredondado para cima, afastando-o de zero, até o múltiplo mais próximo de significância.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> método.</para>
          <para>Por exemplo, se quiser evitar usar centavos nos preços e o seu produto custar R$ 4,42, use a fórmula Ceiling(4;42;0;05)) para arredondar os preços para cima até o valor inteiro mais próximo.</para>
          <para>Se um dos argumentos não for numérico, <b>Ceiling</b> gerará um erro.</para>
          <para>Independentemente do sinal de núm, um valor é arredondado para mais quando estiver se afastando de zero. Caso núm seja um múltiplo exato de significância, não haverá arredondamento.</para>
          <para>Se núm e significância tiverem sinais diferentes, <b>Ceiling</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor que você deseja arredondar.</param>
        <param name="Arg2">O múltiplo ao qual você deseja arredondar.</param>
        <param name="Arg3">Quando dado e não zero, essa função arredonda para longe de zero.</param>
        <summary>Arredoda um número para cima, para o inteiro mais próximo ou para o múltiplo mais próximo de significância.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor que você deseja arredondar.</param>
        <param name="Arg2">Significância - o múltiplo para o qual você deseja arredondar.</param>
        <summary>Retorna o número arredondado especificado para o múltiplo de significância mais próxima.</summary>
        <returns>To be added.</returns>
        <remarks><para>Por exemplo, se quiser evitar usar centavos nos preços e o seu produto custar R$ 4,42, use a fórmula Ceiling(4;42;0;05)) para arredondar os preços para cima até o valor inteiro mais próximo.</para>
          <para>Dependendo do sinal do número e dos argumentos de significância, o método <b>Ceiling_Precise</b> se afasta ou se volta para zero.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Arredonda em direção a zero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Arredonda para longe de zero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Arredonda em direção a zero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Arredonda para longe de zero.</description>
            </item>
          </list>
          <para>Se um dos argumentos não for numerado, <b>Ceiling_Precise</b> gerará um erro. </para>
          <para>Caso núm seja um múltiplo exato de significância, não haverá arredondamento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor no qual você deseja avaliar a distribuição.</param>
        <param name="Arg2">O número de graus de liberdade.</param>
        <summary>Retorna a probabilidade unicaudal da distribuição qui-quadrada.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> métodos e.</para>
          <para>A distribuição de χ2 está associada a um teste de χ2. Use o teste χ2 para comparar valores observados e esperados.</para>
          <para>Por exemplo, uma experiência genética pode gerar a hipótese de que a próxima geração de plantas exibirá um determinado conjunto de cores. Comparando os resultados observados com os previstos, você pode decidir se sua hipótese original é válida.</para>
          <para>Se um dos argumentos não for numerado, <b>ChiDist</b> gerará um erro. </para>
          <para>Se x for negativo, <b>ChiDist</b> gerará um erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom &lt; 1 ou degrees_freedom &gt; 10^10, <b>ChiDist</b> gerará um erro. </para>
          <para>
            <b>ChiDist</b> é calculado como ChiDist = P(X &gt; x), onde X é uma variável aleatória de χ2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma probabilidade associada à distribuição qui-quadrada.</param>
        <param name="Arg2">O número de graus de liberdade.</param>
        <summary>Retorna o inverso da probabilidade unicaudal da distribuição qui-quadrada.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> métodos e.</para>
          <para>Se probabilidade = Dist.Qui (x,...), então Inv.Qui (probabilidade,...) = x. Use esta função para comparar os resultados observados com os esperados para decidir se a hipótese original é válida.</para>
          <para>Se um dos argumentos não for numerado, <b>ChiInv</b> gerará um erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade &gt; 1, <b>ChiInv</b> gerará um erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom &lt; 1 ou degrees_freedom ≥ 10^10, <b>ChiInv</b> gerará um erro.</para>
          <para>Dado um valor para probabilidade, <b>ChiInv</b> procura esse valor x de forma que ChiDist(x, degrees_freedom) = probabilidade. Assim, a precisão <b>de ChiInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> . <b>ChiInv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não convergir depois de 64 iterações, a função gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - O valor no qual você deseja avaliar a distribuição.</param>
        <param name="Arg2">Deg_freedom - O número de graus de liberdade.</param>
        <param name="Arg3">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b>CHISQ_DIST retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição qui-quadrada.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento for não numérico, CHISQ_DIST retornará o valor de erro #VALUE!. </para>
          <para>Se x for negativo, CHISQ_DIST retornará o valor de erro # NUM!. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor no qual você deseja avaliar a distribuição.</param>
        <param name="Arg2">O número de graus de liberdade.</param>
        <summary>Retorna a probabilidade da distribuição qui-quadrada de cauda direita.</summary>
        <returns>To be added.</returns>
        <remarks><para>A distribuição de χ2 está associada a um teste de χ2. Use o teste χ2 para comparar valores observados e esperados.</para>
          <para>Por exemplo, uma experiência genética pode gerar a hipótese de que a próxima geração de plantas exibirá um determinado conjunto de cores. Comparando os resultados observados com os previstos, você pode decidir se sua hipótese original é válida.</para>
          <para>Se um dos argumentos não for numerado, <b>ChiSq_Dist_RT</b> gerará um erro. </para>
          <para>Se x for negativo, <b>ChiSq_Dist_RT</b> gerará um erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom &lt; 1 ou degrees_freedom &gt; 10^10, <b>ChiSq_Dist_RT</b> gerará um erro. <b>ChiSq_Dist_RT</b> é calculado como ChiSq_Dist_RT = P(X &gt; x), onde X é uma variável aleatória de χ2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - Uma probabilidade associada à distribuição qui-quadrada.</param>
        <param name="Arg2">Deg_freedom - O número de graus de liberdade.</param>
        <summary>Retorna o inverso da probabilidade da distribuição qui-quadrada de cauda esquerda.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for <b></b> numerado, ChiSq_Inv retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade 1, ChiSq_Inv &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma probabilidade associada à distribuição qui-quadrada.</param>
        <param name="Arg2">O número de graus de liberdade.</param>
        <summary>Retorna o inverso da probabilidade de cauda direita da distribuição qui-quadrada.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se probabilidade = ChiSq_Dist_RT(x,...), então ChiSq_Inv_RT(probabilidade,...) = x. Use esta função para comparar os resultados observados com os esperados para decidir se a hipótese original é válida.</para>
          <para>Se um dos argumentos não for numerado, <b>ChiSq_Inv_RT</b> gerará um erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade &gt; 1, <b>ChiSq_Inv_RT</b> gerará um erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom &lt; 1 ou degrees_freedom ≥ 10^10, <b>ChiSq_Inv_RT</b> gerará um erro.</para>
          <para>Dado um valor para probabilidade, <b>ChiSq_Inv_RT</b> busca esse valor x de forma que ChiSq_Dist_RT(x, degrees_freedom) = probabilidade. Assim, a precisão <b>de ChiSq_Inv_RT</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> . <b>ChiSq_Inv_RT</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não convergir depois de 64 iterações, a função gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O intervalo de dados que contém observações para comparação com os valores esperados.</param>
        <param name="Arg2">O intervalo de dados que contém a razão entre o produto dos totais de linha e os totais de coluna e o total geral.</param>
        <summary>Retorna o teste para independência.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> retorna o valor da distribuição qui-quadrado (χ2) para a estatística e os graus apropriados de liberdade. Você pode usar testes de χ2 para determinar se os resultados hipotizados são verificados por um experimento.</para>
          <para>Se actual_range e expected_range um número diferente de pontos de <b>dados,</b> ChiSq_Test retornará o valor de erro #N/A. </para>
          <para>O teste de χ2 primeiro calcula uma estatística de χ2 usando a fórmula: </para>
          <para>Figura 1: Fórmula para teste x ao quadrado</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <list type="bullet">
            <item>
              <description>Aij = frequência real na linha i-th, coluna j-th</description>
            </item>
            <item>
              <description>Eij = frequência esperada na linha i-th, coluna j-th</description>
            </item>
            <item>
              <description>r = número ou linhas</description>
            </item>
            <item>
              <description>c = número de colunas</description>
            </item>
          </list>
          <para>Um valor baixo de χ2 é um indicador de independência. Como pode ser visto na fórmula, χ2 é sempre positivo ou 0 e é 0 somente se Aij = Eij para cada i,j.</para>
          <para>
            <b>ChiSq_Test</b> retorna a probabilidade de que um valor da estatística χ2 pelo menos tão alto quanto o valor calculado pela fórmula acima poderia ter ocorrido por acaso sob a suposição de independência. Ao calcular essa probabilidade, o <b>ChiSq_Test</b> usa a distribuição χ2 com um número apropriado de graus de liberdade, df. Se r &gt; 1 e c &gt; 1, df = (r - 1)(c - 1). Se r = 1 e c &gt; 1, df = c - 1 ou se r 1 e &gt; c = 1, df = r - 1. r = c= 1 não é permitido e gera um erro.</para>
          <para>O uso <b>ChiSq_Test</b> é mais apropriado quando os de Eij não são muito pequenos. Alguns estatísticos sugerem que cada Eij deve ser maior ou igual a 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O intervalo de dados que contém observações para comparação com os valores esperados.</param>
        <param name="Arg2">ImportanteEsta função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> método. O intervalo de dados que contém a razão entre o produto dos totais de linha e os totais de coluna e o total geral.</param>
        <summary>Retorna o teste para independência.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> retorna o valor da distribuição qui-quadrado (χ2) para a estatística e os graus apropriados de liberdade. Você pode usar testes de χ2 para determinar se os resultados hipotizados são verificados por um experimento.</para>
          <para>Se actual_range e expected_range um número diferente de pontos de dados, <b>ChiTest</b> retornará o valor de erro #N/A. </para>
          <para>O teste de χ2 primeiro calcula uma estatística de χ2 usando a fórmula: </para>
          <para>Figura 1: Fórmula para teste x ao quadrado</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <list type="bullet">
            <item>
              <description>Aij = frequência real na linha i-th, coluna j-th</description>
            </item>
            <item>
              <description>Eij = frequência esperada na linha i-th, coluna j-th</description>
            </item>
            <item>
              <description>r = número ou linhas</description>
            </item>
            <item>
              <description>c = número de colunas</description>
            </item>
          </list>
          <para> </para>
          <para>Um valor baixo de χ2 é um indicador de independência. Como pode ser visto na fórmula, χ2 é sempre positivo ou 0 e é 0 somente se Aij = Eij para cada i,j.</para>
          <para>
            <b>ChiTest</b> retorna a probabilidade de que um valor da estatística χ2 pelo menos tão alto quanto o valor calculado pela fórmula acima poderia ter ocorrido por acaso sob a suposição de independência. Ao calcular essa probabilidade, <b>ChiTest</b> usa a distribuição χ2 com um número apropriado de graus de liberdade, df. Se r &gt; 1 e c &gt; 1, df = (r - 1)(c - 1). Se r = 1 e c &gt; 1, df = c - 1 ou se r 1 e &gt; c = 1, df = r - 1. r = c= 1 não é permitido e gera um erro.</para>
          <para>O uso <b>de ChiTest</b> é mais apropriado quando os de Eij não são muito pequenos. Alguns estatísticos sugerem que cada Eij deve ser maior ou igual a 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Especifica qual argumento de valor é selecionado. Arg1 deve ser um número entre 1 e 29, ou uma fórmula ou referência a uma célula que contenha um número entre 1 e 29.</param>
        <param name="Arg2">1 a 29 argumentos de valor a partir dos quais Escolher seleciona um valor ou uma ação a ser realizada com base em Arg1. Os argumentos podem ser números, referências de célula, nomes definidos, fórmulas, funções ou texto.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Usa <paramref name="Arg1" /> como o índice para retornar um valor da lista de argumentos de valor.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <paramref name="Arg1" /> for 1, <b>Escolha</b> retornará valor1; se for 2, <b>Escolha</b> retornará value2; e assim por diante. </para>
          <para>Se for menor que 1 ou maior do que o número do último valor na <paramref name="Arg1" /> lista, <b>Escolha</b> gerará um erro. </para>
          <para>Se <paramref name="Arg1" /> for uma fração, ela será truncada para o inteiro mais baixo antes de ser usada. </para>
          <para>Se <paramref name="Arg1" /> for uma matriz, cada valor será avaliado quando <b>Choose</b> for avaliado. </para>
          <para>Os argumentos de valor a <b>escolher podem</b> ser referências de intervalo, bem como valores individuais. Por exemplo, a fórmula:</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>avalia para:</para>
          <para>=SUM(B1:B10)</para>
          <para>que retorna um valor com base nos valores no intervalo B1:B10.</para>
          <para>A <b>função Escolher</b> é avaliada primeiro, retornando a referência B1:B10. A função SUM é avaliada usando B1:B10, o resultado da <b>função Escolher,</b> como seu argumento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Qualquer informação de planilha da qual você deseja remover caracteres não imprimíveis.</param>
        <summary>Remove todos os caracteres do texto que não podem ser impressos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Clean</b> em texto importado de outros aplicativos que contenham caracteres que podem não ser impressos com seu sistema operacional. Por exemplo, você pode usar <b>Clean</b> para remover algum código de computador de baixo nível que está frequentemente no início e no fim dos arquivos de dados e não pode ser impresso.</para>
          <para>
            <b>Importante</b>: a <b>função Clean</b> foi projetada para remover os primeiros 32 caracteres não impressáveis no código ASCII de 7 bits (valores de 0 a 31) do texto. No conjunto de caracteres Unicode, há caracteres não imprimíveis adicionais (os valores 127, 129, 141, 143, 144 e 157). Por si só, <b>a função Clean</b> não remove esses caracteres adicionais que não são de impressão.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número de itens.</param>
        <param name="Arg2">O número de itens em cada combinação.</param>
        <summary>Retorna o número de combinações de um dado número de itens. Use <b>Combinar</b> para determinar o número total possível de grupos para um determinado número de itens.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos numéricos são truncados para inteiros.</para>
          <para>Se um dos argumentos não for numerado, <b>Combin</b> gerará um erro. </para>
          <para>Se o &lt; número 0, number_chosen 0 ou número &lt; &lt; number_chosen, <b>Combinar</b> gerará um erro. </para>
          <para>Uma combinação é qualquer conjunto ou subconjunto de itens, independentemente da sua ordem interna. As combinações diferem das permutas para as quais a ordem interna é importante.</para>
          <para>O número de combinações é o seguinte, onde número = n e number_chosen = k: </para>
          <para>Figura 1: Número de combinações</para>
          <para> </para>
          <para> </para>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número total de itens.</param>
        <param name="Arg2">O número de itens em cada combinação.</param>
        <summary>Retorna o número de combinações com repetições para um determinado número de itens.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O coeficiente real do número complexo.</param>
        <param name="Arg2">O coeficiente imaginário do número complexo.</param>
        <param name="Arg3">O sufixo para o componente imaginário do número complexo. Se for omitido, sufixo será considerado "i".</param>
        <summary>Converte coeficientes reais e imaginários em números complexos no formato x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Todas as funções de números complexos aceitam "i" e "j" para sufixo, mas não aceitam nem "I" nem "J". O uso de letras maiúsculas gera um erro. Todas as funções que aceitam dois ou mais números complexos solicitam que todos os sufixos coincidam.</para>
          <para>Se <paramref name="Arg1" /> não fornumérico, <b>Complex</b> gerará um erro. </para>
          <para>Se <paramref name="Arg2" /> não fornumérico, <b>Complex</b> gerará um erro. </para>
          <para>Se <paramref name="Arg3" /> não for "i" nem "j", <b>Complex</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O nível de significância utilizado para calcular o nível de confiança. O nível de confiança é igual a 100*(1 - alfa)% ou, em outras palavras, um alfa de 0,05 indica um nível de confiança de 95%.</param>
        <param name="Arg2">O desvio padrão da população para o intervalo de dados. Presume-se que ele é conhecido.</param>
        <param name="Arg3">O tamanho da amostra.</param>
        <summary>Retorna um valor que você pode usar para construir um intervalo de confiança para uma média da população.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> métodos e.</para>
          <para>O intervalo de confiança é um intervalo de valores. Sua média de amostra, x, está no centro desse intervalo e o intervalo é x ± <b>Confidence</b>. Por exemplo, se x for a média de amostra de tempos de entrega para produtos ordenados por email, x ± <b>Confiança</b> é um intervalo de médias de população. Para qualquer média de população, μ0, nesse intervalo, a probabilidade de obter uma média de amostra mais longe de μ0 do que x é maior do que alfa; para qualquer média de população, μ0, não nesse intervalo, a probabilidade de obter uma média de amostra mais longe de μ0 do que x é menor que alfa. Em outras palavras, suponha que usamos x, standard_dev e tamanho para construir um teste de duas caudas no nível de significância alfa da hipótese de que a média da população é μ0. Em seguida, não rejeitaremos essa hipótese se μ0 estiver no intervalo de confiança e rejeitaremos essa hipótese se μ0 não estiver no intervalo de confiança. O intervalo de confiança não nos permite inferir se há probabilidade 1 – alfa de que nosso próximo pacote leve um tempo de entrega que esteja no intervalo de confiança. </para>
          <para>Se qualquer argumento não for numerado, <b>Confidence</b> gerará um erro. </para>
          <para>Se alfa ≤ 0 ou alfa ≥ 1, <b>Confidence</b> gerará um erro. </para>
          <para>Se standard_dev ≤ 0, <b>Confidence</b> gerará um erro. </para>
          <para>Se tamanho não for um inteiro, será truncado.</para>
          <para>Se o &lt; tamanho 1, <b>Confidence</b> gerará um erro. </para>
          <para>Se considerarmos que alfa é igual a 0,05, precisaremos calcular a área sob a curva normal padrão que é igual a (1 - alfa) ou 95%. Este valor é ± 1,96. O intervalo de confiança é, portanto: 

</para>
          <para>Figura 1: Intervalo de confiança</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O nível de significância utilizado para calcular o nível de confiança. O nível de confiança é igual a 100*(1 - alfa)% ou, em outras palavras, um alfa de 0,05 indica um nível de confiança de 95%.</param>
        <param name="Arg2">O desvio padrão da população para o intervalo de dados. Presume-se que ele é conhecido.</param>
        <param name="Arg3">O tamanho da amostra.</param>
        <summary>Retorna um valor que você pode usar para construir um intervalo de confiança para uma média da população.</summary>
        <returns>To be added.</returns>
        <remarks><para>O intervalo de confiança é um intervalo de valores. Sua média de amostra, x, está no centro desse intervalo e o intervalo é x ± <b>Confidence_Norm</b>. Por exemplo, se x for a média de amostra de tempos de entrega para produtos ordenados por email, x ± <b>Confidence_Norm</b> é um intervalo de médias de população. Para qualquer média de população, μ0, nesse intervalo, a probabilidade de obter uma média de amostra mais longe de μ0 do que x é maior do que alfa; para qualquer média de população, μ0, não nesse intervalo, a probabilidade de obter uma média de amostra mais longe de μ0 do que x é menor que alfa. Em outras palavras, suponha que x, standard_dev e tamanho seja usado para construir um teste de duas caudas no nível de significância alfa da hipótese de que a média de população é μ0. Em seguida, não rejeitaremos essa hipótese se μ0 estiver no intervalo de confiança e rejeitaremos essa hipótese se μ0 não estiver no intervalo de confiança. O intervalo de confiança não permite a inferência de que há probabilidade 1 – alfa que o próximo pacote levará um tempo de entrega que está no intervalo de confiança.</para>
          <para>Se algum argumento não for numerado, <b>Confidence_Norm</b> gerará um erro. </para>
          <para>Se alfa ≤ 0 ou alfa ≥ 1, <b>Confidence_Norm</b> gerará um erro. </para>
          <para>Se standard_dev ≤ 0, <b>Confidence_Norm</b> gerará um erro. </para>
          <para>Se tamanho não for um inteiro, será truncado.</para>
          <para>Se o &lt; tamanho 1, <b>Confidence_Norm</b> gerará um erro. </para>
          <para>Presumindo que alfa seja igual a 0,05, calcule a área na curva normal padrão que equivale a (1 - alfa) ou 95%. Esse valor é ± 1,96. Portanto, o intervalo de confiança é: 

</para>
          <para>Figura 1: Intervalo de confiança</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alfa - O nível de significância usado para calcular o nível de confiança. O nível de confiança é igual a 100*(1 - alfa)% ou, em outras palavras, um alfa de 0,05 indica um nível de confiança de 95%.</param>
        <param name="Arg2">Standard_dev - O desvio padrão de população para o intervalo de dados e é assumido como conhecido.</param>
        <param name="Arg3">Tamanho - O tamanho da amostra.</param>
        <summary>Retorna o intervalo de confiança para uma média da população, usando a distribuição t de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>Confidence_T</b> retornará o #VALUE! valor de erro. </para>
          <para>Se alfa ≤ 0 ou alfa ≥ 1, <b>Confidence_T</b> retornará o #NUM! valor de erro. </para>
          <para>Se standard_dev ≤ 0, <b>Confidence_T</b> retornará o #NUM! valor de erro. </para>
          <para>Se tamanho não for um inteiro, será truncado.</para>
          <para>Se o tamanho for igual a 1, <b>Confidence_T</b> retornará #DIV/0! valor de erro. </para>
          <para>Se o tamanho for igual a 1, <b>Confidence_T</b> retornará #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em de_unidades a ser convertido.</param>
        <param name="Arg2">A unidade do número.</param>
        <param name="Arg3">A unidade do resultado. <b>Convert</b> aceita os seguintes valores de texto (entre aspas) para from_unit e to_unit que estão listados na seção Comentários abaixo.</param>
        <summary>Converte um número de um sistema de medida para outro. Por exemplo, <b>Convert</b> pode traduzir uma tabela de distâncias em milhas para uma tabela de distâncias em quilômetros.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Gram</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Lesma</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Massa em libras (avoirdupois)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (unidade de massa atômica)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Massa em onças (avoirdupois)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Medidor</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Milha inglesa</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Milha náutica</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Polegada</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Foot</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>Jarda</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angström</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Paica (1/72 pol.)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Ano</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Dia</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Hora</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Minuto</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Segundo</term>
              <description>"s"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa"</description>
            </item>
            <item>
              <term>Ambiente</term>
              <description>"atm"</description>
            </item>
            <item>
              <term>mm de Mercúrio</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dyne</term>
              <description>"dina"</description>
            </item>
            <item>
              <term>Libra-força</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Caloria termodinâmica</term>
              <description>"c"</description>
            </item>
            <item>
              <term>Caloria IT</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Eletron-volt</term>
              <description>"eV" (ou "ev")</description>
            </item>
            <item>
              <term>Hp-hour</term>
              <description>"HPh" (ou "hh")</description>
            </item>
            <item>
              <term>Hora de 2007</term>
              <description>"Wh" (ou "wh")</description>
            </item>
            <item>
              <term>Foot-pound</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (ou "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Cavalos-de-potência</term>
              <description>"HP" (ou "h")</description>
            </item>
            <item>
              <term>Watt</term>
              <description>"W" (ou "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Tesla</term>
              <description>"T"</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Grau Celsius</term>
              <description>"C" (ou "cel")</description>
            </item>
            <item>
              <term>Grau Fahrenheit</term>
              <description>"F" (ou "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (ou "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Teaspoon</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Tablespoon</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Onça fluida</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Cup</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>Pinta americana</term>
              <description>"pt" (ou "us_pt")</description>
            </item>
            <item>
              <term>Pinta inglesa</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Galão</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>Liter</term>
              <description>"l" (ou "lt")</description>
            </item>
          </list>
          <para>Os seguintes prefixos abreviados de unidades podem ser acrescentados antes de qualquer valor métrico de_unidade ou para_unidade.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Se os tipos de dados de entrada estão incorretos, <b>Convert</b> gerará um erro. </para>
          <para>Se a unidade não existir, <b>Convert</b> gerará um erro. </para>
          <para>Se a unidade não suportar um prefixo de unidade abreviado, <b>Convert</b> gerará um erro. </para>
          <para>Se as unidades estão em grupos diferentes, <b>Convert</b> gerará um erro. </para>
          <para>Nomes de unidades e prefixos fazem distinção entre maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Um intervalo de células de valores</param>
        <param name="Arg2">Um segundo intervalo de células de valores</param>
        <summary>Retorna o coeficiente de correlação dos <paramref name="Arg1" /> <paramref name="Arg2" /> intervalos e células.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use o coeficiente de correlação para determinar a relação entre duas propriedades. Por exemplo, você pode examinar a relação entre a temperatura média de um local e o uso de aparelhos de ar condicionado.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se <paramref name="Arg1" /> e tiver um número diferente de pontos de <paramref name="Arg2" /> dados, <b>Correl</b> gerará um erro. </para>
          <para>Se estiver vazio ou se s (o desvio padrão) de seus valores for <paramref name="Arg1" /> <paramref name="Arg2" /> igual a zero, <b>Correl</b> gerará um erro. </para>
          <para>A equação do coeficiente de correlação é:</para>
          <para>Figura 1: Equação para o coeficiente de correlação</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa Average(Arg1) e Average(Arg2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Qualquer número real cujo cosseno hiperbólico você deseja calcular.</param>
        <summary>Retorna o cosseno hiperbólico de um número.</summary>
        <returns>To be added.</returns>
        <remarks><para>A fórmula para o cosseno hiperbólico é: </para>
          <para>Figura 1: Fórmula para o cosseno hiperbólico</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O ângulo em radianos para o qual você deseja o cotangent.</param>
        <summary>Retorna o cotangente de um ângulo.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O ângulo em radianos para o qual você deseja o cotangent hiperbólico.</param>
        <summary>Retorna o cotangente hiperbólico de um número.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Argumentos de 1 a 30 que contêm ou se referem a diferentes tipos de dados, mas somente os números são contados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Conta quantas células contêm números e conta os números na lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Count</b> para obter o número de entradas em um campo de número que está em um intervalo ou matriz de números. </para>
          <para>Os argumentos que são números, datas ou representações de números por extenso são contados.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Os argumentos que são valores de erro ou texto que não possam ser convertidos em números são ignorados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números da matriz ou referência serão contados. Células vazias, valores lógicos, valores de texto ou de erro na matriz ou referência são ignorados.</para>
          <para>Se você quiser contar valores lógicos, texto ou valores de erro, use a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> função.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Os argumentos de 1 a 30 que representam os valores que você deseja contar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Conta o número de células que não estão vazias e os valores na lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>CountA</b> para contar o número de células que contêm dados em um intervalo ou matriz.</para>
          <para>Um valor é qualquer tipo de informação, incluindo os valores de erro e o texto vazio (""). Um valor não inclui células vazias.</para>
          <para>Se um argumento for uma matriz ou uma referência, serão usados apenas os valores dessa matriz ou referência. As células vazias e os valores de texto na matriz ou na referência são ignorados.</para>
          <para>Se você não precisar contar valores lógicos, texto ou valores de erro, use a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> função.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">O intervalo no qual as células em branco serão contadas.</param>
        <summary>Conta o número de células vazias no intervalo especificado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Células com fórmulas que retornam "" (texto vazio) também são contadas. Células com valores nulos não são contadas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O intervalo de células no qual você deseja contar células.</param>
        <param name="Arg2">Os critérios no formulário de um número, uma expressão, uma referência de célula ou um texto que define quais células serão contadas. Por exemplo, os critérios podem ser expressos como 32, "32", " &gt; 32", "maçãs" ou B4.</param>
        <summary>Conta o número de células em um intervalo que atendem aos critérios fornecidos.</summary>
        <returns>Retorna <see cref="T:System.Double" /> .</returns>
        <remarks><para>Você pode usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*), para o critério. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Um ou mais intervalos nos quais avaliar o critério associado.</param>
        <param name="Arg2">Um ou mais critérios na forma de um número, uma expressão, uma referência de célula ou um texto que definem quais células serão contadas. Por exemplo, os critérios podem ser expressos como 32, "32", " &gt; 32", "maçãs" ou B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula o número de células não vazias em um intervalo que correspondem a múltiplos critérios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cada célula em um intervalo é calculada apenas se todos os critérios correspondentes especificados forem verdadeiros para aquela célula.</para>
          <para>Se uma célula em qualquer argumento for uma célula vazia, <b>CountIfs</b> a tratará como um valor 0. </para>
          <para>Você pode usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*) nos critérios. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o número de dias do início do período de cupom até a data de liquidação.</summary>
        <returns>To be added.</returns>
        <remarks><para>A tabela a seguir contém a lista de valores para <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CoupDayBs</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupDayBs</b> gerará um erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>CoupDayBs</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupDayBs</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o número de dias no período de cupom que contém a data de liquidação.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir contém os valores usados em <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CoupDays</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupDays</b> gerará um erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>CoupDays</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupDays</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o número de dias da data de liquidação até a data do próximo cupom.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir contém os valores usados em <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CoupDaysNc</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupDaysNc</b> gerará um erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>CoupDaysNc</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupDaysNc</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna um número que representa a próxima data de cupom após a data de liquidação.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir contém os valores usados em <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CupNcd</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupNcd</b> gerará um erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>CoupNcd</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupNcd</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o número de cupons pagáveis entre a data de liquidação e a data de vencimento, arredondado para o próximo cupom inteiro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir contém os valores usados em <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CoupNum</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupNum</b> gerará um erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>CoupNum</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupNum</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A data de liquidação do título. A data de liquidação do título é aquela, após a data de emissão, quando o título é negociado com o cliente.</param>
        <param name="Arg2">A data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">O número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg4">O tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a data do cupom anterior antes da data de liquidação.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <para>A tabela a seguir contém os valores usados em <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>CoupPcd</b> gerará um erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>CoupPcd</b> gerará um erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>CoupPcd</b> gerará um erro. </para>
          <para>Se liquidação ≥ vencimento, <b>CoupPcd</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primeiro intervalo de células de inteiros.</param>
        <param name="Arg2">Segundo intervalo de células de inteiros.</param>
        <summary>Retorna a covariância, a média dos produtos dos desvios para cada par de pontos de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> o método <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> and.</para>
          <para>Use a covariância para determinar a relação entre dois conjuntos de dados. Por exemplo, você pode verificar se uma receita maior é acompanhada por maiores níveis de instrução.</para>
          <para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Se <paramref name="Arg1" /> e tiver números diferentes de pontos de <paramref name="Arg2" /> dados, <b>Covar</b> gerará um erro. </para>
          <para>Se estiver <paramref name="Arg1" /> vazio <paramref name="Arg2" /> ou estiver vazio, o <b>Covar</b> gerará um erro. </para>
          <para>A covariância é: </para>
          <para>Figura 1: Equação para covariância</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa AVERAGE(array1) e AVERAGE(array2) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primeiro intervalo de células de inteiros.</param>
        <param name="Arg2">Segundo intervalo de células de inteiros.</param>
        <summary>Retorna a covariância da população, a média dos produtos dos desvios para cada par de ponto de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Covariance_P</b> para determinar a relação entre dois conjuntos de dados. Por exemplo, você pode verificar se uma receita maior é acompanhada por maiores níveis de instrução.</para>
          <para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Se <paramref name="Arg1" /> e tiver números diferentes de pontos de <paramref name="Arg2" /> dados, <b>Covariance_P</b> gerará um erro. </para>
          <para>Se estiver <paramref name="Arg1" /> vazio <paramref name="Arg2" /> ou estiver vazio, <b>Covariance_P</b> gerará um erro. </para>
          <para>A covariância é: </para>
          <para>Figura 1: Equação para covariância</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa AVERAGE(array1) e AVERAGE(array2) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - O primeiro intervalo de células de inteiros.</param>
        <param name="Arg2">Array2 - O segundo intervalo de células de inteiros.</param>
        <summary>Retorna a covariância da amostra, a média dos produtos dos desvios para cada par de pontos de dados em dois conjuntos de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Se matriz1 e matriz2 têm números diferentes de pontos de <b>dados,</b> Covariance_S retorna o valor de erro #N/A. </para>
          <para>Se matriz1 ou matriz2 estiver vazia ou contiver apenas 1 ponto de dados <b>cada,</b> Covariance_S retornará o #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna um inteiro de 32 bits que indica o aplicativo no qual esse objeto foi criado. Inteiro somente <b>leitura</b> (int em C#).</summary>
        <value>To be added.</value>
        <remarks><para>Se o objeto foi criado no Microsoft Excel, essa propriedade retornará a sequência XCEL, que é equivalente ao número hexadecimal 5843454C. A propriedade <b>Creator</b> foi projetada para ser usada no Microsoft Excel para Macintosh, onde cada aplicativo possui um código de criador de quatro caracteres. Por exemplo, o Microsoft Excel possui o código de criador XCEL.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número de tentativas de Bernoulli.</param>
        <param name="Arg2">A probabilidade de um sucesso em cada tentativa.</param>
        <param name="Arg3">O valor do critério.</param>
        <summary>Retorna o menor valor para o qual a distribuição binomial cumulativa é maior ou igual ao valor padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use esta função para aplicações de garantia de qualidade. Por exemplo, use <b>CritBinom</b> para determinar o maior número de partes com defeito que têm permissão para sair de uma linha de assembly executado sem rejeitar todo o lote.</para>
          <para>Se qualquer argumento não for numerado, <b>CritBinom</b> gerará um erro. </para>
          <para>Se tentativas não for um inteiro, será truncado.</para>
          <para>Se as tentativas &lt; 0, <b>CritBinom</b> gerará um erro. </para>
          <para>Se probability_s for &lt; 0 ou probability_s &gt; 1, <b>CritBinom</b> gerará um erro. </para>
          <para>Se alfa &lt; 0 ou alfa &gt; 1, <b>CritBinom</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O ângulo em radianos para o qual você deseja o cosecant.</param>
        <summary>Retorna o cosecant de um ângulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O ângulo em radianos para o qual você deseja o cosecant hiperbólico.</param>
        <summary>Retorna o cosecant hiperbólico de um ângulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A taxa de juros</param>
        <param name="Arg2">O número total de períodos de pagamentos.</param>
        <param name="Arg3">O valor atual.</param>
        <param name="Arg4">O primeiro período no cálculo. Os períodos de pagamento são numerados começando por 1.</param>
        <param name="Arg5">O último período no cálculo.</param>
        <param name="Arg6">O vencimento do pagamento.</param>
        <summary>Retorna os juros acumulados pagos por um empréstimo entre início_período e final_período.</summary>
        <returns>To be added.</returns>
        <remarks><para>As tabelas a seguir listam valores usados em <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (zero)</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se você fizer pagamentos mensais em um empréstimo de quatro anos com uma taxa de juros anual de 12%, use 12%/12 para taxa e 4*12 para <paramref name="Arg2" /> . Se você fizer pagamentos anuais no mesmo empréstimo, use 12% para taxa e 4 para <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , e tipo são <paramref name="Arg5" /> truncados para inteiros. </para>
          <para>Se a taxa ≤ 0, ≤ 0 ou <paramref name="Arg2" /> <paramref name="Arg3" /> ≤ 0, <b>CumIPmt</b> gerará um erro. </para>
          <para>Se <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 ou <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumIPmt</b> gerar um erro. </para>
          <para>Se <paramref name="Arg6" /> for qualquer número diferente de 0 ou 1, <b>CumIPmt</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">A taxa de juros</param>
        <param name="Arg2">O número total de períodos de pagamentos.</param>
        <param name="Arg3">O valor atual.</param>
        <param name="Arg4">O primeiro período no cálculo. Os períodos de pagamento são numerados começando por 1.</param>
        <param name="Arg5">O último período no cálculo.</param>
        <param name="Arg6">O último período no cálculo.</param>
        <summary>Retorna o capital acumulado pago sobre um empréstimo entre início_período e final_período.</summary>
        <returns>To be added.</returns>
        <remarks><para>As tabelas a seguir listam valores usados em <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (zero)</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se você fizer pagamentos mensais em um empréstimo de quatro anos com uma taxa de juros anual de 12%, use 12%/12 para taxa e 4*12 para <paramref name="Arg2" /> . Se você fizer pagamentos anuais no mesmo empréstimo, use 12% para taxa e 4 para <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , e tipo são <paramref name="Arg5" /> truncados para inteiros. </para>
          <para>Se a taxa ≤ 0, <paramref name="Arg2" /> ≤ 0 ou <paramref name="Arg3" /> ≤ 0, <b>CumPrinc</b> gerará um erro. </para>
          <para>Se <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 ou <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumPrinc</b> gerar um erro. </para>
          <para>Se <paramref name="Arg6" /> for qualquer número diferente de 0 ou 1, <b>CumPrinc</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">O intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Calcula a média dos valores em uma coluna de uma lista ou um banco de dados que corresponde às condições especificadas por você.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entry é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) e end_date (Arg1) são as duas datas entre as quais você deseja saber o número de dias.</param>
        <param name="Arg2">start_date(Arg2) e end_date (Arg1) são as duas datas entre as quais você deseja saber o número de dias.</param>
        <summary>Retorna o número de dias entre as duas datas.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">As duas datas entre as quais você deseja saber o número de dias. Se data_inicial (Arg1) ocorrer após data_final (Arg2), Dias360 retornará um número negativo. As datas devem ser inseridas com a função DATA ou como resultado de outras fórmulas ou funções.</param>
        <param name="Arg2">As duas datas entre as quais você deseja saber o número de dias. Se data_inicial (Arg1) ocorrer após data_final (Arg2), Dias360 retornará um número negativo. As datas devem ser inseridas com a função DATA ou como resultado de outras fórmulas ou funções.</param>
        <param name="Arg3">Um valor Boolean que especifica se o método americano ou europeu deve ser usado no cálculo.</param>
        <summary>Retorna o número de dias entre duas datas com base em um ano de 360 dias (doze meses de 30 dias).</summary>
        <returns>To be added.</returns>
        <remarks><para>Use essa função para ajudar a calcular pagamentos se seu sistema de contabilidade for baseado em doze meses de 30 dias. As tabelas a seguir contêm os valores para <paramref name="Arg3" /> .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> ou omitido</term>
              <description>Método US (NASD). Se a data inicial for o dia 31 de um mês, ela se tornará igual ao dia 30 do mesmo mês. Se a data final for o dia 31 de um mês e a data inicial for anterior ao trigésimo dia de um mês, a data final se tornará igual ao dia primeiro do próximo mês. Caso contrário, a data final se tornará igual ao trigésimo dia do mesmo mês.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Método europeu. A data inicial e final que ocorrer no dia 31 de um mês se tornará igual ao trigésimo dia do mesmo mês.</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Custo - o custo inicial do ativo.</param>
        <param name="Arg2">Recuperação - o valor no final da depreciação (às vezes chamado de valor residual do ativo).</param>
        <param name="Arg3">Vida útil - o número de períodos em que o ativo está se depreciando (às vezes chamado de vida útil do ativo).</param>
        <param name="Arg4">Período - o período com relação ao qual você deseja calcular a depreciação. O período deve usar as mesmas unidades de vida útil.</param>
        <param name="Arg5">Mês - o número de meses do primeiro ano. Se mês for omitido, será presumido como 12.</param>
        <summary>Retorna a depreciação de um ativo para um período especificado, usando o método de balanço de declínio fixo.</summary>
        <returns>To be added.</returns>
        <remarks><para>O método de balanço de declínio fixo calcula a depreciação a uma taxa fixa. DB usa as seguintes fórmulas para calcular a depreciação por um período:</para>
          <para>(custo - depreciação total de períodos anteriores) * taxa</para>
          <para>em que:</para>
          <para>rate = 1 - ((resgate / custo) ^ (1 / vida)), arredondado para três casas decimais</para>
          <para>A depreciação para o primeiro e o último período é um caso especial. Para o primeiro período, DB usa esta fórmula:</para>
          <para>cost * rate * month / 12</para>
          <para>Para o último período, DB usa esta fórmula:</para>
          <para>((custo - depreciação total de períodos anteriores) * taxa * (12 - mês)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">O texto ou a referência a uma célula que contém o texto que você deseja alterar.</param>
        <summary>Converte letras de meia largura (byte único) em uma sequência de caracteres em caracteres de largura total (byte duplo). O nome da função (e os caracteres que ela converte) depende das configurações de idioma.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Conta as células que contêm números em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Conta as células não vazias em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Custo - o custo inicial do ativo.</param>
        <param name="Arg2">Recuperação - o valor no final da depreciação (às vezes chamado de valor residual do ativo). Este valor pode ser 0.</param>
        <param name="Arg3">Vida útil - o número de períodos em que o ativo está se depreciando (às vezes chamado de vida útil do ativo).</param>
        <param name="Arg4">Período - o período com relação ao qual você deseja calcular a depreciação. O período deve usar as mesmas unidades de vida útil.</param>
        <param name="Arg5">Fator - a taxa à qual o saldo diminui. Se fator for omitido, considera-se que seu valor é 2 (no método de saldos decrescentes duplos).</param>
        <summary>Retorna a depreciação de um ativo com relação a um período especificado usando o método de saldos decrescentes duplos ou qualquer outro método especificado por você.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: Todos os cinco argumentos devem ser números positivos.</para>
          <para>O método de saldos decrescentes duplos calcula a depreciação a uma taxa acelerada. A depreciação é mais alta no primeiro período e vai diminuindo nos períodos sucessivos. <b>O Ddb</b> usa a seguinte fórmula para calcular a depreciação por um período:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Altere o fator se você não desejar usar o método de saldos decrescentes duplos.</para>
          <para>Use a função se quiser alternar para o método de depreciação em linha reta quando a depreciação for maior do que o cálculo do <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> saldo em declínio.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o inteiro decimal que você deseja converter. Se o número for negativo, os valores de lugar válidos serão ignorados e <b>Dec2Bin</b> retornará um número binário de 10 caracteres (10 bits), no qual o bit mais significativo é o bit de sinal. Os 9 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Dec2Bin</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número decimal em binário.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o &lt; número -512 ou o número &gt; 511, <b>Dec2Bin</b> retornará o #NUM! valor de erro. </para>
          <para>Se o número não for númérico, <b>Dec2Bin</b> retornará o #VALUE! valor de erro. </para>
          <para>Se <b>Dec2Bin</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Dec2Bin</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais for zero ou negativo, <b>Dec2Bin</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o inteiro decimal que você deseja converter. Se número for negativo, os locais são ignorados e <b>Dec2Hex</b> retorna um número hexadecimal de 10 caracteres (40 bits), no qual o bit mais significativo é o bit de sinal. Os 39 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Dec2Hex</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número decimal em hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o &lt; número -549.755.813.888 ou se o número &gt; 549.755.813.887, <b>Dec2Hex</b> retornará o #NUM! valor de erro. </para>
          <para>Se o número não for númérico, <b>Dec2Hex</b> retornará o #VALUE! valor de erro. </para>
          <para>Se <b>Dec2Hex</b> exigir mais do que caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Dec2Hex</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais são negativos, <b>Dec2Hex</b> retorna o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o inteiro decimal que você deseja converter. Se o número for negativo, os locais são ignorados e <b>Dec2Oct</b> retorna um número octal de 10 caracteres (30 bits), no qual o bit mais significativo é o bit de sinal. Os 29 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Dec2Oct</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número decimal em octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o &lt; número -536.870.912 ou se o número &gt; 536.870.911, <b>Dec2Oct</b> retornará o #NUM! valor de erro. </para>
          <para>Se o número não for númérico, <b>Dec2Oct</b> retornará o #VALUE! valor de erro. </para>
          <para>Se <b>Dec2Oct</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Dec2Oct</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais for negativo, <b>Dec2Oct</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O número que você deseja converter.</param>
        <param name="Arg2">O Radix base do número que você está convertendo.</param>
        <summary>Converte uma representação de texto de um número em uma determinada base em um número decimal.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ângulo - o ângulo em radianos que se deseja converter.</param>
        <summary>Converte radianos em graus.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1 - o primeiro número.</param>
        <param name="Arg2">Núm2 - o segundo número. Se omitido, núm2 será considerado zero.</param>
        <summary>Testa se dois valores são iguais. Retorna 1 se núm1= núm2; caso contrário, retornará 0.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilize esta função para filtrar um conjunto de valores. Por exemplo, somando várias <b>funções Delta,</b> você calcula a contagem de pares iguais. Esta função também é chamada função Kronecker Delta.</para>
          <para>Se o número1 não for númérico, <b>Delta</b> retornará o #VALUE! valor de erro. </para>
          <para>Se o número2 não for númérico, <b>Delta</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - são de 1 a 30 argumentos para os quais se deseja calcular a soma dos desvios quadrados. Você pode também usar uma única matriz ou referência a uma matriz, em vez dos argumentos separados por ponto-e-vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a soma dos quadrados dos desvios de pontos de dados da média da amostra.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números. </para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados. </para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas. </para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros. </para>
          <para>A equação para a soma dos desvios quadrados é: 

 </para>
          <para>Figura 1: Equação para a soma de desvios quadrados</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Extrai um único valor em uma coluna de uma lista ou de um banco de dados que coincide com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Pr - o preço do título por R$ 100 de valor nominal.</param>
        <param name="Arg4">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg5">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a taxa de desconto de um título.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto. </para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for um número de data de série válido, <b>Disc</b> retornará a #VALUE! valor de erro. </para>
          <para>Se pr ≤ 0 ou se resgate ≤ 0, <b>Disc</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>Disc</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>Disc</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>O</b> disco é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para calcular o método Disc</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>B = número de dias em um ano, dependendo da base do ano.</para>
          <para>DSM = número de dias entre liquidação e vencimento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Retorna o maior número em uma coluna de uma lista ou de um banco de dados que coincide com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Retorna o menor número em uma coluna de uma lista ou de um banco de dados que coincide com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - um número, uma referência a uma célula contendo um número ou uma fórmula que avalia um número.</param>
        <param name="Arg2">Decimais - o número de dígitos à direita da vírgula decimal. Se decimais for negativo, núm será arredondado à esquerda da vírgula decimal. Se omitir decimais, será considerado 2.</param>
        <summary>A função descrita neste tópico da Ajuda converte um número em formato de texto e aplica um símbolo de moeda. O nome da função (e o símbolo aplicado) depende das suas configurações de idioma.</summary>
        <returns>To be added.</returns>
        <remarks><para>A principal diferença entre a formatação de uma célula que contém um número com o comando Cells (menu Formatar) e a formatação de um número diretamente com a função <b>Dollar</b> é que <b>Dollar</b> converte seu resultado em texto. Um número formatado com o comando Células continua a ser um número. Você pode continuar a usar <b></b> números formatados com Dólar em fórmulas, porque Microsoft Excel converte números inseridos como valores de texto em números quando ele calcula.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moeda_fracionária - um número expresso na forma de fração.</param>
        <param name="Arg2">Fração - o inteiro a ser usado no denominador da fração.</param>
        <summary>Converte um preço em formato de moeda, na forma fracionária, em um preço na forma decimal. Use MOEDADEC para converter preços na forma fracionária, como preços de seguros, em decimais.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se fração não for um inteiro, será truncado.</para>
          <para>Se a fração for menor que 0, <b>DollarDe</b> retornará o #NUM! valor de erro. </para>
          <para>Se fração for 0, <b>DollarDe</b> retornará o #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moeda_decimal - um número em forma decimal.</param>
        <param name="Arg2">Fração - o inteiro a ser usado no denominador da fração.</param>
        <summary>Converte um preço, apresentado na forma decimal, em um preço apresentado na forma fracionária. Use MOEDAFRA para converter preços na forma decimal em frações, como preços de seguros.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se fração não for um inteiro, será truncado.</para>
          <para>Se a fração for menor que 0, <b>DollarFr</b> retornará o #NUM! valor de erro. </para>
          <para>Se fração for 0, <b>DollarFr</b> retornará a #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados é o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios são o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Multiplica os valores em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Estima o desvio padrão de uma população com base em uma amostra, usando os números em uma coluna de uma lista ou banco de dados que coincidirem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - é o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Calcula o desvio padrão de uma população com base na população total, usando os números em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Soma os números em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Cupom - a taxa anual de cupom do título.</param>
        <param name="Arg4">Lcr - o rendimento anual do título.</param>
        <param name="Arg5">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg6">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a duração de Macauley para um valor nominal assumido de R$ 100. A duração é definida como a média ponderada do valor presente do fluxo de caixa, e é usada para calcular a resposta do preço de um título a alterações no rendimento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, frequência e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>Duration</b> retornará a #VALUE! valor de erro. </para>
          <para>Se o cupom &lt; 0 ou se yld &lt; 0, <b>Duration</b> retornará o #NUM! valor de erro. </para>
          <para>Se a frequência for qualquer número diferente de 1, 2 ou 4, <b>Duration</b> retornará a #NUM! valor de erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>Duration</b> retornará a #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>Duration</b> retornará a #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Estima a variância de uma população com base em uma amostra, usando os números em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Banco_dados - o intervalo de células que constitui a lista ou o banco de dados. Um banco de dados é uma lista de dados relacionados na qual as linhas de informações relacionadas são os registros e as colunas de dados são os campos. A primeira linha da lista contém os rótulos de cada coluna.</param>
        <param name="Arg2">Campo - indica a coluna que será usada na função. O campo pode ser dado como texto com o rótulo da coluna entre aspas, como "Idade" ou "Rendimento", ou como um número (sem aspas) que represente a posição da coluna dentro da lista: 1 para a primeira coluna, 2 para a segunda coluna e assim por diante.</param>
        <param name="Arg3">Critérios - o intervalo de células que contém as condições especificadas. Você pode usar qualquer intervalo para o argumento de critérios, desde que ele inclua pelo menos um rótulo de coluna e pelo menos uma célula abaixo do rótulo de coluna para especificar uma condição para a coluna.</param>
        <summary>Calcula a variância de uma população com base na população total usando os números em uma coluna de uma lista ou de um banco de dados que coincidem com as condições especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Como o sinal de igual é usado para indicar uma fórmula quando você digita texto ou um valor em uma célula, Microsoft Excel avalia o que você digita; no entanto, isso pode causar resultados de filtro inesperados. Para indicar um operador de comparação de igualdade para um texto ou um valor, digite os critérios como uma expressão de cadeia de caracteres na célula apropriada no intervalo de critérios: </para>
          <para>=''=entry''</para>
          <para>Onde entrada é o texto ou o valor que você deseja encontrar. Por exemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Ao filtrar dados de texto, Excel não distingue entre caracteres maiúsculas e minúsculas. No entanto, é possível usar uma fórmula para executar uma pesquisa diferenciando maiúsculas e minúsculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_inicial - uma data que representa a data inicial. As datas devem ser inseridas com a função DATA, ou como resultado de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</param>
        <param name="Arg2">Meses - o número de meses antes ou depois de data_inicial. Um valor positivo para meses gera uma data futura; um valor negativo gera uma data passada.</param>
        <summary>Retorna um número de série de data que é o número de meses indicado antes ou depois de data_inicial. Use DATAM para calcular datas de liquidação ou datas de vencimento que caem no mesmo dia do mês da data de emissão.</summary>
        <returns>To be added.</returns>
        <remarks><para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Se start_date não for uma data válida, <b>EDate</b> retornará o #VALUE! valor de erro. </para>
          <para>Se meses não for um número inteiro, será truncado.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa_nominal - a taxa de juros nominal.</param>
        <param name="Arg2">Npera - o número de períodos compostos por ano.</param>
        <summary>Retorna a taxa de juros anual efetiva, dados a taxa de juros anual nominal e o número de períodos compostos por ano.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npera é truncado para que apareça como um número inteiro.</para>
          <para>Se um dos argumentos não for numerado, <b>Effect</b> retornará o #VALUE! valor de erro. </para>
          <para>Se nominal_rate ≤ 0 ou se npery &lt; 1, <b>Effect</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>O</b> efeito é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para calcular o método Effect</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto a ser codificado.</param>
        <summary>URL codifica o argumento.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_inicial - uma data que representa a data inicial. As datas devem ser inseridas com a função DATA, ou como resultado de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</param>
        <param name="Arg2">Meses - o número de meses antes ou depois de data_inicial. Um valor positivo para meses gera uma data futura; um valor negativo gera uma data passada.</param>
        <summary>Retorna o número de série para o último dia do mês, que é o número indicado de meses antes ou depois de data_inicial. Use FIMMÊS para calcular as datas de vencimento que caem no último dia do mês.</summary>
        <returns>To be added.</returns>
        <remarks><para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Se start_date não for uma data válida, <b>EoMonth</b> retornará o #NUM! valor de erro. </para>
          <para>Se start_date meses mais gerar uma data inválida, <b>EoMonth</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - o limite inferior para integrar <b>Erf</b>.</param>
        <param name="Arg2">Upper_limit - o limite superior para integrar <b>Erf</b>. Se omitido, Erf se integra entre zero e lower_limit.</param>
        <summary>Retorna a função de erro integrada entre limite_inferior e limite_superior.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> método.</para>
          <para>Se lower_limit for não numerado, <b>Erf</b> retornará o #VALUE! valor de erro. </para>
          <para>Se lower_limit for negativo, <b>Erf</b> retornará o #NUM! valor de erro. </para>
          <para>Se upper_limit for não numerado, <b>Erf</b> retornará o #VALUE! valor de erro. </para>
          <para>Se upper_limit for negativo, <b>Erf</b> retornará o #NUM! valor de erro. </para>
          <para>Figura 1: Equação para calcular o método Erf</para>
          <para> </para>
          <para> </para>
          <para>Figura 2: Equação para calcular o método Erf</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Limite_inferior - o limite inferior na integração de FUNERRO.</param>
        <summary>Retorna a função de erro integrada entre zero e o limite_inferior.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se limite_inferior não for numérico, <b>Erf_Precise</b> gerará um erro. Se limite_inferior for negativo, <b>Erf_Precise</b> gerará um erro.</para>
          <para>Figura 1: Equação para calcular Erf_Precise método</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O primeiro argumento.</param>
        <summary>Retorna a função integrada complementar FUNERRO entre o parâmetro especificado e o infinito.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> método.</para>
          <para>Se essa função não estiver disponível, e retornar o erro #NOME?, você precisará instalar e carregar o suplemento Ferramentas de Análise.</para>
          <para>Se o parâmetro não for numerado, <b>ErfC</b> retornará o #VALUE! valor de erro.</para>
          <para>Se o parâmetro for negativo, <b>ErfC</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor em relação ao qual calcular.</param>
        <summary>Retorna a função de erro complementar integrada entre o valor especificado e o infinito.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o valor especificado não for numérico, <b>ErfC_Precise</b> gerará um erro.</para>
          <para>Se o valor especificado for negativo, <b>ErfC_Precise</b> gerará um erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor a ser arredondado.</param>
        <summary>Retorna o núm arredondado para o inteiro par mais próximo. Esta função pode ser usada para processar itens que aparecem em pares. Por exemplo, um engradado aceita fileiras de um ou dois itens. O engradado está cheio quando o número de itens, arredondado para mais até o par mais próximo, preencher sua capacidade.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for númérico, <b>Even</b> retornará o #VALUE! valor de erro. </para>
          <para>Independentemente do sinal de núm, um valor será arredondado quando for diferente de zero. Se núm for um inteiro par, não haverá arredondamento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor da função.</param>
        <param name="Arg2">Lambda - o valor do parâmetro.</param>
        <param name="Arg3">Cumulativo - um valor lógico que indica a forma da função exponencial a ser fornecida. Se cumulativo for <b>verdadeiro,</b> <b>Expon_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição exponencial. Use EXPON_DIST para modelar o tempo entre eventos, como o tempo que um caixa de banco automatizado demora para entregar o dinheiro. Você pode, por exemplo, usar EXPON_DIST para determinar a probabilidade de que o processo leve no máximo 1 minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x ou lambda não fornumérico, <b>Expon_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>Expon_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se lambda ≤ 0, <b>Expon_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>A equação para a função de densidade de probabilidade é: 

 </para>
          <para>Figura 1: Equação para a função de densidade de probabilidade</para>
          <para> </para>
          <para> </para>
          <para>A equação para a função de distribuição cumulativa é: 

</para>
          <para>Figura 2: Equação para a função de distribuição cumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor da função.</param>
        <param name="Arg2">Lambda - o valor do parâmetro.</param>
        <param name="Arg3">Cumulativo - um valor lógico que indica a forma da função exponencial a ser fornecida. Se cumulativo for <b>verdadeiro,</b> <b>ExponDist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição exponencial. Use <b>o ExponDist</b> para modelar o tempo entre eventos, como quanto tempo um caixa automático leva para entregar dinheiro. Por exemplo, você pode usar <b>ExponDist</b> para determinar a probabilidade de que o processo leva no máximo 1 minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se x ou lambda não for numerado, <b>ExponDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>ExponDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se lambda ≤ 0, <b>ExponDist retornará</b> o #NUM! valor de erro. </para>
          <para>A equação para a função de densidade de probabilidade é: 

 </para>
          <para>Figura 1: Equação para a função de densidade de probabilidade</para>
          <para> </para>
          <para> </para>
          <para>A equação para a função de distribuição cumulativa é: 

</para>
          <para>Figura 2: Equação para a função de distribuição cumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Deg_freedom1 - Os graus de liberdade do numerador.</param>
        <param name="Arg3">Deg_freedom2 - Os graus de liberdade do denominador.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>F_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição de probabilidade F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>F_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x for negativo, <b>F_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se grau_liberdade1 ou grau_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se deg_freedom1 &lt; 1, <b>F_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se deg_freedom &lt; 1, <b>F_Dist</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Graus_liberdade1 - o grau de liberdade do numerador.</param>
        <param name="Arg3">Graus_liberdade2 - o grau de liberdade do denominador.</param>
        <summary>Retorna a distribuição de probabilidade F de cauda direita. Você pode usar esta função para determinar se dois conjuntos de dados têm graus de diversidade diferentes. Por exemplo, você pode examinar os resultados de testes de homens e mulheres que estão ingressando no ensino médio e determinar se a variabilidade nas mulheres é diferente da encontrada nos homens.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for <b></b> numerado, F_Dist_RT retornará o #VALUE! valor de erro. </para>
          <para>Se x for negativo, <b>F_Dist_RT</b> retornará o #NUM! valor de erro. </para>
          <para>Se graus_liberdade1 ou graus_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>F_Dist_RT</b> retornará o #NUM! valor de erro. </para>
          <para>Se degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>F_Dist_RT</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>F_Dist_RT</b> é calculado como F_DIST_RT=P( F x ), onde F é uma variável aleatória que tem uma distribuição F com degrees_freedom1 e &gt; degrees_freedom2 graus de liberdade.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - Uma probabilidade associada à distribuição cumulativa F.</param>
        <param name="Arg2">Deg_freedom1 - Os graus de liberdade do numerador.</param>
        <param name="Arg3">Deg_freedom2 - Os graus de liberdade do denominador.</param>
        <summary>Retorna o inverso da distribuição de probabilidade F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>F_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade 1, F_Inv &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se grau_liberdade1 ou grau_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se deg_freedom1 &lt; 1 ou deg_freedom2 &lt; 1, <b>F_Inv</b> retorna o #NUM! valor de erro. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - uma probabilidade associada à distribuição cumulativa F.</param>
        <param name="Arg2">Graus_liberdade1 - o grau de liberdade do numerador.</param>
        <param name="Arg3">Graus_liberdade2 - o grau de liberdade do denominador.</param>
        <summary>Retorna o inverso da distribuição de probabilidade F de cauda direita. Se p = F_DIST_RT(x,...), então F_INV_RT(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>A distribuição F pode ser usada em um teste F que compara o grau de variabilidade em dois conjuntos de dados. Por exemplo, você pode analisar as distribuições de renda nos Estados Unidos e no Canadá para determinar se os dois países têm um grau de diversidade de renda semelhante.</para>
          <para>Se algum argumento não for numerado, <b>F_Inv_RT</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade 1, F_Inv_RT &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se graus_liberdade1 ou graus_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>F_Inv_RT</b> retornará o #NUM! valor de erro. </para>
          <para>Se degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>F_Inv_RT</b> retornará o #NUM! valor de erro.</para>
          <para>
            <b>F_Inv_RT</b> pode ser usado para retornar valores críticos da distribuição F. Por exemplo, a saída de um cálculo ANOVA geralmente inclui dados para o valor crítico F, probabilidade F e F no nível de significância de 0,05. Para retornar o valor crítico de F, use o nível de significância como argumento de probabilidade para <b>F_Inv_RT</b>.</para>
          <para>Dado um valor para probabilidade, <b>F_Inv_RT</b> busca esse valor x de forma que F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = probabilidade. Assim, a precisão <b>de F_Inv_RT</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> . <b>F_Inv_RT</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido depois de 64 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1 - a primeira matriz ou intervalo de dados.</param>
        <param name="Arg2">Matriz2 - a segunda matriz ou intervalo de dados.</param>
        <summary>Retorna o resultado de um teste F. Um teste F retorna a probabilidade bicaudal de que as variâncias em matriz1 e matriz2 não são significativamente diferentes. Use esta função para determinar se duas amostras têm variâncias diferentes. Por exemplo, a partir dos resultados de testes fornecidos por escolas públicas e particulares, você pode verificar se essas escolas têm diferentes níveis de diversidade de resultados de testes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se o número de pontos de dados na matriz1 ou matriz2 for menor que 2, ou se a variação de matriz1 ou matriz2 for zero, <b>F_Test</b> retornará o #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número não-negativo do qual você deseja obter o fatorial. Se núm não for um inteiro, será truncado.</param>
        <summary>Retorna o fatorial de um número. O fatorial de um número é igual a 1 *2* 3 *...* número.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor para o qual você deseja retornar o fatorial duplo. Se núm não for um inteiro, será truncado.</param>
        <summary>Retorna o fatorial duplo de um número.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for númérico, <b>FactDouble</b> retornará o #VALUE! valor de erro. </para>
          <para>Se o número for negativo, <b>FactDouble</b> retornará o #NUM! valor de erro. </para>
          <para>Se núm for par: 

 </para>
          <para>Figura 1: Equação para par</para>
          <para> </para>
          <para> </para>
          <para>Se núm for ímpar: 

</para>
          <para>Figura 2: Equação para ímpar</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Graus_liberdade1 - o grau de liberdade do numerador.</param>
        <param name="Arg3">Graus_liberdade2 - o grau de liberdade do denominador.</param>
        <summary>Retorna a distribuição de probabilidade F. Você pode usar esta função para determinar se dois conjuntos de dados têm graus de diversidade diferentes. Por exemplo, é possível examinar os resultados dos testes de homens e mulheres que ingressam no 2º grau e determinar se a variabilidade entre as mulheres é diferente daquela encontrada entre os homens.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> métodos e.</para>
          <para>Se algum argumento não for numerado, <b>FDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x for negativo, <b>FDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se graus_liberdade1 ou graus_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>O FDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>o FDist</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>FDist</b> é calculado como FDIST=P( F x ), onde F é uma variável aleatória que tem uma distribuição F com degrees_freedom1 e &gt; degrees_freedom2 graus de liberdade.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadeia de caracteres xml válida.</param>
        <param name="Arg2">Cadeia de caracteres de consulta XPath.</param>
        <summary>Obter dados específicos do XML retornado, normalmente de uma chamada <b>de função WebService.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>O parâmetro XPath é limitado a 1024 caracteres.</para>
          <para>A <b>função FILTERXML</b> retorna resultados analisados por meio da localidade de dados especificada pelo usuário.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O nome da planilha.</param>
        <param name="Arg2">O nome do intervalo.</param>
        <param name="Arg3">O nome de um argumento para refinar a pesquisa.</param>
        <summary>Localiza informações específicas em uma planilha.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto_procurado - o texto que você deseja localizar.</param>
        <param name="Arg2">No_texto - o texto que contém o texto que você deseja localizar.</param>
        <param name="Arg3">Núm_inicial - especifica o caractere a partir do qual a pesquisa será iniciada. O primeiro caractere no_texto é o caractere número 1. Se for omitido,  núm_inicial será considerado como 1.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> e <b>FindB</b> localizam uma cadeia de caracteres de texto em uma segunda cadeia de caracteres de texto e retornam o número da posição inicial da primeira cadeia de caracteres de texto do primeiro caractere da segunda cadeia de caracteres de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: destina-se a ser usado com idiomas que usam o conjunto de caracteres de byte único <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> (SBCS), enquanto <b>FindB</b> destina-se a ser usado com idiomas que usam o conjunto de caracteres de byte duplo (DBCS). A configuração de idioma padrão no computador afeta o valor de retorno da seguinte forma:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> sempre conta cada caractere, seja de byte único ou de byte duplo, como 1, independentemente da configuração de idioma padrão.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> conta cada caractere de byte duplo como 2 quando você habilitar a edição de um idioma que dá suporte a DBCS e defini-lo como o idioma padrão. Caso contrário, <b>FindB</b> conta cada caractere como 1.</description>
            </item>
          </list>
          <para>Os idiomas com suporte para DBCS são: japonês, chinês (simplificado), chinês (tradicional) e coreano.</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> e <b>FindB</b> são sensíveis a minúsculas e não permitem caracteres curinga. Se você não quiser fazer uma pesquisa sensível a caso ou usar caracteres curinga, poderá usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> e <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> . </para>
          <para>Se find_text for "" (texto vazio), corresponde ao primeiro caractere na cadeia de caracteres de pesquisa (ou seja, o caractere numerado <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> start_num ou 1). </para>
          <para>Texto_procurado não pode conter nenhum caractere curinga.</para>
          <para>Se find_text não aparecer no within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> e <b>FindB</b> retornar o #VALUE! valor de erro. </para>
          <para>Se start_num for maior que zero, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>e FindB</b> retornar o #VALUE! valor de erro. </para>
          <para>Se start_num for maior do que o comprimento da within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>e FindB</b> retornar o #VALUE! valor de erro. </para>
          <para>Use núm_inicial para ignorar um número de caracteres especificado. Usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> como exemplo, suponha que você está trabalhando com a cadeia de caracteres de texto "AYF0093. YoungMensApparel". Para localizar o número do primeiro "R" na parte descritiva da sequência de caracteres de texto, defina núm_inicial como 8 para que a parte do texto relativa ao número de série não seja localizada. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> começa com o caractere 8, localiza find_text no próximo caractere e retorna o número 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> sempre retorna o número de caracteres do início da within_text, contando os caracteres que você ignora se start_num for maior que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - uma probabilidade associada à distribuição cumulativa F.</param>
        <param name="Arg2">Graus_liberdade1 - o grau de liberdade do numerador.</param>
        <param name="Arg3">Graus_liberdade2 - o grau de liberdade do denominador.</param>
        <summary>Retorna o inverso da distribuição de probabilidades F. Se p = DISTF(x,...), então INVF(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> métodos e.</para>
          <para>A distribuição F pode ser usada em um teste F que compara o grau de variabilidade em dois conjuntos de dados. Por exemplo, você pode analisar as distribuições de renda nos Estados Unidos e no Canadá para determinar se os dois países têm um grau de diversidade de renda semelhante.</para>
          <para>Se algum argumento não for numerado, <b>FInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade &gt; 1, <b>FInv</b> retornará o #NUM! valor de erro. </para>
          <para>Se graus_liberdade1 ou graus_liberdade2 não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>FInv</b> retornará o #NUM! valor de erro. </para>
          <para>Se degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>FInv</b> retornará o #NUM! valor de erro.</para>
          <para>
            <b>FInv</b> pode ser usado para retornar valores críticos da distribuição F. Por exemplo, a saída de um cálculo ANOVA geralmente inclui dados para o valor crítico F, probabilidade F e F no nível de significância de 0,05. Para retornar o valor crítico de F, use o nível de significância como argumento de probabilidade para <b>FInv</b>.</para>
          <para>Dado um valor para probabilidade, <b>FInv</b> procura esse valor x de forma que FDIST(x, degrees_freedom1, degrees_freedom2) = probabilidade. Assim, a precisão <b>do FInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> . <b>O FInv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido depois de 64 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - um valor numérico para o qual se deseja a transformação.</param>
        <summary>Retorna a transformação Fisher em x. Essa transformação produz uma função que é normalmente distribuída em vez de distorcida. Use esta função para executar testes de hipóteses no coeficiente de correlação.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numerado, <b>Fisher</b> retornará a #VALUE! valor de erro. </para>
          <para>Se x ≤ -1 ou se x ≥ 1, <b>Fisher</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a transformação Fisher é:</para>
          <para>Figura 1: Equação para a transformação fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y - o valor para o qual se deseja efetuar o inverso da transformação.</param>
        <summary>Retorna o inverso da transformação Fisher. Use esta transformação ao analisar correlações entre intervalos ou matrizes de dados. Se y = FISHER(x), então FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se y não for numerado, <b>FisherInv</b> retornará o #VALUE! valor de erro. </para>
          <para>A equação para o inverso da transformação Fisher é:</para>
          <para>Figura 1: Equação para a transformação inversa de Fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número que você deseja arredondar e converter em texto.</param>
        <param name="Arg2">Decimais - o número de dígitos à direita da vírgula decimal.</param>
        <param name="Arg3">No_commas - um valor lógico que, se <b>verdadeiro,</b>impede <b>Fixed</b> de incluir vírgulas no texto retornado.</param>
        <summary>Arredonda o número para o número especificado de decimais, formata o número no formato decimal usando vírgula e pontos e retorna o resultado como texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os números no Microsoft Excel não podem ter mais de 15 dígitos significativos, mas os decimais podem chegar a 127.</para>
          <para>Se decimais for negativo, núm será arredondado à esquerda da vírgula decimal.</para>
          <para>Se omitir decimais, será considerado 2.</para>
          <para>Se no_commas for <b>falso</b> ou omitido, o texto retornado incluirá vírgulas como de costume. </para>
          <para>A principal diferença entre a formatação de uma célula que contém um número com o comando Cells (menu Formatar) e a formatação de um número diretamente com a função FIXED é que <b>Fixed</b> converte seu resultado em texto. Um número formatado com o comando Células continua a ser um número.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor numérico que você deseja arredondar.</param>
        <param name="Arg2">Significância - o múltiplo para o qual você deseja arredondar.</param>
        <summary>Arredonda um número para baixo, aproximando-o de zero, até o múltiplo mais próximo de significância.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> método.</para>
          <para>Se um dos argumentos não for numerado, <b>Floor</b> retornará o #VALUE! valor de erro. </para>
          <para>Se número e significância têm sinais diferentes, <b>Floor</b> retorna a #NUM! valor de erro. </para>
          <para>Independentemente do sinal de núm, um valor será arredondado para baixo quando for diferente de zero. Se núm for um múltiplo exato de significância, não haverá arredondamento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor que você deseja arredondar.</param>
        <param name="Arg2">O múltiplo ao qual você deseja arredondar.</param>
        <param name="Arg3">Quando um número não zero é dado, essa função se volta para zero.</param>
        <summary>Arredoda um número para baixo, para o inteiro mais próximo ou para o múltiplo mais próximo de significância.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor numérico que você deseja arredondar.</param>
        <param name="Arg2">Significância - o múltiplo para o qual você deseja arredondar.</param>
        <summary>Arredonda o número especificado para o múltiplo de significância mais próxima.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dependendo do sinal dos argumentos de número e significância, o método <b>Floor_Precise</b> arredonda para longe de zero ou em direção a zero.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Arredonda para longe de zero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Arredonda em direção a zero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Arredonda para longe de zero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Arredonda em direção a zero.</description>
            </item>
          </list>
          <para>Se um dos argumentos não for numerado, o método <b>Floor_Precise</b> gerará um erro. </para>
          <para>Caso núm seja um múltiplo exato de significância, não haverá arredondamento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o ponto de dados cujo valor você deseja prever.</param>
        <param name="Arg2">Val_conhecidos_y - o intervalo de dados ou matriz independente.</param>
        <param name="Arg3">Val_conhecidos_x - o intervalo de dados ou matriz independente.</param>
        <summary>Calcula, ou prevê, um valor futuro usando valores existentes. O valor previsto é um valor de y para um determinado valor de x. Os valores conhecidos são valores de x e de y existentes, e o novo valor é previsto através da regressão linear. Você pode usar esta função para fazer previsões de vendas futuras, inventariar os recursos necessários ou analisar tendências de consumo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numerado, <b>Forecast</b> retornará a #VALUE! valor de erro. </para>
          <para>Se known_y e known_x estão vazios ou contêm um número diferente de pontos de dados, <b>Forecast</b> retornará o valor de erro #N/A. </para>
          <para>Se a variação de known_x for igual a zero, <b>Forecast</b> retornará a #DIV/0! valor de erro. </para>
          <para>A equação para <b>Forecast</b> é a+bx, onde: </para>
          <para>Figura 1: Equação do método Forecast</para>
          <para> </para>
          <para> </para>
          <para>E:</para>
          <para>Figura 2: Equação do método Forecast</para>
          <para> </para>
          <para> </para>
          <para>e onde x e y são o exemplo significa AVERAGE(known_x's) e AVERAGE(known y's).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz_dados - uma matriz ou uma referência a um conjunto de valores cujas frequências você deseja contar. Se data_array não contiver valores, <b>Frequency</b> retornará uma matriz de zeros.</param>
        <param name="Arg2">Matriz_bin - uma matriz ou referência a intervalos nos quais você deseja agrupar os valores contidos em matriz_dados. Se bins_array não contiver valores, <b>Frequency</b> retornará o número de elementos em data_array.</param>
        <summary>Calcula a frequência com que valores ocorrem em um intervalo de valores e, em seguida, retorna uma matriz vertical de números. Por exemplo, use <b>Frequency para</b> contar o número de pontuações de teste que se enquadram em intervalos de pontuações. Como <b>Frequency</b> retorna uma matriz, ela deve ser inserida como uma fórmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>A</b> frequência é inserida como uma fórmula de matriz depois que você seleciona um intervalo de células adjacentes nas quais você deseja que a distribuição retornada apareça. </para>
          <para>O número de elementos da matriz retornada é um a mais do que o número de elementos de matriz_bin. O elemento adicional na matriz retornada apresenta a quantidade de valores que está acima do intervalo mais alto. Por exemplo, ao contar três intervalos de valores (intervalos) que são inseridos em três células, certifique-se de inserir <b>Frequência</b> em quatro células para os resultados. A célula adicional retornará o número de valores de matriz_dados que forem maiores do que o valor do terceiro intervalo. </para>
          <para>
            <b>A</b> frequência ignora células em branco e texto. </para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1 - a primeira matriz ou intervalo de dados.</param>
        <param name="Arg2">Matriz2 - a segunda matriz ou intervalo de dados.</param>
        <summary>Retorna o resultado de um teste F. Um teste F retorna a probabilidade bicaudal de que as variâncias em matriz1 e matriz2 não são significativamente diferentes. Use esta função para determinar se duas amostras têm variâncias diferentes. Por exemplo, a partir dos resultados de testes fornecidos por escolas públicas e particulares, você pode verificar se essas escolas têm diferentes níveis de diversidade de resultados de testes.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> método.</para>
          <para>Os argumentos devem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se o número de pontos de dados na matriz1 ou matriz2 for menor que 2, ou se a variação de matriz1 ou matriz2 for zero, <b>FTest</b> retornará o #DIV/0! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros por período.</param>
        <param name="Arg2">Nper - o número total de períodos de pagamento em uma anuidade.</param>
        <param name="Arg3">Pgto - o pagamento feito a cada período; não pode mudar durante a vigência da anuidade. Geralmente, pgto contém o capital e os juros e nenhuma outra tarifa ou taxas. Se pgto for omitido, você deverá incluir o argumento vp.</param>
        <param name="Arg4">Vp - o valor presente ou a soma total correspondente ao valor presente de uma série de pagamentos futuros. Se vp for omitido, será considerado 0 (zero) e a inclusão do argumento pgto será obrigatória.</param>
        <param name="Arg5">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos. Se tipo for omitido, será considerado 0.</param>
        <summary>Retorna o valor futuro de um investimento de acordo com os pagamentos periódicos e constantes e com uma taxa de juros constante.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obter uma descrição mais completa dos argumentos no <b>Fv</b> e para obter mais informações sobre funções de anuidade, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se fizer pagamentos mensais de um empréstimo de quatro anos com taxa de juros de 12% ao ano, use 12%/12 para taxa e 4*12 para nper. Se você fizer pagamentos anuais para o mesmo empréstimo, use 12% para taxa e 4 para nper.</para>
          <para>Todos os argumentos, saques, tais como depósitos em poupança, serão representados por números negativos; depósitos recebidos, tais como cheques de dividendos, serão representados por números positivos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Capital - o valor presente.</param>
        <param name="Arg2">Plano - uma matriz de taxas de juros a ser aplicada.</param>
        <summary>Retorna o valor futuro de um capital inicial após a aplicação de uma série de taxas de juros compostos. Use VFPLANO para calcular o valor futuro de um investimento com uma taxa variável ou ajustável.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os valores em plano podem ser números ou células em branco; qualquer outro valor produzirá o valor de erro #VALOR! valor de erro <b>para FVSchedule</b>. As células em branco representam zeros (sem juros).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor para o qual você deseja calcular Gamma.</param>
        <summary>Retorna o valor da função Gamma.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se deseja avaliar a distribuição.</param>
        <param name="Arg2">Alfa - um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - um parâmetro da distribuição. Se beta = 1, <b>Gamma_Dist</b> retornará a distribuição gama padrão.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>Gamma_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição gama. Você pode usar esta função para estudar variáveis que possam apresentar uma distribuição enviesada. A distribuição gama é comumente utilizada em análise de filas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x, alfa ou beta não for numerado, <b>Gamma_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>Gamma_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>Gamma_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de densidade de probabilidade gama é: </para>
          <para>Figura 1: Função de densidade de probabilidade gama</para>
          <para> </para>
          <para> </para>
          <para>A função de densidade de probabilidade gama padrão é:</para>
          <para>Figura 2: Função de densidade de probabilidade gama padrão</para>
          <para> </para>
          <para> </para>
          <para>Quando alfa = 1, <b>Gamma_Dist</b> retorna a distribuição exponencial com:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para>Para um inteiro positivo n, quando alfa = n/2, beta = 2 e cumulativo = <b>true</b>, <b>Gamma_Dist</b> retorna (1 - CHIDIST(x)) com n graus de liberdade. </para>
          <para>Quando alfa é um inteiro positivo, <b>Gamma_Dist</b> também é conhecido como a distribuição Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade associada à distribuição gama.</param>
        <param name="Arg2">Alfa - um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - um parâmetro da distribuição. Se beta = 1, <b>Gamma_Inv</b> retornará a distribuição gama padrão.</param>
        <summary>Retorna o inverso da distribuição cumulativa gama. Se p = GAMMA_DIST(x,...), então GAMMA_INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Você pode usar esta função para estudar uma variável cuja distribuição pode ser enviesada.</para>
          <para>Se algum argumento for texto, <b>Gamma_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade 1, Gamma_Inv &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>Gamma_Inv</b> retornará o #NUM! valor de erro.</para>
          <para>Dado um valor para <b>probabilidade,</b> Gamma_Inv busca esse valor x de modo que GAMMA_DIST(x, alfa, beta, TRUE) = probabilidade. Assim, a precisão <b>de Gamma_Inv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>Gamma_Inv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido após 100 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se deseja avaliar a distribuição.</param>
        <param name="Arg2">Alfa - um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - um parâmetro da distribuição. Se beta = 1, <b>GammaDist</b> retornará a distribuição gama padrão.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>GammaDist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição gama. Você pode usar esta função para estudar variáveis que possam apresentar uma distribuição enviesada. A distribuição gama é comumente utilizada em análise de filas.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se x, alfa ou beta não fornumérico, <b>GammaDist</b> retornará a #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>GammaDist</b> retornará a #NUM! valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>GammaDist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de densidade de probabilidade gama é: </para>
          <para>Figura 1: Função de densidade de probabilidade gama</para>
          <para> </para>
          <para> </para>
          <para>A função de densidade de probabilidade gama padrão é:</para>
          <para>Figura 2: Função de densidade de probabilidade gama padrão</para>
          <para> </para>
          <para> </para>
          <para>Quando alfa = 1, <b>GammaDist</b> retorna a distribuição exponencial com:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para>Para um inteiro positivo n, quando alfa = n/2, beta = 2 e cumulativo = <b>true,</b> <b>GammaDist</b> retorna (1 - CHIDIST(x)) com n graus de liberdade. </para>
          <para>Quando alfa é um inteiro positivo, <b>GammaDist</b> também é conhecido como a distribuição Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade associada à distribuição gama.</param>
        <param name="Arg2">Alfa - um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - um parâmetro da distribuição. Se beta = 1, <b>GammaInv</b> retornará a distribuição gama padrão.</param>
        <summary>Retorna o inverso da distribuição cumulativa gama. Se p = DISTGAMA(x;...), então INVGAMA(p;...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> método.</para>
          <para>Você pode usar esta função para estudar uma variável cuja distribuição pode ser enviesada.</para>
          <para>Se algum argumento for texto, <b>GammaInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou probabilidade &gt; 1, <b>GammaInv</b> retornará o #NUM! valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>GammaInv</b> retornará o #NUM! valor de erro.</para>
          <para>Dado um valor para probabilidade, <b>GammaInv</b> procura esse valor x de forma que GAMMADIST(x, alfa, beta, TRUE) = probabilidade. Assim, a precisão <b>de GammaInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>GammaInv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido depois de 64 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor para o qual você deseja calcular LNGAMA.</param>
        <summary>Retorna o logaritmo natural da função gama, G(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> método.</para>
          <para>Se x não fornumérico, <b>GammaLn</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x ≤ 0, <b>GammaLn</b> retornará o #NUM! valor de erro. </para>
          <para>O número e elevado à potência de (i)LNGAMA, onde i é um número inteiro, retornará o mesmo resultado de (i - 1)!.</para>
          <para>
            <b>GammaLn</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para o método GammaLn</para>
          <para> </para>
          <para> </para>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor para o qual você deseja calcular LNGAMA.</param>
        <summary>Retorna o logaritmo natural da função gama, G(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for numérico, o método <b>GammaLn_Precise</b> gerará um erro.</para>
          <para>Se x ≤ 0, o método <b>GammaLn_Precise</b> gerará um erro.</para>
          <para>O número e elevado à potência de (i)LNGAMA, onde i é um número inteiro, retornará o mesmo resultado de (i - 1)!.</para>
          <para>GAMMALN é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para o GammaLn_Precise método</para>
          <para> </para>
          <para> </para>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">O valor para o qual você deseja a distribuição.</param>
        <summary>Retorna 0,5 a menos do que a distribuição cumulativa normal padrão.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1; núm2;... - valores de 1 a 29. Se o valor não for um inteiro, será truncado.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o máximo divisor comum de dois ou mais inteiros. O máximo divisor comum é o maior inteiro que divide núm1 e núm2 sem resto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>Gcd</b> retornará o #VALUE! valor de erro. </para>
          <para>Se qualquer argumento for menor que zero, <b>Gcd</b> retornará o #NUM! valor de erro. </para>
          <para>Um divide qualquer valor igualmente.</para>
          <para>Um número primo possui a si mesmo e a unidade como divisores exatos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 argumentos para os quais você deseja calcular a média. Você também pode usar uma única matriz ou referência a uma matriz em vez de argumentos separados por ponto-e-vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a média geométrica de uma matriz ou de um intervalo de dados positivos. Por exemplo, você pode usar MÉDIA.GEOMÉTRICA para calcular o crescimento médio considerando-se juros compostos com taxas variáveis.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se algum ponto de dados ≤ 0, <b>GeoMean</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a média geométrica é: 

 </para>
          <para>Figura 1: Equação para a média geométrica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor a ser testado em relação a passo.</param>
        <param name="Arg2">Passo - o valor-limite. Se você omitir um valor para a etapa, <b>GeStep</b> usará zero.</param>
        <summary>Retorna 1 se núm ≥ passo; caso contrário, retornará 0. Use esta função para filtrar um conjunto de valores. Por exemplo, somando várias <b>funções GeStep,</b> você calcula a contagem de valores que excedem um limite.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>GeStep</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - o conjunto de valores y que você já conhece na relação y = b*m^x.</param>
        <param name="Arg2">Val_conhecidos_x - um conjunto opcional de valores x que você talvez já conheça na relação y = b*m^x.</param>
        <param name="Arg3">New_x - novos valores x para os quais você deseja que <b>Growth</b> retorne valores y correspondentes.</param>
        <param name="Arg4">Constante - um valor lógico que força ou não a constante b a se igualar a 1.</param>
        <summary>Calcula o crescimento exponencial previsto usando dados existentes. <b>O</b> crescimento retorna os valores y de uma série de novos valores x que você especificar usando valores x e y existentes. Você também pode usar a <b>função De</b> planilha crescimento para ajustar uma curva exponencial aos valores x e y existentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz val_conhecidos_y estiver em uma única coluna, cada coluna de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única linha, cada linha de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>Se algum dos números no known_y for 0 ou negativo, <b>Growth</b> retornará a #NUM! valor de erro. </para>
          <para>
				A matriz val_conhecidos_x pode incluir um ou mais conjuntos de variáveis. Se apenas uma variável for usada, val_conhecidos_y e val_conhecidos_x podem ser intervalos de qualquer formato, desde que tenham dimensões iguais. Se mais de uma variável for usada, val_conhecidos_y deverá ser um vetor (ou seja, um intervalo com altura de uma linha ou largura de uma coluna).
</para>
          <para>Se val_conhecidos_x for omitido, pressupõe-se que a matriz {1,2,3,...} seja do mesmo tamanho que val_conhecidos_y.</para>
          <para>
				Novos_valores_x deve incluir uma coluna (ou linha) para cada variável independente, da mesma forma que val_conhecidos_x. Portanto, se val_conhecidos_y estiver em uma única coluna, val_conhecidos_x e novos_valores_x devem ter o mesmo número de colunas. Se val_conhecidos_y estiver em uma única linha, val_conhecidos_x e novos_valores_x devem ter o mesmo número de linhas.
</para>
          <para>Se novos_valores_x for omitido, será considerado como equivalente a val_conhecidos_x.</para>
          <para>Se val_conhecidos_x e novos_valores_x forem omitidos, serão considerados como equivalentes à matriz {1,2,3,...} que é do mesmo tamanho de val_conhecidos_y.</para>
          <para>Se const for <b>verdadeiro</b> ou omitido, b será calculado normalmente. </para>
          <para>Se const for <b>false,</b>b será definido como 1 e os valores m serão ajustados para que y = m^x. </para>
          <para>As fórmulas que retornam matrizes devem ser inseridas como fórmulas de matriz após a seleção do número de células.</para>
          <para>Ao inserir uma constante de matriz para um argumento, como val_conhecidos_x, use vírgulas na mesma linha e pontos-e-vírgulas para separar linhas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 argumentos para os quais você deseja calcular a média. Você também pode usar uma única matriz ou referência a uma matriz em vez de argumentos separados por ponto-e-vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a média harmônica de um conjunto de dados. A média harmônica é a recíproca da média aritmética das recíprocas.</summary>
        <returns>To be added.</returns>
        <remarks><para>A média harmônica sempre será menor que a média geométrica, que sempre será menor que a média aritmética.</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se algum ponto de dados ≤ 0, <b>HarMean</b> retornará o #NUM! valor de erro. A equação para a média harmônica é: 

 </para>
          <para>Figura 1: Equação para a média harmônica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número hexadecimal que você deseja converter. Núm não pode conter mais de 10 caracteres. O bit mais significativo de núm é o bit de sinal (40º bit a partir da direita). Os 9 bits restantes são bits de magnitude. Os números negativos são representados com uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Hex2Bin</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número hexadecimal em binário.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número for negativo, <b>Hex2Bin</b> ignorará os locais e retornará um número binário de 10 caracteres. </para>
          <para>Se núm for negativo, não poderá ser menor do que FFFFFFFE00, e se núm for positivo, não poderá ser maior do que 1FF.</para>
          <para>Se o número não for um número hexadecimal válido, <b>Hex2Bin</b> retornará o #NUM! valor de erro. </para>
          <para>Se <b>Hex2Bin</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. Se casas não for um inteiro, será truncado. </para>
          <para>Se os locais não for numerados, <b>Hex2Bin</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais são negativos, <b>Hex2Bin</b> retorna o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número hexadecimal que você deseja converter. Núm não pode conter mais de 10 caracteres (40 bits). O bit mais significativo de núm é o bit de sinal. Os 39 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <summary>Converte um número hexadecimal em decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for um número hexadecimal válido, <b>Hex2Dec</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número hexadecimal que você deseja converter. Núm não pode conter mais de 10 caracteres. O bit mais significativo de núm é o bit de sinal. Os 39 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Hex2Oct</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número hexadecimal em octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número for negativo, <b>Hex2Oct</b> ignorará os locais e retornará um número octal de 10 caracteres. </para>
          <para>Se núm for negativo, não poderá ser menor do que FFE0000000, e se núm for positivo, não pode ser maior do que 1FFFFFFF.</para>
          <para>Se o número não for um número hexadecimal válido, <b>Hex2Oct</b> retornará o #NUM! valor de erro. </para>
          <para>Se <b>Hex2Oct</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Hex2Oct</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais são negativos, <b>Hex2Oct</b> retorna o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor_procurado - o valor a ser localizado na primeira linha da tabela. Valor_procurado pode ser um valor, uma referência ou uma sequência de caracteres de texto.</param>
        <param name="Arg2">Matriz_tabela - uma tabela de informações onde os dados devem ser procurados. Use uma referência para um intervalo ou um nome de intervalo.</param>
        <param name="Arg3">Row_index_num - o número da linha em table_array do qual o valor correspondente será retornado. Um row_index_num de 1 retorna o valor da primeira linha em table_array, um row_index_num de 2 retorna o segundo valor de linha em table_array e assim por diante. Se row_index_num for menor que 1, <b>HLookup</b> retornará o #VALUE! valor de erro; se row_index_num for maior do que o número de linhas no table_array, <b>HLookup</b> retornará o #REF! valor de erro.</param>
        <param name="Arg4">Range_lookup - um valor lógico que especifica se você deseja que <b>o HLookup</b> encontre uma combinação exata ou uma combinação aproximada. Se <b>for verdadeiro</b> ou omitido, uma combinação aproximada será retornada. Em outras palavras, se uma correspondência exata não for localizada, o valor maior mais próximo que seja menor que o valor_procurado é retornado. Se <b>for falso,</b> <b>HLookup</b> encontrará uma combinação exata. Se nenhuma correspondência for localizada, o valor de erro #N/D será retornado.</param>
        <summary>Localiza um valor específico na linha superior de uma tabela ou matriz de valores e retorna um valor na mesma coluna de uma linha especificada na tabela ou matriz. Use HLookup quando seus valores de comparação estão localizados em uma linha na parte superior de uma tabela de dados e você deseja procurar um número especificado de linhas. Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> quando seus valores de comparação estão localizados em uma coluna à esquerda dos dados que você deseja encontrar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <b>o HLookup</b> não conseguir encontrar lookup_value, e range_lookup for <b>verdadeiro,</b>ele usará o maior valor que for menor que lookup_value. </para>
          <para>Se lookup_value menor que o menor valor na primeira linha de table_array, <b>HLookup</b> retornará o valor de erro #N/A. </para>
          <para>Se procurar_intervalo for FALSO e valor_procurado for texto, você pode usar os caracteres curinga ponto de interrogação (?) e asterisco (*) em valor_procurado. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se quiser localizar um ponto de interrogação ou asterisco real, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Exemplo_s - o número de sucessos em uma amostra.</param>
        <param name="Arg2">Exemplo_núm - o tamanho da amostra.</param>
        <param name="Arg3">População_s - o número de sucessos na população.</param>
        <param name="Arg4">Núm_população - o tamanho da população.</param>
        <param name="Arg5">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>HypGeom_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de massa de probabilidade.</param>
        <summary>Retorna a distribuição hipergeométrica. <b>HypGeom_Dist</b> retorna a probabilidade de um determinado número de sucessos de amostra, considerando o tamanho da amostra, os sucessos da população e o tamanho da população. Use <b>HypGeom_Dist</b> problemas com uma população finita, onde cada observação é um sucesso ou uma falha e onde cada subconjunto de um determinado tamanho é escolhido com igual probabilidade.</summary>
        <returns>To be added.</returns>
        <remarks><para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se algum argumento não for numerado, <b>HypGeom_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se sample_s 0 ou sample_s for maior do que o menor de number_sample ou &lt; population_s, <b>HypGeom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se sample_s for menor que o maior de 0 ou (number_sample - number_population + population_s), <b>HypGeom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_sample ≤ 0 ou number_sample &gt; number_population, <b>HypGeom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se population_s ≤ 0 ou population_s &gt; number_population, <b>HypGeom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_population ≤ 0, <b>HypGeom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a distribuição hipergeométrica é: </para>
          <para>Figura 1: Equação para a distribuição hipergeométrica</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> é usado na amostragem sem substituição de uma população finita.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Exemplo_s - o número de sucessos em uma amostra.</param>
        <param name="Arg2">Exemplo_núm - o tamanho da amostra.</param>
        <param name="Arg3">População_s - o número de sucessos na população.</param>
        <param name="Arg4">Núm_população - o tamanho da população.</param>
        <summary>Retorna a distribuição hipergeométrica. <b>HypGeomDist</b> retorna a probabilidade de um determinado número de sucessos de amostra, considerando o tamanho da amostra, os sucessos da população e o tamanho da população. Use <b>HypGeomDist</b> para problemas com uma população finita, onde cada observação é um sucesso ou uma falha e onde cada subconjunto de um determinado tamanho é escolhido com igual probabilidade.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se algum argumento não for numerado, <b>HypGeomDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se sample_s 0 ou sample_s for maior do que o menor number_sample &lt; ou population_s, <b>HypGeomDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se sample_s for menor que o maior de 0 ou (number_sample - number_population + population_s), <b>HypGeomDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_sample ≤ 0 ou number_sample &gt; number_population, HYPGEOMDIST retornará o #NUM! valor de erro. </para>
          <para>Se population_s ≤ 0 ou population_s &gt; number_population, <b>HypGeomDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_population ≤ 0, <b>HypGeomDist retornará</b> o #NUM! valor de erro. </para>
          <para>A equação para a distribuição hipergeométrica é: </para>
          <para>Figura 1: Equação para a distribuição hipergeométrica</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> é usado na amostragem sem substituição de uma população finita.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o argumento em que é verificado um erro.</param>
        <param name="Arg2">Valor_se_erro - o valor a ser retornado se a fórmula resultar em um erro. Os seguintes tipos de erros são avaliados: #N/D, #VALOR!, #REF!, #DIV/0!, #NÚM!, #NOME? ou #NULO!.</param>
        <summary>Retorna um valor especificado se a fórmula resulta em um erro; caso contrário, retorna o resultado da fórmula. Use a <b>função IfError</b> para interceptar e manipular erros em uma fórmula.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se value ou value_if_error for uma célula vazia, <b>IfError</b> a tratará como um valor de cadeia de caracteres vazio (""). </para>
          <para>Se value for uma fórmula de matriz, <b>IfError</b> retornará uma matriz de resultados para cada célula no intervalo especificado no valor. Veja o segundo exemplo a seguir.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">value: Qualquer valor ou expressão ou referência.</param>
        <param name="Arg2">value_if_na: qualquer valor ou expressão ou referência.</param>
        <summary>Retorna o valor que você especificar se a expressão resolver #N/A, caso contrário, retornará o resultado da expressão.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual você deseja obter o valor absoluto.</param>
        <summary>Retorna o valor absoluto (módulo) de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O valor absoluto de um número complexo é: </para>
          <para>Figura 1: Equação para o valor absoluto de um número complexo</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter um coeficiente imaginário.</param>
        <summary>Retorna o coeficiente imaginário de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber é um número complexo para o qual você deseja que o argumento theta.</param>
        <summary>Retorna o argumento (theta), um ângulo expresso em radianos, de forma que:</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>
            <b>ImArgument</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação do método ImArgument</para>
          <para> </para>
          <para> </para>
          <para>Onde:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>e</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja encontrar o conjugado.</param>
        <summary>Retorna o conjugado complexo de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O conjugado de um número complexo é: </para>
          <para>Figura 1: Equação para conjugar um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o cosseno.</param>
        <summary>Retorna o cosseno de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>Se inumber for um valor lógico, <b>ImCos</b> retornará o #VALUE! valor de erro. </para>
          <para>O cosseno de um número complexo é: 

 </para>
          <para>Figura 1: Cosseno de um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o cosseno hiperbólico.</param>
        <summary>Retorna o cosseno hiperbólico de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o cotangent.</param>
        <summary>Retorna o cotangente de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o cosecant.</param>
        <summary>Retorna o cosecant de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o cosecant hiperbólico.</param>
        <summary>Retorna o cosecant hiperbólico de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm1 - o numerador ou dividendo complexo.</param>
        <param name="Arg2">Inúm2 - o denominador ou divisor complexo.</param>
        <summary>Retorna o quociente de dois números complexos no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O quociente de dois números complexos é: 

 </para>
          <para>Figura 1: Quociente de dois números complexos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o exponencial.</param>
        <summary>Retorna o exponencial de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O exponencial de um número complexo é: 

 </para>
          <para>Figura 1: Exponencial de um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o logaritmo natural.</param>
        <summary>Retorna o logaritmo natural de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O logaritmo natural de um número complexo é: </para>
          <para>Figura 1: logaritmo natural de um número complexo</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o logaritmo comum.</param>
        <summary>Retorna o logaritmo comum (base 10) de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O logaritmo comum de um número complexo pode ser calculado a partir do logaritmo natural da seguinte forma: 

 </para>
          <para>Figura 1: Equação para logaritmo comum de um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o logaritmo de base 2.</param>
        <summary>Retorna o logaritmo de base 2 de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O logaritmo de base 2 de um número complexo pode ser calculado a partir do logaritmo natural da seguinte forma: 

 </para>
          <para>Figura 1: Equação para logaritmo base-2 de um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo que se deseja elevar a uma potência.</param>
        <param name="Arg2">Núm - a potência a que se deseja elevar o número complexo.</param>
        <summary>Retorna o número complexo no formato de texto x + yi ou x + yj, elevado a uma potência.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>Se o número não for númérico, <b>O ImPower</b> retornará o #VALUE! valor de erro. </para>
          <para>Núm pode ser um número inteiro, fracionário ou negativo.</para>
          <para>Um número complexo gerado para uma potência é calculado da seguinte forma: </para>
          <para>Figura 1: Número complexo da equação gerado para uma potência</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>e:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para>e:</para>
          <para>Figura 4: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm1, inúm 2,... - de 1 a 29 números complexos a serem multiplicados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o produto de 2 a 29 números complexos no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O produto de dois números complexos é:</para>
          <para>Figura 1: Produto de dois números complexos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o coeficiente real.</param>
        <summary>Retorna o coeficiente real de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o cosecant hiperbólico.</param>
        <summary>Retorna o cosecant hiperbólico de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o secant hiperbólico.</param>
        <summary>Retorna o secant de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter o seno.</param>
        <summary>Retorna o seno de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>O seno de um número complexo: 

 </para>
          <para>Figura 1: seno de um número complexo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja o seno hiperbólico.</param>
        <summary>Retorna o seno hiperbólico de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm - um número complexo do qual se deseja obter a raiz quadrada.</param>
        <summary>Retorna a raiz quadrada de um número complexo no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. A raiz quadrada de um número complexo é: </para>
          <para>Figura 1: Raiz quadrada de um número complexo</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>e:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para>e:</para>
          <para>Figura 4: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm1 - o número complexo do qual se deseja subtrair inúm2.</param>
        <param name="Arg2">Inúm2 - o número complexo do qual se deseja subtrair de inúm1.</param>
        <summary>Retorna a diferença entre dois números complexos no formato de texto x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo.</para>
          <para>A diferença entre dois números complexos é: 

</para>
          <para>Figura 1: Diferença de dois números complexos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inúm1, inúm2,... - 1 a 29 números complexos a serem somados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a soma de dois ou mais números complexos no formato de texto x + yi ou x + yj .</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para converter coeficientes reais e imaginários em um número complexo. </para>
          <para>A soma de dois números complexos é: 

</para>
          <para>Figura 1: Soma de dois números complexos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número complexo para o qual você deseja a tangente.</param>
        <summary>Retorna a tangente de um número complexo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz ou Ref - um intervalo de células ou uma constante de matriz. Para referências é a referência a um ou mais intervalos de célula.</param>
        <param name="Arg2">Núm_linha - seleciona a linha na matriz a partir da qual um valor deverá ser retornado. Se núm_linha for omitido, núm_coluna é obrigatório. Para referências, o número da linha em ref de onde será fornecida uma referência.</param>
        <param name="Arg3">Núm_coluna - seleciona a coluna na matriz a partir da qual um valor deverá ser retornado. Se núm_coluna for omitido, núm_linha é obrigatório. Para referências, o número da coluna em ref de onde será fornecida uma referência.</param>
        <param name="Arg4">Núm_área - usado apenas ao retornar referências. Seleciona um intervalo em ref do qual deve ser retornada a interseção de núm_linha com núm_coluna. A primeira área selecionada ou inserida recebe o número 1, a segunda recebe o número 2, e assim por diante. Se area_num for omitido, <b>Index usará</b> a área 1.</param>
        <summary>Retorna um valor ou a referência para um valor de dentro de uma tabela ou intervalo. Há duas formas da função <b>Index:</b> o formulário de matriz e o formulário de referência.</summary>
        <returns>To be added.</returns>
        <remarks><para>Forma matricial</para>
          <para>Retorna o valor de um elemento em uma tabela ou matriz selecionado pelos índices de número de linha e coluna.</para>
          <para>Use o formulário de matriz se o primeiro argumento para <b>Index</b> for uma constante de matriz.</para>
          <para>Se os argumentos row_num e column_num for usado, <b>Index</b> retornará o valor na célula na interseção de row_num e column_num. </para>
          <para>Se você definir row_num ou column_num como 0 (zero), <b>Index</b> retornará a matriz de valores para toda a coluna ou linha, respectivamente. Para usar valores retornados como uma matriz, insira a função <b>Index</b> como uma fórmula de matriz em um intervalo horizontal de células para uma linha e em um intervalo vertical de células para uma coluna. Para inserir uma fórmula de matriz, pressione CTRL+SHIFT+ENTER. </para>
          <para>Row_num e column_num devem apontar para uma célula dentro da matriz; caso contrário, <b>Index</b> retornará o #REF! valor de erro. </para>
          <para>Formulário de referência</para>
          <para>Retorna a referência da célula na interseção de linha e coluna específicas. Se a referência for formada por seleções não-adjacentes, você pode escolher a seleção que deseja observar. Se cada área na referência contiver apenas uma linha ou coluna, o argumento núm_linha ou núm_coluna, respectivamente, será opcional. Por exemplo, para uma referência de linha única, use ÍNDICE(ref,,núm_coluna). </para>
          <para>Depois que ref e núm_área tiverem selecionado um intervalo específico, núm_linha e núm_coluna selecionam uma célula específica: núm_linha 1 é a primeira linha do intervalo, núm_coluna 1 é a primeira coluna, e assim por diante. A referência retornada por <b>Index</b> é a interseção de row_num e column_num. </para>
          <para>Se você definir row_num ou column_num como 0 (zero), <b>Index</b> retornará a referência para toda a coluna ou linha, respectivamente.</para>
          <para>Row_num, column_num e area_num devem apontar para uma célula dentro da referência; caso contrário, <b>Index</b> retornará o #REF! valor de erro. Se row_num e column_num for omitido, <b>Index</b> retornará a área em referência especificada por area_num. </para>
          <para>O resultado da função <b>Index</b> é uma referência e é interpretado como tal por outras fórmulas. Dependendo da fórmula, o valor retornado por ÍNDICE pode ser usado como uma referência ou como um valor. Por exemplo, a fórmula de macro CÉL("largura";ÍNDICE(A1:B2;1;2)) é equivalente a CÉL("largura";B1). A função CÉL usa o valor retornado por ÍNDICE como uma referência de célula. Por outro lado, uma fórmula como 2*INDEX(A1:B2,1,2) converte o valor de retorno de <b>Index</b> no número da célula B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - o conjunto dependente de observações ou dados.</param>
        <param name="Arg2">Val_conhecidos_x - o conjunto independente de observações ou dados.</param>
        <summary>Calcula o ponto no qual uma linha irá interceptar o eixo y usando valores de x e y existentes. O ponto de interseção é baseado em uma linha de regressão de melhor ajuste plotada pelos valores de x e y conhecidos. Use a <b>função Intercept</b> quando quiser determinar o valor da variável dependente quando a variável independente for 0 (zero). Por exemplo, você pode usar a função <b>Intercept</b> para prever a resistência elétrica de um metal a 0°C quando seus pontos de dados foram tirados em temperatura ambiente e mais alta.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se known_y e known_x contêm um número diferente de pontos de dados ou não contêm pontos de dados, <b>Intercept</b> retorna o valor de erro #N/A. </para>
          <para>A equação para a interceptação da linha de regressão, a, é:</para>
          <para>Figura 1: Equação para a interceptação da linha de regressão</para>
          <para> </para>
          <para> </para>
          <para>onde a inclinação, b, é calculada como:</para>
          <para>Figura 2: Equação para a inclinação</para>
          <para> </para>
          <para> </para>
          <para>e onde x e y são o exemplo significa AVERAGE(known_x's) e AVERAGE(known_y's).</para>
          <para>O algoritmo subjacente usado no <b>Intercept</b> e nas funções é diferente do algoritmo subjacente <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> usado na <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> função. A diferença entre esses algoritmos pode levar a diferentes resultados quando os dados forem indeterminados e colineares. Por exemplo, se os pontos de dados do argumento val_conhecidos_y forem 0 e os pontos de dados do argumento val_conhecidos_x forem 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Intercepte</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> e retorne um #DIV/0! . O <b>Intercept</b> e o algoritmo foram projetados para procurar uma e apenas uma resposta e, nesse caso, pode <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> haver mais de uma resposta. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> retorna um valor de 0. O algoritmo foi projetado para retornar resultados razoáveis para dados <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> collineares e, nesse caso, pelo menos uma resposta pode ser encontrada.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Investimento - a quantia investida no título.</param>
        <param name="Arg4">Resgate - a quantia a ser recebida no vencimento.</param>
        <param name="Arg5">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a taxa de juros de um título totalmente investido.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>IntRate</b> retornará o #VALUE! valor de erro. </para>
          <para>Se o investimento ≤ 0 ou se o resgate ≤ 0, <b>IntRate</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>IntRate</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>IntRate</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>IntRate</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação do método IntRate</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>B = número de dias em um ano, dependendo da base do ano.</para>
          <para>DIM = número de dias da liquidação até o vencimento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros por período.</param>
        <param name="Arg2">Período - o período cujos juros se deseja saber e deve estar no intervalo entre 1 e nper.</param>
        <param name="Arg3">Nper - o número total de períodos de pagamento em uma anuidade.</param>
        <param name="Arg4">Vp - o valor presente ou a soma total correspondente ao valor presente de uma série de pagamentos futuros.</param>
        <param name="Arg5">Vf - o valor futuro, ou o saldo, que você deseja obter depois do último pagamento. Se vf for omitido, será considerado 0 (o valor futuro de um empréstimo, por exemplo, é 0).</param>
        <param name="Arg6">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos. Se tipo for omitido, será considerado 0.</param>
        <summary>Retorna o pagamento de juros para um determinado período de investimento de acordo com pagamentos periódicos e constantes e com uma taxa de juros constante.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se fizer pagamentos mensais de um empréstimo de quatro anos com taxa de juros de 12% ao ano, use 12%/12 para taxa e 4*12 para nper. Se você fizer pagamentos anuais para o mesmo empréstimo, use 12% para taxa e 4 para nper. </para>
          <para>Todos os argumentos, saques, tais como depósitos em poupança, serão representados por números negativos; depósitos recebidos, tais como cheques de dividendos, serão representados por números positivos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores - uma matriz ou uma referência a células que contêm números cuja taxa interna de retorno se deseja calcular.</param>
        <param name="Arg2">Estimativa - um número que se estima ser próximo do resultado de TIR.</param>
        <summary>Retorna a taxa interna de retorno de uma sequência de fluxos de caixa representada pelos números em valores. Estes fluxos de caixa não precisam ser iguais como no caso de uma anuidade. Entretanto, os fluxos de caixa devem ser feitos em intervalos regulares, como mensalmente ou anualmente. A taxa interna de retorno é a taxa de juros recebida para um investimento que consiste em pagamentos (valores negativos) e receitas (valores positivos) que ocorrem em períodos regulares.</summary>
        <returns>To be added.</returns>
        <remarks><para>Valores deve conter pelo menos um valor positivo e um negativo para calcular a taxa interna de retorno.</para>
          <para>TIR usa a ordem de valores para interpretar a ordem de fluxos de caixa. Certifique-se de inserir os valores de pagamentos e rendas na sequência desejada.</para>
          <para>Se uma matriz ou um argumento de referência contiver texto, valores lógicos ou células em branco, estes valores serão ignorados.</para>
          <para>Microsoft Excel usa uma técnica iterativa para calcular <b>Irr</b>. A partir da suposição, <b>o Irr</b> passa pelo cálculo até que o resultado seja preciso em 0,00001%. Se <b>o Irr</b> não conseguir encontrar um resultado que funcione após 20 tentativas, a #NUM! será retornado. </para>
          <para>Na maioria dos casos, você não precisa fornecer suposição para o <b>cálculo de Irr.</b> Se estimativa for omitida, será considerada 0,1 (10 por cento). </para>
          <para>Se <b>Irr</b> der a #NUM! valor de erro ou se o resultado não estiver próximo do esperado, tente novamente com um valor diferente para adivinhar.</para>
          <para>
            <b>Irr</b> está intimamente relacionado à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> função , a função de valor de presente líquido. A taxa de retorno calculada por <b>Irr</b> é a taxa de juros correspondente a um valor presente líquido de 0 (zero). A fórmula a seguir demonstra como <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> e <b>Irr</b> estão relacionados:</para>
          <para>NPV(IRR(B1:B6),B1:B6) é igual a 3,60E-08 [Dentro da precisão do cálculo <b>irr,</b> o valor 3.60E-08 é efetivamente 0 (zero).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere a qualquer valor de erro, exceto #N/A.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere a qualquer valor de erro (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, ou #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor for mesmo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referência à célula que você deseja testar. Referência pode ser uma referência de célula, uma fórmula ou nome que se refere a uma célula.</param>
        <summary>Verifica se uma referência é para uma célula que contém uma fórmula e retorna <b>TRUE</b> ou <b>FALSE</b>.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere a um valor lógico.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere ao valor de erro #N/A (valor não disponível).</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere a qualquer item que não seja texto. (Observe que essa função retornará <b>true se</b> o valor se referir a uma célula em branco.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere a um número.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - O valor a ser arredondado.</param>
        <param name="Arg2">Significância - O múltiplo opcional para o qual o número deve ser arredondado. Se significância for omitida, seu valor padrão será 1.</param>
        <summary>Retorna um número que é arredondado para o inteiro mais próximo ou para o múltiplo mais próximo de significância.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor for ímpar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Código de data e hora usado pelo Excel para cálculo de data e hora.</param>
        <param name="Arg2">Esse argumento não está disponível na função.</param>
        <summary>Retorna o número da semana ISO do ano para uma determinada data.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Retorna o número ordinal da semana de calendário [ISO8601] no ano para a data determinada. A ISO 8601 define a semana do calendário como um intervalo de tempo de sete dias do calendário começando com uma segunda-feira e a primeira semana de calendário de um ano como a que inclui a primeira quinta-feira desse ano.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros do investimento.</param>
        <param name="Arg2">Período - o período para o qual você deseja encontrar os juros e deve estar entre 1 e nper.</param>
        <param name="Arg3">Nper - o número total de períodos de pagamento do investimento.</param>
        <param name="Arg4">Vp - o valor presente do investimento. Para um empréstimo, vp é a quantia do empréstimo.</param>
        <summary>Calcula os juros pagos durante um período específico de um investimento. Essa função é fornecida para que haja compatibilidade com o Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks><para>Certifique-se de que esteja sendo consistente quanto às unidades usadas para especificar a taxa e nper. Se você fizer pagamentos mensais para um empréstimo de quatro anos com uma taxa de juros de 12%, use 12%/12 para taxa e 4*12 para nper. Se fizer pagamentos anuais no mesmo empréstimo, use 12% para taxa e 4 para nper.</para>
          <para>Para todos os argumentos, o saldo em dinheiro pago, como depósitos em poupanças ou saques, é representado por números negativos; o saldo em dinheiro recebido, como cheques de dividendos e outros depósitos, é representado por números positivos.</para>
          <para>Para obter informações adicionais sobre funções financeiras, consulte a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> função.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor - o valor que se deseja testar. O valor pode ser um espaço em branco (célula vazia), um valor de erro, lógico, de texto, de número ou de referência, ou um nome correspondente a qualquer um destes itens que se deseja testar.</param>
        <summary>Verifica o tipo de valor e retorna <b>true</b> ou <b>false,</b> dependendo se o valor se refere ao texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de valor das funções É não são convertidos. Por exemplo, na maioria das outras funções em que se exige um número, o valor de texto "19" é convertido para o número 19. No entanto, na fórmula ISNUMBER("19"), "19" não é convertido de um valor de texto e a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> função retorna <b>false</b>. </para>
          <para>As funções É são úteis nas fórmulas para testar o resultado de um cálculo. Quando combinado com a função IF, eles fornecem um método para localizar erros em fórmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 argumentos para os quais você deseja calcular a curtose. Você também pode usar uma única matriz ou referência a uma matriz em vez de argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a curtose de um conjunto de dados. A curtose caracteriza a capacidade relativa de pico ou de nivelamento de uma distribuição comparada com a distribuição normal. Curtose positiva indica uma distribuição relativamente de pico. Curtose negativa indica uma distribuição relativamente nivelada.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se houver menos de quatro pontos de dados ou se o desvio padrão da amostra for igual a zero, <b>Kurt</b> retornará o #DIV/0! valor de erro. </para>
          <para>A kurtose é definida como: </para>
          <para>Figura 1: Equação de Kurtose</para>
          <para> </para>
          <para> </para>
          <para>onde s é o desvio padrão de exemplo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou intervalo de dados cujo k-ésimo maior valor você deseja determinar.</param>
        <param name="Arg2">K - a posição (a partir do maior) na matriz ou intervalo de células a ser fornecido.</param>
        <summary>Retorna o k-ésimo maior valor em um conjunto de dados. Você pode usar essa função para selecionar um valor com base em sua posição relativa. Por exemplo, você pode usar <b>Large</b> para retornar a pontuação mais alta, vice-líder ou terceiro lugar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Large</b> retornará o #NUM! valor de erro. </para>
          <para>Se k ≤ 0 ou se k for maior do que o número de pontos de dados, <b>Large</b> retornará a #NUM! valor de erro.</para>
          <para>Se n for o número de pontos de dados em um intervalo, MAIOR(matriz,1) retornará o maior valor e MAIOR(matriz,n) retornará o menor valor.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - 1 a 29 valores cujo menor múltiplo comum deseja obter. Se o valor não for um inteiro, ele será truncado.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o menor múltiplo comum dos inteiros. O menor múltiplo comum é o menor inteiro positivo que é múltiplo de todos os argumentos inteiros núm1, núm2 etc. Use o MMC para adicionar frações com diferentes denominadores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>Lcm</b> retornará o #VALUE! valor de erro. </para>
          <para>Se qualquer argumento for menor que zero, <b>Lcm</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - o conjunto de valores y que você já conhece na relação y = mx + b.</param>
        <param name="Arg2">Val_conhecidos_x - um conjunto opcional de valores x que talvez você já conheça na relação y = mx + b.</param>
        <param name="Arg3">Constante - um valor lógico que especifica a necessidade de forçar ou não a constante b igual a zero.</param>
        <param name="Arg4">Estatísticas - um valor lógico especificando a necessidade de retornar ou não estatísticas adicionais de regressão.</param>
        <summary>Calcula as estatísticas de uma linha usando o método "quadrados menores" para calcular uma linha reta que melhor se adapte aos seus dados e retorna uma matriz que descreve a linha. Como essa função retorna uma matriz de valores, ela deve ser inserida como uma fórmula matricial.</summary>
        <returns>To be added.</returns>
        <remarks><para>A equação para a linha é:</para>
          <para>y = mx + b ou</para>
          <para>y = m1x1 + m2x2 + ... + b (se houver vários intervalos de valores x)</para>
          <para>onde o valor y dependente é uma função dos valores x independentes. Os valores m são coeficientes correspondentes a cada valor x e b é um valor constante. Observe que y, x e m podem ser vetores. A matriz <b>retornada por LinEst</b> é {mn,mn-1,...,m1,b}. <b>LinEst</b> também pode retornar estatísticas de regressão adicionais.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única coluna, cada coluna de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única linha, cada linha de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>
				A matriz val_conhecidos_x pode incluir um ou mais conjuntos de variáveis. Se apenas uma variável for usada, val_conhecidos_y e val_conhecidos_x podem ser intervalos de qualquer formato, desde que tenham dimensões iguais. Se mais de uma variável for usada, val_conhecidos_y deverá ser um vetor (ou seja, um intervalo com altura de uma linha ou largura de uma coluna).
</para>
          <para>Se val_conhecidos_x for omitido, pressupõe-se que a matriz {1,2,3,...} seja do mesmo tamanho que val_conhecidos_y.</para>
          <para>Se const for <b>verdadeiro</b> ou omitido, b será calculado normalmente. </para>
          <para>Se const for <b>false,</b>b será definido como 0 e os valores m serão ajustados para ajustar y = mx. </para>
          <para>Se stats for <b>truuue</b>, <b>LinEst</b> retornará as estatísticas de regressão adicionais, portanto, a matriz retornada será {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Se as estatísticas for <b>false</b> ou omitida, <b>LinEst</b> retornará apenas os coeficientes m e a constante b. </para>
          <para>Há exemplos de estatísticas adicionais de regressão a seguir.</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Os valores padrão de erro dos coeficientes m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>O valor de erro padrão da constante b (seb = #N/A quando const for <b>false</b>).</description>
            </item>
            <item>
              <term>r2</term>
              <description>O coeficiente de determinação. Compara valores y reais e estimados e intervalos no valor de 0 a 1. Se for 1, haverá uma correlação perfeita no exemplo, ou seja, não haverá diferença entre o valor y estimado e o real. Por outro lado, se o coeficiente de determinação for 0, a equação de regressão não ajudará a prever um valor y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>O erro padrão da estimativa de y.</description>
            </item>
            <item>
              <term>S</term>
              <description>A estatística F ou valor F observado. Use a estatística F para determinar se a relação observada entre as variáveis dependentes e independentes ocorrerá aleatoriamente.</description>
            </item>
            <item>
              <term>df</term>
              <description>Os graus de liberdade. Use os graus de liberdade para ajudá-lo a obter valores F críticos em uma tabela estatística. Compare os valores que você encontra na tabela com a estatística F retornada pela <b>LinEst</b> para determinar um nível de confiança para o modelo. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>A soma de regressão dos quadrados.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>A soma residual dos quadrados.</description>
            </item>
          </list>
          <para>A ilustração a seguir mostra a ordem na qual as estatísticas adicionais de regressão são retornadas.</para>
          <para>Figura 1: Planilha</para>
          <para> </para>
          <para> </para>
          <para>Você pode descrever qualquer linha reta com a inclinação e a interceptação y: </para>
          <para>Inclinação (m):</para>
          <para>
Para encontrar a inclinação de uma linha, geralmente escrita como m, leve dois pontos na linha, (x1,y1) e (x2,y2); a inclinação é igual a (y2 - y1)/(x2 - x1).</para>
          <para>Interceptação Y (b):</para>
          <para>
A interceptação y de uma linha, geralmente escrita como b, é o valor de y no ponto em que a linha cruza o eixo y.</para>
          <para>A equação de uma linha reta é y = mx + b. Quando souber os valores de m e b, você poderá calcular qualquer ponto na linha conectando o valor y ou x à equação. Você também pode usar a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> função.</para>
          <para>Quando você tem apenas uma variável x independente, você pode obter os valores de inclinação e interceptação y diretamente usando as seguintes fórmulas: </para>
          <para>Inclinação:</para>
          <para>
=INDEX(LINEST(known_y,known_x)1)</para>
          <para>Interceptação Y:</para>
          <para>
=INDEX(LINEST(known_y,known_x)2)</para>
          <para>A precisão da linha calculada pelo <b>LineEst</b> depende do grau de dispersão em seus dados. Quanto mais linear os dados, mais preciso o <b>modelo LineEst.</b> <b>LineEst</b> usa o método de mínimos quadrados para determinar o melhor ajuste para os dados. Quando você tem apenas uma variável x independente, os cálculos para m e b são baseados nas seguintes fórmulas: </para>
          <para>Figura 2: Equação</para>
          <para> </para>
          <para> </para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são médias de exemplo, ou seja, x = AVERAGE(conhecidos x's) e y = AVERAGE(known_y's).</para>
          <para>As funções de ajuste de linha e curva <b>LineEst</b> podem calcular a melhor linha reta ou curva exponencial que se ajuste <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> aos seus dados. No entanto, você precisa escolher o resultado mais adequado aos seus dados. É possível calcular TENDÊNCIA(val_conhecidos_y,val_conhecidos_x) para uma linha reta ou CRESCIMENTO(val_conhecidos_y,val_conhecidos_x) para uma curva exponencial. Essas funções, sem o argumento novos_valores_x, retornam uma matriz de valores y previstos ao longo dessa linha ou curva nos pontos de dados reais. Você poderá então comparar os valores previstos com os reais. Talvez seja conveniente colocá-los em um gráfico para comparação visual. </para>
          <para>Na análise de regressão, Microsoft Excel calcula para cada ponto a diferença quadrada entre o valor y estimado para esse ponto e seu valor y real. A soma dessas diferenças quadradas é chamada de soma residual de quadrados, ssresid. Microsoft Excel calcula a soma total de quadrados, sstotal. Quando const = <b>true</b>, ou omitido, a soma total de quadrados é a soma das diferenças quadradas entre os valores y reais e a média dos valores y. Quando const = <b>false</b>, a soma total de quadrados é a soma dos quadrados dos valores y reais (sem subtrair o valor y médio de cada valor y individual). Em seguida, a soma de regressão de quadrados, ssreg, pode ser encontrada em: ssreg = sstotal - ssresid. Quanto menor for a soma residual de quadrados, em comparação com a soma total de quadrados, maior será o valor do coeficiente de determinação, r2, que é um indicador de quão bem a equação resultante da análise de regressão explica a relação entre as variáveis. r2 é igual a ssreg/sstotal. </para>
          <para>Em alguns casos, uma ou mais colunas X (pressupondo que Y e X estão em colunas) podem não ter nenhum valor preditivo adicional na presença das outras colunas X. Em outras palavras, a eliminação de uma ou mais colunas X pode levar a valores Y previstos que sejam igualmente precisos. Nesse caso, essas colunas X redundantes devem ser omitidas do modelo de regressão. Esse fenômeno é chamado de "collinearity" porque qualquer coluna X redundante pode ser expressa como uma soma de múltiplos das colunas X não redundantes. <b>LinEst</b> verifica se há collinearidade e remove quaisquer colunas X redundantes do modelo de regressão quando as identifica. As colunas X removidas podem ser reconhecidas <b>na saída LinEst</b> como tendo coeficientes 0, bem como 0 se's. Se uma ou mais colunas são removidas como redundantes, o df é afetado porque df depende do número de colunas X realmente usadas para fins preditivos. Se df for alterado porque as colunas X redundantes são removidas, os valores de sey e F também serão afetados. A collinearidade deve ser relativamente rara na prática. No entanto, um caso em que é mais provável surgir é quando algumas colunas X contêm apenas 0 e 1 como indicadores de se um assunto em um experimento é ou não membro de um determinado grupo. Se const = <b>true</b> ou omitido, <b>LinEst</b> insere efetivamente uma coluna X adicional de todos os 1 para modelar a interceptação. Se você tiver uma coluna com um 1 para cada assunto, se for masculino, ou 0, se não for, e também tiver uma coluna com um 1 para cada assunto se for do sexo feminino, ou 0 se não for, essa última coluna será redundante porque as entradas nele podem ser obtidas da subtração da entrada na coluna "indicador masculino" da entrada na coluna adicional de todos os 1 adicionados por <b>LineEst</b>. </para>
          <para>df é calculado da seguinte maneira quando nenhuma coluna X é removida do modelo devido à collinearidade: se houver k colunas de known_x e const = <b>true</b> ou omitida, df = n – k – 1. Se const = <b>false</b>, df = n - k. Em ambos os casos, cada coluna X removida devido à colinearidade aumenta df em 1. </para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais. Ao inserir uma constante, como um argumento val_conhecidos_x, use vírgulas na mesma linha e ponto-e-vírgulas para separar linhas. Os caracteres separadores podem ser diferentes dependendo da configuração da localidade em  Opções Regionais e de Idioma no Painel de Controle. </para>
          <para>Lembre-se de que os valores y previstos pela equação de regressão talvez não sejam válidos se estiverem fora do intervalo dos valores y usados para determinar a equação. O algoritmo subjacente usado na <b>função LinEst</b> é diferente do algoritmo subjacente usado <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> nas funções <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> e. A diferença entre esses algoritmos pode levar a diferentes resultados quando os dados forem indeterminados e colineares. Por exemplo, se os pontos de dados do argumento val_conhecidos_y forem 0 e os pontos de dados do argumento val_conhecidos_x forem 1: </para>
          <para>
            <b>LineEst</b> retorna um valor 0. O <b>algoritmo LinEst</b> foi projetado para retornar resultados razoáveis para dados collineares e, nesse caso, pelo menos uma resposta pode ser encontrada. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> e <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> retornar um #DIV/0! . O algoritmo e foi projetado para procurar uma e apenas uma resposta e, nesse caso, pode <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> haver mais de uma <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> resposta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - o número real positivo cujo logaritmo natural você deseja obter.</param>
        <summary>Retorna o logaritmo natural de um número. Logaritmos naturais são baseados na constante e (2.71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> é o inverso da função EXP.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - o número real positivo cujo logaritmo você deseja obter.</param>
        <param name="Arg2">Base - a base do logaritmo. Se a base for omitida, ela será considerada 10.</param>
        <summary>Retorna o logaritmo de um número para a base especificada.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - o número real positivo cujo logaritmo de base 10 você deseja obter.</param>
        <summary>Retorna o logaritmo de base 10 de um número.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - o conjunto de valores y que você já conhece na relação y = b*m^x.</param>
        <param name="Arg2">Val_conhecidos_x - um conjunto opcional de valores x que você talvez já conheça na relação y = b*m^x.</param>
        <param name="Arg3">Constante - um valor lógico que força ou não a constante b a se igualar a 1.</param>
        <param name="Arg4">Estatísticas - um valor lógico especificando a necessidade de retornar ou não estatísticas adicionais de regressão.</param>
        <summary>Na análise de regressão, calcula uma curva exponencial adequada aos dados e retorna uma matriz de valores que descrevem a curva. Como essa função retorna uma matriz de valores, ela deve ser inserida como uma fórmula matricial.</summary>
        <returns>To be added.</returns>
        <remarks><para>A equação para a curva é:</para>
          <para>y = b*m^x ou</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (se houver vários valores x)</para>
          <para>onde o valor y dependente é uma função dos valores x independentes. Os valores m são bases correspondentes a cada valor x expoente e b é um valor constante. Observe que y, x e m podem ser vetores. A matriz <b>retornada por LogEst</b> é {mn,mn-1,...,m1,b}.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única coluna, cada coluna de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única linha, cada linha de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>
				A matriz val_conhecidos_x pode incluir um ou mais conjuntos de variáveis. Se apenas uma variável for usada, val_conhecidos_y e val_conhecidos_x podem ser intervalos de qualquer formato, desde que tenham dimensões iguais. Se mais de uma variável for usada, val_conhecidos_y deverá ser um intervalo de células com altura de uma linha ou largura de uma coluna (também conhecido como vetor).
</para>
          <para>Se val_conhecidos_x for omitido, pressupõe-se que a matriz {1,2,3,...} seja do mesmo tamanho que val_conhecidos_y.</para>
          <para>Se const for <b>verdadeiro</b> ou omitido, b será calculado normalmente.</para>
          <para>Se const for <b>false,</b>b será definido como 1 e os valores m serão ajustados a y = m^x.</para>
          <para>Se as estatísticas for <b>true,</b> <b>LogEst</b> retornará as estatísticas de regressão adicionais, portanto, a matriz retornada será {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Se as estatísticas for <b>false</b> ou omitida, <b>LogEst</b> retornará apenas os coeficientes m e a constante b. </para>
          <para>Para obter mais informações sobre estatísticas de regressão adicionais, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Quanto mais a plotagem de seus dados lembrar uma curva exponencial, melhor a linha calculada os acomodará. Like <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> , <b>LogEst</b> returns an array of values that describes a relationship among the values, but <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> fits a straight line to your data; <b>LogEst se</b> encaixa em uma curva exponencial. Para obter mais informações, confira <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Quando você tem apenas uma variável x independente, você pode obter valores de interceptação y (b) diretamente usando a seguinte fórmula: </para>
          <para>Interceptação Y (b):</para>
          <para>
INDEX(LOGEST(known_y,known_x's),2)</para>
          <para>Você pode usar a equação y = b*m^x para prever valores futuros de y, mas Microsoft Excel fornece a função para <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> fazer isso para você. Para obter mais informações, confira <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais.</para>
          <para>Ao inserir uma constante, como um argumento val_conhecidos_x, use vírgulas na mesma linha e ponto-e-vírgulas para separar linhas. Os caracteres separadores podem ser diferentes dependendo da configuração da localidade em  Opções Regionais e de Idioma no Painel de Controle.</para>
          <para>Lembre-se de que os valores y previstos pela equação de regressão talvez não sejam válidos se estiverem fora do intervalo dos valores y usados para determinar a equação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade associada à distribuição lognormal.</param>
        <param name="Arg2">Média - a média de ln(x).</param>
        <param name="Arg3">Desv_padrão - o desvio padrão de ln(x).</param>
        <summary>Usa a distribuição lognormal para analisar dados transformados como logaritmos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> método.</para>
          <para>Se algum argumento não for numerado, <b>LogInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; = 0 ou probabilidade &gt; = 1, <b>LogInv</b> retorna o #NUM! valor de erro. </para>
          <para>Se standard_dev &lt; = 0, <b>LogInv</b> retornará o #NUM! valor de erro. </para>
          <para>O inverso da função de distribuição lognormal é:
				 </para>
          <para>Figura 1: Inverso da função de distribuição lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Média - a média do ln(x).</param>
        <param name="Arg3">Desv_padrão - O desvio padrão de ln(x).</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>LogNorm_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição lognormal de x, onde ln(x) é normalmente distribuído com parâmetros média e desv_padrão. Use esta função para analisar dados que tenham sido transformados logaritmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>LogNorm_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x ≤ 0 ou se standard_dev ≤ 0, <b>LogNorm_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de distribuição cumulativa lognormal é: 

 </para>
          <para>Figura 1: Equação para a distribuição cumulativa lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - uma probabilidade associada à distribuição lognormal.</param>
        <param name="Arg2">Média - a média do ln(x).</param>
        <param name="Arg3">Desv_padrão - O desvio padrão de ln(x).</param>
        <summary>Retorna o inverso da função de distribuição cumulativa lognormal. Use a distribuição lognormal para analisar dados transformados logaritmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>LogNorm_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; = 0 ou probabilidade = 1, LogNorm_Inv &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se standard_dev &lt; = 0, <b>LogNorm_Inv</b> retornará o #NUM! valor de erro. </para>
          <para>O inverso da função de distribuição lognormal é:
				 </para>
          <para>Figura 1: Inverso da função de distribuição lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Média - a média de ln(x).</param>
        <param name="Arg3">Desv_padrão - o desvio padrão de ln(x).</param>
        <summary>Retorna a distribuição lognormal de x, onde In(x) é normalmente distribuído com média de parâmetros e desv_padrão. Use essa função para analisar dados que foram transformados como logaritmos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se algum argumento não for numerado, <b>LogNormDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x ≤ 0 ou se standard_dev ≤ 0, <b>LogNormDist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de distribuição cumulativa lognormal é: 

 </para>
          <para>Figura 1: Equação para a distribuição cumulativa lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - Um valor que <b>Pesquisa</b> procura no primeiro vetor. Valor_procurado pode ser número, texto, valor lógico ou um nome ou uma referência que indica um valor.</param>
        <param name="Arg2">Vetor_proc ou matriz - no formato de vetor, um intervalo que contém apenas uma linha ou uma coluna. Os valores de vetor_procurado podem ser texto, números ou valores lógicos. No formato de matriz, um intervalo de células que contenha texto, números ou valores lógicos a serem comparados com valor_procurado.</param>
        <param name="Arg3">Vetor_result - usado apenas no formato de vetor. Um intervalo que contém somente uma linha ou coluna. Deve ter o mesmo tamanho que o vetor_proc.</param>
        <summary>Retorna um valor de um intervalo de uma linha ou uma coluna ou de uma matriz. A função PROC tem dois formatos de sintaxe: vetor e matriz.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Examinar um intervalo de uma linha ou uma coluna (conhecido como vetor) em busca de um valor e retornar um valor da mesma posição em um segundo intervalo de uma linha ou uma coluna.</term>
              <description>Formato de vetor</description>
              <description>Use o formato de vetor quando tiver uma lista grande de valores para procurar ou quando os valores puderem mudar ao longo do tempo.</description>
            </item>
            <item>
              <term>Examinar a primeira linha ou coluna de uma matriz em busca do valor especificado e retornar um valor da mesma posição na última linha ou coluna da matriz.</term>
              <description>Formato de matriz</description>
              <description>Use o formato de matriz quando tiver uma pequena lista de valores e eles se mantiverem constantes ao longo do tempo.</description>
            </item>
          </list>
          <para>
            <b>Observação</b>: Você também pode usar a função <b>Lookup</b> como uma alternativa à função IF para elaborar testes ou testes para mais de sete condições. Veja os exemplos no formato de matriz.</para>
          <para>Formato de vetor</para>
          <para>Um vetor é um intervalo de apenas uma linha ou uma coluna. A forma vetorial de <b>Lookup</b> procura um intervalo de uma linha ou uma coluna (conhecido como vetor) para um valor e retorna um valor da mesma posição em um segundo intervalo de uma linha ou uma coluna. Use esse formulário da função <b>Lookup</b> quando quiser especificar o intervalo que contém os valores que você deseja corresponder. A outra forma de <b>Lookup</b> procura automaticamente na primeira coluna ou linha.</para>
          <para>
            <b>Importante</b>: os valores em lookup_vector devem ser colocados em ordem crescente: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; caso contrário, <b>a Lookup</b> pode não dar o valor correto. Textos em letras maiúsculas e minúsculas são equivalentes.</para>
          <para>Se PROC não localizar o valor_procurado, ele buscará o maior valor de vetor_proc que seja menor que ou igual ao valor_procurado.</para>
          <para>Se lookup_value menor que o menor valor em <b>lookup_vector,</b> a Pesquisa fornece o valor de erro #N/A.</para>
          <para>Forma matricial</para>
          <para>O formulário de matriz <b>de Lookup</b> procura na primeira linha ou coluna de uma matriz para o valor especificado e retorna um valor da mesma posição na última linha ou coluna da matriz. Use essa forma de <b>Lookup</b> quando os valores que você deseja corresponder estão na primeira linha ou coluna da matriz. Use o outro formulário <b>de Lookup</b> quando quiser especificar o local da coluna ou linha.</para>
          <para>
            <b>Dica:</b>em geral, é melhor usar a função ou em vez do formulário <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> de matriz de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> <b>Lookup</b>. Esse formulário de <b>Lookup</b> é fornecido para compatibilidade com outros programas de planilha.</para>
          <para>Se <b>a Lookup</b> não conseguir encontrar o lookup_value, ela usará o maior valor na matriz que é menor ou igual a lookup_value.</para>
          <para>Se lookup_value menor que o menor valor na primeira linha ou coluna (dependendo das dimensões da <b>matriz),</b> a Pesquisa retornará o valor de erro #N/A.</para>
          <para>A forma de matriz <b>de Lookup</b> é muito semelhante às <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> funções <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> e. A diferença é que pesquisa por lookup_value na primeira linha, pesquisas na primeira coluna e pesquisas de pesquisa de acordo com as <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> dimensões da matriz. <b></b></para>
          <para>Se a matriz abranger uma área mais larga do que alta (mais colunas do que <b>linhas),</b> procure por lookup_value na primeira linha.</para>
          <para>Se a matriz for quadrada ou for mais alta do <b></b> que larga (mais linhas do que colunas), Pesquisa pesquisa na primeira coluna.</para>
          <para>Com e , você pode indexar para baixo ou para baixo, mas a Lookup sempre seleciona o último <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> valor na linha ou <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> coluna. <b></b></para>
          <para>
            <b>Importante</b>: os valores na matriz devem ser colocados em ordem crescente: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; caso contrário, <b>a Lookup</b> pode não dar o valor correto. Os textos em maiúsculas e em minúsculas são equivalentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - o valor usado para localizar o valor desejado em uma tabela.</param>
        <param name="Arg2">Lookup_array - um intervalo contíguo de células que contém valores de pesquisa possíveis. Lookup_array deve ser uma matriz ou uma referência de matriz.</param>
        <param name="Arg3">Match_type - o número -1, 0 ou 1. Match_type especifica como o Microsoft Excel corresponde a lookup_value com valores em lookup_array.</param>
        <summary>Retorna a posição relativa de um item em uma matriz que corresponda a um valor especificado em uma ordem especificada. Use <b>Match</b> em vez de uma das funções quando você precisar da posição de um item em um intervalo em vez <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> do item em si.</summary>
        <returns>To be added.</returns>
        <remarks><para>Lookup_value é o valor que você deseja corresponder em lookup_array. Por exemplo, ao procurar o número de alguém em uma lista telefônica, você está usando o nome da pessoa como o valor da busca, mas o número de telefone é o valor que você deseja.</para>
          <para>Lookup_value pode ser um valor (número, texto ou valor lógico) ou uma referência de célula para um número, texto ou valor lógico.</para>
          <para>Se match_type for 1, <b>Match</b> encontrará o maior valor menor ou igual a lookup_value. Lookup_array deve ser colocado em ordem crescente: ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Se match_type for 0, <b>Match</b> encontrará o primeiro valor que é exatamente igual a lookup_value. Lookup_array poderá estar em qualquer ordem.</para>
          <para>Se match_type for -1, <b>Match</b> encontrará o menor valor maior ou igual a lookup_value. Lookup_array deve ser colocado em ordem decrescente: <b>true</b>, <b>false,</b>Z-A, ... 2, 1, 0, -1, -2, ...e assim por diante. Se match_type for omitido, supõe-se que seja 1.</para>
          <para>
            <b>Match</b> retorna a posição do valor lookup_array, não o valor em si. Por exemplo, MATCH("b",{"a","b","c"},0) retorna 2, a posição relativa de "b" na matriz {"a","b","c"}. </para>
          <para>
            <b>A</b> correspondência não faz distinção entre letras maiúsculas e minúsculas ao corresponder valores de texto. </para>
          <para>Se <b>Match</b> não tiver êxito em encontrar uma combinação, ele retornará o valor de erro #N/A. </para>
          <para>Se match_type for 0 e se lookup_value for texto, então você poderá usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*), no lookup_value. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - números de 1 a 30 cujo valor máximo você deseja obter.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o maior valor em um conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, serão usados apenas números nessa matriz ou referência. Células vazias, valores lógicos ou texto na matriz ou referência serão ignorados.</para>
          <para>Se os argumentos não contêm números, <b>Max</b> retornará 0 (zero). </para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se você quiser incluir valores lógicos e representações de texto de números em uma referência como parte do cálculo, use a <see cref="MAXA" /> função.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - uma matriz numérica com um número igual de linhas e colunas.</param>
        <summary>Retorna o determinante de uma matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>A matriz pode ser dada como um intervalo de células, por exemplo, A1:C3; como uma constante de matriz, como {1,2,3;4,5,6;7,8,9}; ou como um nome para qualquer um desses. <b>MDeterm</b> retorna o #VALUE! quando: </para>
          <para>Alguma célula da matriz está vazia ou contém texto.</para>
          <para>A matriz não tem um número igual de linhas e colunas.</para>
          <para>O tamanho da matriz excede 73 colunas por 73 linhas.</para>
          <para>O determinante da matriz é um número derivado dos valores da matriz. Em uma matriz de três linhas e três colunas, A1:C3, o determinante é definido como: 

</para>
          <code>MDETERM(A1:C3)</code>
          <para>igual a </para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Geralmente, os determinantes da matriz são usados para resolver problemas de equações matemáticas que envolvem várias variáveis.</para>
          <para>
            <b>MDeterm</b> é calculado com uma precisão de aproximadamente 16 dígitos, o que pode levar a um pequeno erro numérico quando o cálculo não for concluído. Por exemplo, o determinante de uma matriz singular pode diferir de zero em 1E-16.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Cupom - a taxa anual de cupom do título.</param>
        <param name="Arg4">Lcr - o rendimento anual do título.</param>
        <param name="Arg5">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg6">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a duração modificada Macauley de um título com um valor par presumido de R$100.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto.</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008 e a data de vencimento é 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, frequência e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>MDuration</b> retornará a #VALUE! valor de erro. </para>
          <para>Se yld &lt; 0 ou se cupom &lt; 0, <b>MDuration</b> retornará o #NUM! valor de erro. </para>
          <para>Se frequência for qualquer número diferente de 1, 2 ou 4, <b>MDuration</b> retornará o #NUM! valor de erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>MDuration</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>MDuration</b> retornará o #NUM! valor de erro. </para>
          <para>A duração modificada é definida da seguinte maneira: 

 </para>
          <para>Figura 1: Equação para duração modificada</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 números para os quais você deseja obter o mediano.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o mediano dos números fornecidos. O mediano é o número no meio de um conjunto de números.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se houver um número de números no conjunto, <b>Median</b> calculará a média dos dois números no meio. Veja segunda fórmula no exemplo.</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>Observação</b>: a <b>função Median</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média que é a média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median que é o número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4.</description>
            </item>
            <item>
              <description>Modo que é o número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - números de 1 a 30 cujo valor mínimo você deseja obter.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o menor número em um conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, serão usados apenas números nessa matriz ou referência. Células vazias, valores lógicos ou texto na matriz ou referência serão ignorados.</para>
          <para>Se os argumentos não contêm números, <b>Min</b> retornará 0. </para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Para incluir valores lógicos e representações de números em forma de texto em uma referência como parte do cálculo, use a função MÍNIMOA.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - uma matriz numérica com um número igual de linhas e colunas.</param>
        <summary>Retorna a matriz inversa da matriz armazenada em uma matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>O tamanho da matriz não deve exceder 52 colunas por 52 linhas. Se isso acontecer, a função retornará um #VALUE! . </para>
          <para>A matriz pode ser fornecida como um intervalo de células, como A1:C3; uma constante de matriz, como {1,2,3;4,5,6;7,8,9}; ou como o nome de um desses.</para>
          <para>Se alguma célula na matriz estiver vazia ou conter texto, <b>O MInverse</b> retornará o #VALUE! valor de erro. </para>
          <para>
            <b>O MInverse</b> também retorna o #VALUE! se a matriz não tiver um número igual de linhas e colunas. </para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais.</para>
          <para>Geralmente, matrizes inversas, como determinantes, são usadas para resolver problemas de equações matemáticas que envolvem várias variáveis. O produto de uma matriz e seu inverso é a matriz identidade, ou seja, a matriz quadrada na qual os valores diagonais são iguais a 1 e todos os outros valores são iguais a 0.</para>
          <para>Como exemplo de como uma matriz de duas linhas e duas colunas é calculada, suponhamos que o intervalo A1:B2 contenha as letras a, b, c e d que representem quaisquer quatro números. A tabela a seguir mostra o inverso da matriz A1:B2. 

</para>
          <list type="table">
            <item>
              <term>Linha 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Linha 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>O MInverse</b> é calculado com uma precisão de aproximadamente 16 dígitos, o que pode levar a um pequeno erro numérico quando o cancelamento não for concluído. </para>
          <para>Algumas matrizes quadradas não podem ser invertidas e retornarão o valor de erro #NÚM! valor de erro com <b>MInverse</b>. O determinante de uma matriz que não pode ser invertida é 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores - uma matriz ou uma referência a células que contenham números. Esses números representam uma série de pagamentos (valores negativos) e receita (valores positivos) que ocorrem em períodos regulares.</param>
        <param name="Arg2">Taxa_financ - a taxa de juros paga sobre o dinheiro usado nos fluxos de caixa.</param>
        <param name="Arg3">Taxa_reinvest - a taxa de juros recebida sobre os fluxos de caixa com o reinvestimento deles.</param>
        <summary>Retorna a taxa interna modificada de retorno de uma série de fluxos de caixa periódicos. MTIR considera o custo do investimento e os juros recebidos com o reinvestimento do caixa.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os valores devem conter pelo menos um valor positivo e um valor negativo para calcular a taxa interna de retorno modificada. Caso contrário, <b>MIrr</b> retornará o #DIV/0! valor de erro. </para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>
            <b>MIrr</b> usa a ordem dos valores para interpretar a ordem dos fluxos de caixa. Não esqueça de inserir os valores de pagamentos e receita na sequência desejada e com os sinais corretos (valores positivos para caixa recebido e valores negativos para caixa pago). </para>
          <para>Se n for o número de fluxos de caixa em valores, frate será o finance_rate e rrate será o reinvest_rate, então a fórmula para <b>MIrr</b> será: </para>
          <para>Figura 1: Fórmula do método MIrr</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1, matriz2 - as matrizes que você deseja multiplicar.</param>
        <param name="Arg2">Matriz1, matriz2 - as matrizes que você deseja multiplicar.</param>
        <summary>Retorna o produto matriz de duas matrizes. O resultado é uma matriz com o mesmo número de linhas como matriz1 e o mesmo número de colunas como matriz2.</summary>
        <returns>To be added.</returns>
        <remarks><para>O número de colunas na matriz1 deve ser igual ao número de linhas na matriz2 e ambas devem conter apenas números.</para>
          <para>Matriz1 e matriz2 podem ser fornecidas como intervalos de células, constantes da matriz ou referências.</para>
          <para>
            <b>MMult</b> retorna o #VALUE! quando: </para>
          <para>Alguma célula está vazia ou contém texto.</para>
          <para>O número de colunas na matriz1 é diferente do número da linhas na matriz2.</para>
          <para>O tamanho da matriz resultante é igual a ou maior que um total de 5.461 células.</para>
          <para>A matriz do produto de matriz a de duas matrizes b e c é: </para>
          <para>Figura1: Matriz do produto matrix de duas matrizes b e c</para>
          <para> </para>
          <para> </para>
          <para>onde i é o número da linha e j é o número da coluna.</para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 argumentos para os quais você deseja calcular o modo. Você também pode usar uma única matriz ou referência a uma matriz em vez de argumentos separados por ponto-e-vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o valor que ocorre com mais frequência, ou repetitivo, em uma matriz ou intervalo de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> métodos e.</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se o conjunto de dados não contiver pontos de dados duplicados, <b>Mode</b> retornará o valor de erro #N/A.</para>
          <para>
            <b>Observação</b>: a <b>função Mode</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média que é a média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median que é o número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4. </description>
            </item>
            <item>
              <description>Modo que é o número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 - O primeiro argumento de número para o qual você deseja calcular o modo.</param>
        <param name="Arg2">Número2 - Número30 - Argumentos de número 2 a 30 para os quais você deseja calcular o modo. Use também uma matriz única ou uma referência a uma matriz, em vez de argumentos separados por vírgulas.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna uma matriz vertical dos valores que ocorrem com mais frequência, ou repetitivos, em uma matriz ou intervalo de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se o conjunto de dados não contiver pontos de dados <b>duplicados, Mode_Mult</b> retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número1, número2, ... - argumentos 1 a 30 para os quais é preciso calcular o modo. Use também uma matriz única ou uma referência de uma matriz em vez de argumentos separados por vírgulas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna o valor que ocorre com mais frequência, ou repetitivo, em uma matriz ou intervalo de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se um argumento de matriz ou de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; contudo, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se o conjunto de dados não contiver pontos de dados <b>duplicados, Mode_Sngl</b> retornará o valor de erro #N/A.</para>
          <para>
            <b>Observação</b>: a <b>Mode_Sngl</b> mede a tendência central, que é o local do centro de um grupo de números em uma distribuição estatística. Estas são as três medidas de tendência central mais comuns:</para>
          <list type="bullet">
            <item>
              <description>Média A média aritmética e é calculada adicionando um grupo de números e dividindo pela contagem desses números. Por exemplo, a média de 2, 3, 3, 5, 7 e 10 é 30 dividido por 6, que é 5. </description>
            </item>
            <item>
              <description>Median O número intermediário de um grupo de números; ou seja, metade dos números tem valores maiores do que a mediana e metade dos números têm valores menores que a mediana. Por exemplo, a mediana de 2, 3, 3, 5, 7 e 10 é 4. </description>
            </item>
            <item>
              <description>Modo O número mais frequente em um grupo de números. Por exemplo, o modo de 2, 3, 3, 5, 7 e 10 é 3.</description>
            </item>
          </list>
          <para>Para uma distribuição simétrica de um grupo de números, estas três medidas de tendência central são as mesmas. Para uma distribuição enviesada de um grupo de números, elas podem ser diferentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor a ser arredondado.</param>
        <param name="Arg2">Múltiplo - o múltiplo para o qual você deseja arredondar o número.</param>
        <summary>Retorna um número arredondado para o múltiplo desejado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound</b> se levantará, longe de zero, se o restante do número dividido por vários for maior ou igual a metade do valor de vários.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 29 valores para os quais você deseja obter o multinômio.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a proporção do fatorial de uma soma de valores em relação ao produto dos fatoriais.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>MultiNomial</b> retornará o #VALUE! valor de erro. </para>
          <para>Se qualquer argumento for menor que zero, <b>MultiNomial</b> retornará o #NUM! valor de erro. </para>
          <para>O multinômio é: 

 </para>
          <para>Figura 1: Equação para o método MultiNomial</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Integer especificando a dimensão da matriz de unidade que você deseja retornar.</param>
        <summary>Retorna a matriz de unidade para a dimensão especificada.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm_f - o número de falhas.</param>
        <param name="Arg2">Núm_s - o número limite de sucessos.</param>
        <param name="Arg3">Probabilidade_s - a probabilidade de sucesso.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>NegBinom_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna a distribuição binomial negativa. <b>NegBinom_Dist</b> retorna a probabilidade de que haverá falhas number_f antes do sucesso number_s-th, quando a probabilidade constante de um sucesso for probability_s. Esta função é semelhante à distribuição binomial, com a exceção de que o número de sucessos é fixo e o número de tentativas é variável. Como na distribuição binomial, as tentativas são consideradas independentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Por exemplo, você precisa localizar 10 pessoas com reflexos excelentes e sabe que a probabilidade de que um candidato tenha essas qualificações é de 0,3. <b>NegBinom_Dist</b> calcula a probabilidade de que você entreviste um determinado número de candidatos não qualificados antes de localizar todos os 10 candidatos qualificados: </para>
          <para>Número_f e número_s são truncados para inteiros.</para>
          <para>Se algum argumento não for numerado, <b>NegBinom_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probability_s &lt; 0 ou se probabilidade &gt; 1, <b>NegBinom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_f &lt; 0 ou number_s &lt; 1, <b>NegBinom_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a distribuição binomial negativa é: </para>
          <para>Figura 1: Equação para a distribuição binomial negativa</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>x é number_f, r é number_s e p é probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm_f - o número de falhas.</param>
        <param name="Arg2">Núm_s - o número limite de sucessos.</param>
        <param name="Arg3">Probabilidade_s - a probabilidade de sucesso.</param>
        <summary>Retorna a distribuição binomial negativa. NegBinomDist retorna a probabilidade de que haverá falhas number_f antes do sucesso number_s-th, quando a probabilidade constante de um sucesso for probability_s. Esta função é semelhante à distribuição binomial, com a exceção de que o número de sucessos é fixo e o número de tentativas é variável. Como na distribuição binomial, as tentativas são consideradas independentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Por exemplo, você precisa localizar 10 pessoas com reflexos excelentes e sabe que a probabilidade de que um candidato tenha essas qualificações é de 0,3. <b>NegBinomDist</b> calcula a probabilidade de que você entreviste um determinado número de candidatos não qualificados antes de localizar todos os 10 candidatos qualificados. </para>
          <para>Número_f e número_s são truncados para inteiros.</para>
          <para>Se algum argumento não for numerado, <b>NegBinomDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probability_s &lt; 0 ou se probabilidade &gt; 1, <b>NegBinomDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se number_f &lt; 0 ou number_s &lt; 1, <b>NegBinomDist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a distribuição binomial negativa é: </para>
          <para>Figura 1: Equação para a distribuição binomial negativa</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>x é number_f, r é number_s e p é probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_inicial - uma data que representa a data inicial.</param>
        <param name="Arg2">Data_final - a data que representa a data final.</param>
        <param name="Arg3">Feriados - um intervalo opcional com uma ou mais datas a serem excluídas do calendário de trabalho, como feriados estaduais, federais e facultativos. A lista pode ser um intervalo de células que contém as datas ou uma constante de matriz dos números de série que representam as datas.</param>
        <summary>Retorna o número de dias úteis inteiros entre data_inicial e data_final. Dias úteis excluem finais de semana e qualquer data identificada como feriado. Use <b>NetworkDays</b> para calcular os benefícios dos funcionários acumulados com base no número de dias trabalhados durante um termo específico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto.</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Se qualquer argumento não for uma data válida, <b>NetworkDays</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - a data de início para a qual a diferença deve ser calculada. A data_inicial pode ser anterior, igual ou posterior à data_final.</param>
        <param name="Arg2">End_date - a data de término para a qual a diferença deve ser calculada. A data_inicial pode ser anterior, igual ou posterior à data_final.</param>
        <param name="Arg3">Fim de semana - Indica os dias da semana que são dias de fim de semana e não estão incluídos no número de dias úteis inteiros entre start_date e end_date. Final de semana é um número ou cadeia de caracteres que especifica quando ocorre o final de semana.</param>
        <param name="Arg4">Feriados - Um conjunto opcional de uma ou mais datas que devem ser excluídas do calendário do dia de trabalho. Feriados estão em um intervalo de células que contêm as datas ou uma constante de matriz dos valores de série que representam essas datas. A ordem dos valores de série ou datas em feriados pode ser arbitrária.</param>
        <summary>Retorna o número de dias úteis inteiros entre duas datas, usando parâmetros para indicar quais e quantos dias são finais de semana. Finais de semana e quaisquer outros dias que sejam especificados como feriados não são considerados como dias úteis.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a data_inicial for posterior à data_final, o valor de retorno será negativo e a magnitude será o número de dias úteis inteiros.</para>
          <para>Se start_date estiver fora do intervalo para o valor base de data <b>atual,</b> NetworkDays_Intl retornará o #NUM! valor de erro. </para>
          <para>Se end_date estiver fora do intervalo para o valor base de data <b>atual, NetworkDays_Intl</b> retornará o #NUM! valor de erro. </para>
          <para>Se uma cadeia de caracteres de fim de semana tiver um comprimento inválido ou contiver <b>caracteres inválidos, NetworkDays_Intl</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa_efetiva - a taxa de juros efetiva.</param>
        <param name="Arg2">Npera - o número de períodos compostos por ano.</param>
        <summary>Retorna a taxa de juros anual nominal, dados a taxa efetiva e o número de períodos compostos por ano.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npera é truncado para que apareça como um número inteiro.</para>
          <para>Se um dos argumentos não for numerado, <b>Nominal</b> retornará a #VALUE! valor de erro. </para>
          <para>Se effect_rate ≤ 0 ou se npery &lt; 1, <b>Nominal</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>Nominal</b> está relacionado <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> como mostrado na seguinte equação: </para>
          <para>Figura 1: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor para o qual você deseja a distribuição.</param>
        <param name="Arg2">Média - A média aritmética da distribuição.</param>
        <param name="Arg3">Desv_padrão - O desvio padrão da distribuição.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>Norm_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de massa de probabilidade.</param>
        <summary>Retorna a distribuição normal da média e desvio padrão especificados. Esta função tem uma grande variedade de aplicações em estatística, incluindo teste de hipóteses.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se média ou standard_dev for não numerada, <b>Norm_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se standard_dev ≤ 0, <b>Norm_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se média = 0, standard_dev = 1 e cumulativa = <b>true</b> <b>,</b> Norm_Dist retorna a distribuição normal padrão, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . </para>
          <para>A equação para a função de densidade normal (cumulativa = <b>false</b>) é: </para>
          <para>Figura 1: Equação para a função de densidade normal</para>
          <para> </para>
          <para> </para>
          <para>Quando cumulativa = <b>true</b>, a fórmula é a integral do infinito negativo para x da fórmula determinada.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - uma probabilidade correspondente à distribuição normal.</param>
        <param name="Arg2">Média - A média aritmética da distribuição.</param>
        <param name="Arg3">Desv_padrão - O desvio padrão da distribuição.</param>
        <summary>Retorna o inverso da distribuição cumulativa normal para a média especificada e o desvio padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numérico, <b>Norm_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; = 0 ou se probabilidade = 1, Norm_Inv &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>Se standard_dev ≤ 0, <b>Norm_Inv</b> retorna o #NUM! valor de erro. </para>
          <para>Se média = 0 e standard_dev = 1, <b>Norm_Inv</b> usar a distribuição normal padrão (consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Dado um valor para probabilidade, <b>Norm_Inv</b> busca esse valor x de forma que NORM_DIST(x, média, standard_dev, TRUE) = probabilidade. Assim, a precisão <b>de Norm_Inv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z - o valor cuja distribuição deve ser feita.</param>
        <param name="Arg2">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>Norm_S_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de massa de probabilidade.</param>
        <summary>Retorna a função de distribuição cumulativa normal padrão. A distribuição tem uma média igual a 0 (zero) e um desvio padrão de um. Use esta função no lugar de uma tabela de áreas de curva normal padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se z não for numérico, <b>Norm_S_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>A equação para a função de densidade normal padrão é: 

 </para>
          <para>Figura 1: Equação para a função de densidade normal padrão</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - uma probabilidade correspondente à distribuição normal.</param>
        <summary>Retorna o inverso da distribuição cumulativa normal padrão. A distribuição tem uma média igual a 0 (zero) e um desvio padrão de um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a probabilidade não for numérica, <b>Norm_S_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou se probabilidade &gt; 1, <b>Norm_S_Inv</b> retornará o #NUM! valor de erro.</para>
          <para>Dado um valor para probabilidade, <b>Norm_S_Inv</b> procura esse valor z de NORM_S_DIST(z) = probabilidade. Assim, a precisão <b>de Norm_S_Inv</b>depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . <b>Norm_S_Inv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido após 100 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor cuja distribuição é desejada.</param>
        <param name="Arg2">Média - a média aritmética da distribuição.</param>
        <param name="Arg3">Desv_padrão - o desvio padrão da distribuição.</param>
        <param name="Arg4">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>NormDist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de massa de probabilidade.</param>
        <summary>Retorna a distribuição normal para a média e o desvio padrão especificados. Esta função é bastante aplicada em estatísticas, incluindo testes de hipóteses.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se média ou standard_dev for não numerada, <b>NormDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se standard_dev ≤ 0, <b>NormDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se média = 0, standard_dev = 1 e cumulativa = <b>true</b>, <b>NormDist</b> retorna a distribuição normal padrão, <b>NormDist</b>. </para>
          <para>A equação para a função de densidade normal (cumulativa = <b>false</b>) é: </para>
          <para>Figura 1: Equação para a função de densidade normal</para>
          <para> </para>
          <para> </para>
          <para>Quando cumulativa = <b>true</b>, a fórmula é a integral do infinito negativo para x da fórmula determinada.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade correspondente à distribuição normal.</param>
        <param name="Arg2">Média - a média aritmética da distribuição.</param>
        <param name="Arg3">Desv_padrão - o desvio padrão da distribuição.</param>
        <summary>Retorna o inverso da distribuição cumulativa normal para a média especificada e o desvio padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> método.</para>
          <para>Se algum argumento não for numerado, <b>NormInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou se probabilidade &gt; 1, <b>NormInv</b> retorna o #NUM! valor de erro. </para>
          <para>Se standard_dev ≤ 0, <b>NormInv</b> retornará o #NUM! valor de erro. </para>
          <para>Se média = 0 e standard_dev = 1, <b>NormInv</b> usa a distribuição normal padrão (consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> ). </para>
          <para>Dado um valor para probabilidade, <b>NormInv</b> procura esse valor x de forma que NORMDIST(x, mean, standard_dev, TRUE) = probabilidade. Assim, a precisão <b>de NormInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>NormInv</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido após 100 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z - o valor cuja distribuição é desejada.</param>
        <summary>Retorna a função de distribuição cumulativa normal padrão. A distribuição tem uma média igual a 0 (zero) e um desvio padrão de um. Use esta função no lugar de uma tabela de áreas de curva normal padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> método.</para>
          <para>Se z não for numerado, <b>NormSDist</b> retornará o #VALUE! valor de erro. </para>
          <para>A equação para a função de densidade normal padrão é: 

 </para>
          <para>Figura 1: Equação para a função de densidade normal padrão</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade correspondente à distribuição normal.</param>
        <summary>Retorna o inverso da distribuição padrão cumulativa normal. A distribuição tem uma média de zero e um desvio padrão de um.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> método.</para>
          <para>Se probabilidade não for numerada, <b>NormSInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; = 0 ou se probabilidade &gt; = 1, <b>NormSInv</b> retorna o #NUM! valor de erro.</para>
          <para>Dado um valor para probabilidade, <b>NormSInv</b> procura esse valor z de forma que NORMSDIST(z) = probabilidade. Assim, a precisão <b>de NormSInv</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros por período.</param>
        <param name="Arg2">Pgto - o pagamento feito a cada período; não pode mudar durante a vigência da anuidade. Geralmente, pgto contém o capital e os juros e nenhuma outra tarifa ou taxas.</param>
        <param name="Arg3">Vp - o valor presente ou a soma total correspondente ao valor presente de uma série de pagamentos futuros.</param>
        <param name="Arg4">Vf - o valor futuro, ou o saldo, que você deseja obter depois do último pagamento. Se vf for omitido, será considerado 0 (o valor futuro de um empréstimo, por exemplo, é 0).</param>
        <param name="Arg5">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos.</param>
        <summary>Retorna o número de períodos de um investimento de acordo com os pagamentos periódicos e constantes e com uma taxa de juros constante.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de desconto em um período de tempo.</param>
        <param name="Arg2">Valor1, valor2, ... - 1 a 29 argumentos representando os pagamentos e a receita.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula o valor líquido atual de um investimento usando uma taxa de desconto e uma série de pagamentos futuros (valores negativos) e receita (valores positivos)</summary>
        <returns>To be added.</returns>
        <remarks><para>Valor1, valor2, ... devem ocorrer no mesmo espaço de tempo e no final de cada período.</para>
          <para>
            <b>O Npv</b> usa a ordem de valor1, value2, ... para interpretar a ordem dos fluxos de caixa. Não esqueça de inserir os valores de pagamento e de receita na sequência correta. </para>
          <para>Os argumentos que forem números, células vazias, valores lógicos ou representações de números em texto serão contados; os argumentos que forem valores de erro ou texto que não possa ser convertido em números serão ignorados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números da matriz ou referência serão contados. Células vazias, valores lógicos, valores de texto ou de erro na matriz ou referência são ignorados.</para>
          <para>O <b>investimento Npv</b> começa um período antes da data do fluxo de caixa value1 e termina com o último fluxo de caixa na lista. O <b>cálculo Npv</b> é baseado em fluxos de caixa futuros. Se o primeiro fluxo de caixa ocorrer no início do primeiro período, o primeiro valor deverá ser adicionado ao resultado <b>Npv,</b> não incluído nos argumentos values. Para obter mais informações, consulte os exemplos abaixo. </para>
          <para>Se n for o número de fluxos de caixa na lista de valores, a fórmula para <b>Npv</b> será: </para>
          <para>Figura 1: Fórmula para o método Npv</para>
          <para> </para>
          <para> </para>
          <para>
            <b>O Npv</b> é semelhante à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> função (valor atual). A principal diferença entre o VP e o <b>vpl</b> é que permite que os fluxos de caixa comecem no final ou <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> no início do período. Ao contrário dos valores de fluxo de caixa <b>Npv</b> variável, os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> fluxos de caixa devem ser constantes durante todo o investimento. Para obter informações sobre anuidades e funções financeiras, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . </para>
          <para>
            <b>O Npv</b> também está relacionado à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> função (taxa interna de retorno). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> é a taxa para a qual <b>o Npv</b> é igual a zero: NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadeia de caracteres que representa o número que você deseja converter.</param>
        <param name="Arg2">Caractere usado como separador decimal na cadeia de caracteres.</param>
        <param name="Arg3">Caractere usado como separador de grupo na cadeia de caracteres.</param>
        <summary>Converte texto em número de maneira independente da localidade.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número octal que você deseja converter. Núm não pode conter mais de 10 caracteres. O bit mais significativo de núm é o bit de sinal. Os 29 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>o Oct2Bin</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número octal em binário.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número for negativo, <b>Oct2Bin</b> ignorará os locais e retornará um número binário de 10 caracteres. </para>
          <para>Se núm for negativo, não poderá ser menor do que 7777777000, e se núm for positivo, não poderá ser maior que 777.</para>
          <para>Se o número não for um número octal válido, <b>Oct2Bin</b> retornará o #NUM! valor de erro. </para>
          <para>Se <b>o Oct2Bin</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>o Oct2Bin</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais for negativo, <b>Oct2Bin</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número octal que você deseja converter. Núm não pode conter mais de 10 caracteres octais (30 bits). O bit mais significativo de núm é o bit de sinal. Os 29 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <summary>Converte um número octal em decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número não for um número octal válido, <b>o Oct2Dec</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número octal que você deseja converter. Núm não pode conter mais de 10 caracteres octais (30 bits). O bit mais significativo de núm é o bit de sinal. Os 29 bits restantes são bits de magnitude. Os números negativos são representados com o uso de notação de complemento a dois.</param>
        <param name="Arg2">Casas - o número de caracteres a ser usado. Se locais for omitido, <b>Oct2Hex</b> usará o número mínimo de caracteres necessário. Casas é útil para preencher o valor retornado com 0s (zeros) à esquerda.</param>
        <summary>Converte um número octal em hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o número for negativo, <b>Oct2Hex</b> ignorará os locais e retornará um número hexadecimal de 10 caracteres. </para>
          <para>Se o número não for um número octal válido, <b>Oct2Hex</b> retornará o #NUM! valor de erro. </para>
          <para>Se <b>Oct2Hex</b> exigir mais do que os caracteres de colocação, ele retornará o #NUM! valor de erro. </para>
          <para>Se casas não for um inteiro, será truncado.</para>
          <para>Se os locais não for numerados, <b>Oct2Hex</b> retornará o #VALUE! valor de erro. </para>
          <para>Se os locais são negativos, <b>Oct2Hex</b> retorna o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o valor a ser arredondado.</param>
        <summary>Retorna um número arredondado para o próximo número inteiro ímpar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se número não for númérico, <b>Odd</b> retornará a #VALUE! valor de erro. </para>
          <para>Independentemente do sinal de núm, um valor será arredondado quando for diferente de zero. Se núm for um inteiro ímpar, não haverá arredondamento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Emissão - a data de emissão do título.</param>
        <param name="Arg4">Prim_cupom - a data do primeiro cupom do título.</param>
        <param name="Arg5">Taxa - a taxa de juros do título.</param>
        <param name="Arg6">Lcr - o rendimento anual do título.</param>
        <param name="Arg7">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg8">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg9">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o preço por valor nominal de R$ 100 de um título que tem um primeiro período incompleto (curto ou longo).</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, emissão, prim_cupom e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento, emissão ou first_coupon não for uma data válida, <b>OddFPrice</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se yld &lt; 0, <b>OddFPrice</b> retornará o #NUM! valor de erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>OddFPrice</b> retornará o #NUM! valor de erro. </para>
          <para>A condição de data a seguir deve ser atendida; caso contrário, <b>OddFPrice</b> retorna o #NUM! valor de erro: </para>
          <para>problema de &gt; liquidação first_coupon &gt; &gt; vencimento</para>
          <para> </para>
          <para>
            <b>OddFPrice</b> é calculado da seguinte maneira: Primeiro cupom curto e ímpar:</para>
          <para>Figura 1: Primeiro cupom curto ímpar</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Um = número de dias desde o início do período de cupom até a data de liquidação (dias acumulados).</para>
          <para>DSC = número de dias da liquidação até a próxima data do cupom.</para>
          <para>DFC = número de dias desde o início do primeiro cupom ímpar até a primeira data do cupom.</para>
          <para>E = número de dias no período do cupom.</para>
          <para>N = número de cupons a pagar entre a data de liquidação e a data de resgate. (Se esse número contiver uma fração, ele será gerado para o próximo número inteiro.)</para>
          <para>Primeiro cupom long ímpar:</para>
          <para>Figura 2: Primeiro cupom long ímpar</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Ai = número de dias a partir do início do ith, ou último, período de quase cupom dentro de um período ímpar.</para>
          <para>DCi = número de dias desde a datada (ou data de emissão) até o primeiro cupons (i = 1) ou número de dias em quase cupom (i = 2,..., i = NC).</para>
          <para>DSC = número de dias da liquidação até a próxima data do cupom.</para>
          <para>E = número de dias no período do cupom.</para>
          <para>N = número de cupons a pagar entre a primeira data real do cupom e a data de resgate. (Se esse número contiver uma fração, ele será gerado para o próximo número inteiro.)</para>
          <para>NC = número de períodos de quase cupom que se ajustam ao período ímpar. (Se esse número contiver uma fração, ele será gerado para o próximo número inteiro.)</para>
          <para>NLi = comprimento normal em dias do ith completo ou último período de cupons quase-cupom dentro de um período ímpar.</para>
          <para>Nq = número de períodos de cupons inteiros entre a data de liquidação e o primeiro cupom.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Emissão - a data de emissão do título.</param>
        <param name="Arg4">Prim_cupom - a data do primeiro cupom do título.</param>
        <param name="Arg5">Taxa - a taxa de juros do título.</param>
        <param name="Arg6">Pr - o preço do título.</param>
        <param name="Arg7">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg8">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg9">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o rendimento de um título com um período inicial incompleto (curto ou longo).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, emissão, prim_cupom e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento, emissão ou first_coupon não for uma data válida, <b>OddFYield</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se pr ≤ 0, <b>OddFYield</b> retornará o #NUM! valor de erro. </para>
          <para>Se base &lt; 0 ou se base &gt; 4, <b>OddFYield</b> retornará o #NUM! valor de erro. </para>
          <para>A condição de data a seguir deve ser atendida; caso contrário, <b>OddFYield</b> retorna o #NUM! valor de erro: </para>
          <para>problema de &gt; liquidação first_coupon &gt; &gt; vencimento</para>
          <para>Excel usa uma técnica iterativa para calcular <b>OddFYield</b>. Esta função usa o método Newton com base na fórmula usada para a função <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . O rendimento é alterado por 100 iterações até o preço estimado com o rendimento fornecido aproximar-se do preço. Consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> a fórmula que <b>OddFYield</b> usa.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Último_juros - a data do último cupom do título.</param>
        <param name="Arg4">Taxa - a taxa de juros do título.</param>
        <param name="Arg5">Lcr - o rendimento anual do título.</param>
        <param name="Arg6">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg7">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg8">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o preço por valor nominal de R$ 100 de um título que tem um último período de cupom incompleto (curto ou longo).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, último_juros e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento ou last_interest não for uma data válida, <b>OddLPrice</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se yld &lt; 0, <b>OddLPrice</b> retorna o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>OddLPrice</b> retornará o #NUM! valor de erro. </para>
          <para>A condição de data a seguir deve ser atendida; caso contrário, <b>OddLPrice</b> retorna o #NUM! valor de erro: </para>
          <para>liquidação &gt; &gt; de vencimento last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Último_juros - a data do último cupom do título.</param>
        <param name="Arg4">Taxa - a taxa de juros do título.</param>
        <param name="Arg5">Pr - o preço do título.</param>
        <param name="Arg6">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg7">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg8">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o rendimento de um título com um período final incompleto (curto ou longo).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, último_juros e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento ou last_interest não for uma data válida, <b>OddLYield</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se pr ≤ 0, <b>OddLYield</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>OddLYield</b> retornará o #NUM! valor de erro. </para>
          <para>A condição de data a seguir deve ser atendida; caso contrário, <b>OddLYield</b> retorna o #NUM! valor de erro: </para>
          <para>liquidação &gt; &gt; de vencimento last_interest </para>
          <para>
            <b>OddLYield</b> é calculado da seguinte maneira: </para>
          <para>Figura 1: Equação para o método OddLYield</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>Ai = número de dias acumulados para o período de ith, ou último, quase cupom dentro de um período ímpar contando a partir da última data de juros antes do resgate.</para>
          <para>DCi = número de dias contados no ith, ou último período de cupons, conforme delimitado pelo período do cupom real.</para>
          <para>NC = número de períodos de quase cupom que se encaixam no período ímpar; se esse número contiver uma fração, ele será gerado para o próximo número inteiro.</para>
          <para>NLi = comprimento normal em dias do ith, ou último período de cupons quase-cupom dentro do período de cupom ímpar.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logic1,logical2,... - 1 a 30 condições que você deseja testar que podem ser <b>verdadeiras</b> ou <b>falsas.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna <b>true</b> se qualquer argumento for <b>verdadeiro;</b> retorna <b>false</b> se todos os argumentos são <b>falsos</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser avaliadas como valores lógicos, como <b>true</b> ou <b>false,</b>ou em matrizes ou referências que contenham valores lógicos. </para>
          <para>Se um argumento de matriz ou referência contiver texto ou células vazias, esses valores serão ignorados.</para>
          <para>Se o intervalo especificado não contiver valores lógicos, <b>ou</b> retornará o #VALUE! valor de erro. </para>
          <para>Você pode usar uma <b>fórmula de matriz Or</b> para ver se um valor ocorre em uma matriz. Para inserir uma fórmula de matriz, pressione CTRL+SHIFT+ENTER.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna o objeto pai para o objeto especificado. Somente leitura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa de juros por período.</param>
        <param name="Arg2">Valor presente do investimento.</param>
        <param name="Arg3">Valor futuro desejado do investimento.</param>
        <summary>Retorna o número de períodos exigidos por um investimento para alcançar um valor especificado.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1 - um conjunto de valores independentes.</param>
        <param name="Arg2">Matriz2 - um conjunto de valores dependentes.</param>
        <summary>Retorna o coeficiente de correlação do momento do produto Pearson, r, um índice sem dimensão que varia de -1,0 a 1,0 inclusive e reflete a extensão de uma relação linear entre dois conjuntos de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, constantes de matriz ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, esses valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se matriz1 e matriz2 estão vazias ou têm um número diferente de pontos de dados, <b>Pearson</b> retorna o valor de erro #N/A. </para>
          <para>A fórmula do coeficiente de correlação do momento do produto Pearson, r, é: </para>
          <para>Figura 1: Coeficiente de correlação do momento do produto pearson</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa AVERAGE(array1) e AVERAGE(array2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou o intervalo de dados que define a posição relativa.</param>
        <param name="Arg2">K - o valor percentil no intervalo 0..1, inclusive.</param>
        <summary>Retorna o percentil k-ésimo dos valores de um intervalo. Você pode usar esta função para estabelecer um limite de aceitação. Por exemplo, pode decidir examinar candidatos com notas superiores ao percentil 90º.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> o método <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> and. </para>
          <para>Se a matriz estiver vazia, <b>Percentile</b> retornará o #NUM! valor de erro. </para>
          <para>Se k não fornumérico, <b>Percentile</b> retornará o #VALUE! valor de erro. </para>
          <para>Se k for &lt; 0 ou se k &gt; 1, <b>Percentile</b> retornará o #NUM! valor de erro. </para>
          <para>Se k não for um múltiplo de 1/(n - 1), <b>Percentile</b> interpola para determinar o valor no percentil k-th.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - A matriz ou intervalo de dados que define a posição relativa.</param>
        <param name="Arg2">K - O valor percentil no intervalo 0,1, exclusivo.</param>
        <summary>Retorna o k-ésimo percentil de valores em um intervalo, onde k está no intervalo 0.. 1, exclusivo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Percentile_Exc</b> retornará o #NUM! valor de erro </para>
          <para>Se k não for numerado, <b>Percentile_Exc</b> retornará o #VALUE! valor de erro. </para>
          <para>Se k for ≤ 0 ou se k ≥ 1, <b>Percentile_Exc</b> retornará o #NUM! valor de erro. </para>
          <para>Se k não for um múltiplo de 1/(n - <b>1),</b> Percentile_Exc interpola para determinar o valor no percentil k-th. </para>
          <para>
            <b>Percentile_Exc</b> interpolar quando o valor do percentil especificado estiver entre dois valores na matriz. Se ele não puder interpolar para o percentil, k especificado, Excel retornará #NUM! .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - A matriz ou intervalo de dados que define a posição relativa.</param>
        <param name="Arg2">K - o valor do percentil no intervalo 0.. 1, inclusive.</param>
        <summary>Retorna o k-ésimo percentil de valores em um intervalo. Você pode usar esta função para estabelecer um limite de aceitação. Por exemplo, você pode examinar candidatos cuja pontuação esteja acima do percentil 90.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Percentile_Inc</b> retornará o #NUM! valor de erro. </para>
          <para>Se k não for numerado, <b>Percentile_Inc</b> retornará o #VALUE! valor de erro. </para>
          <para>Se k for &lt; 0 ou se k &gt; 1, <b>Percentile_Inc</b> retornará o #NUM! valor de erro. </para>
          <para>Se k não for um múltiplo de 1/(n - <b>1),</b> Percentile_Inc interpola para determinar o valor no percentil k-th.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou o intervalo de dados com valores numéricos que define a posição relativa.</param>
        <param name="Arg2">X - o valor cuja ordem você deseja saber.</param>
        <param name="Arg3">Significância - um valor opcional que identifica o número de dígitos significativos do valor porcentual retornado. Se omitido, <b>PercentRank</b> usará três dígitos (0.xxx).</param>
        <summary>Retorna a ordem de um valor em um conjunto de dados como uma porcentagem do conjunto de dados. Essa função pode ser usada para avaliar a posição relativa de um valor em um conjunto de dados. Por exemplo, você pode usar <b>PercentRank</b> para avaliar a posição de uma pontuação de teste de capacidade entre todas as pontuações do teste.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> métodos e.</para>
          <para>Se a matriz estiver vazia, <b>PercentRank</b> retornará o #NUM! valor de erro. </para>
          <para>Se &lt; significância 1, <b>PercentRank</b> retornará o #NUM! valor de erro. </para>
          <para>Se x não corresponder a um dos valores na matriz, <b>PercentRank</b> interpola para retornar a classificação percentual correta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - A matriz ou intervalo de dados, com valores numéricos, que define a posição relativa.</param>
        <param name="Arg2">X - o valor cuja classificação você deseja saber.</param>
        <param name="Arg3">Significância - Um valor que identifica o número de dígitos significativos para o valor percentual retornado. Se omitido, <b>PercentRank_Exc</b> usa três dígitos (0.xxx).</param>
        <summary>Retorna a posição de um valor em um conjunto de dados como uma porcentagem (0.. 1, exclusivo) do conjunto de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>PercentRank_Exc</b> retornará o #NUM! valor de erro. </para>
          <para>Se &lt; significância 1, <b>PercentRank_Exc</b> retorna o #NUM! valor de erro. </para>
          <para>Se x não corresponder a um dos valores na <b>matriz,</b> PercentRank_Exc interpola para retornar a classificação percentual correta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - A matriz ou intervalo de dados, com valores numéricos, que define a posição relativa.</param>
        <param name="Arg2">X - o valor cuja classificação você deseja saber.</param>
        <param name="Arg3">Significância - um valor opcional que identifica o número de dígitos significativos do valor de porcentagem retornado. Se omitido, <b>PercentRank_Inc</b> usa três dígitos (0.xxx).</param>
        <summary>Retorna a posição de um valor em um conjunto de dados como uma porcentagem (0..1, inclusive) do conjunto de dados. Esta função pode ser usada para avaliar a posição relativa de um valor em um conjunto de dados. Por exemplo, você pode usar <b>PercentRank_Inc</b> para avaliar a posição de uma pontuação de teste de capacidade entre todas as pontuações do teste.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>PercentRank_Inc</b> retornará o #NUM! valor de erro. </para>
          <para>Se &lt; significância 1, <b>PercentRank_Inc</b> retornará o #NUM! valor de erro. </para>
          <para>Se x não corresponder a um dos valores na <b>matriz,</b> PercentRank_Inc interpola para retornar a classificação percentual correta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - um inteiro que descreve o número de objetos.</param>
        <param name="Arg2">Núm_escolhido - um inteiro que descreve o número de objetos em cada permuta.</param>
        <summary>Retorna o número de permutas de um determinado número de objetos que podem ser selecionadas a partir do número de objetos. Uma permuta é qualquer conjunto ou subconjunto de objetos ou eventos em que a ordem interna é significativa. Permutas são diferentes de combinações, nas quais a ordem interna não é significativa. Use esta função para cálculos de probabilidade no estilo de loteria.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ambos os argumentos são truncados para inteiros.</para>
          <para>Se número ou number_chosen for não numerado, <b>Permut</b> retornará o #VALUE! valor de erro. </para>
          <para>Se o número ≤ 0 ou se number_chosen &lt; 0, <b>Permut</b> retornará o #NUM! valor de erro. </para>
          <para>Se o &lt; número number_chosen, <b>Permut</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para o número de permutas é: 

 </para>
          <para>Figura 1: Equação para o número de permutações</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número total de objetos.</param>
        <param name="Arg2">Número de objetos em cada permutação.</param>
        <summary>Retorna o número de permutações para um determinado número de objetos (com repetições) que podem ser selecionados do total de objetos.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número para o qual você deseja a densidade da distribuição normal padrão.</param>
        <summary>Retorna o valor da função de densidade de uma distribuição normal padrão.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referência - uma cadeia de texto ou uma referência a uma única célula ou a um intervalo de células que contenha uma cadeia de texto furigana.</param>
        <summary>Extrai os caracteres fonéticos (furigana) de uma cadeia de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a referência for um intervalo de células, a cadeia de texto furigana na célula do canto superior esquerdo do intervalo será retornada. </para>
          <para>Se a referência for um intervalo de células não-adjacentes, o valor de erro #N/D será retornado.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o número 3,14159265358979, a constante matemática pi, com precisão de 15 dígitos.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros do empréstimo.</param>
        <param name="Arg2">Nper - o número total de pagamentos do empréstimo.</param>
        <param name="Arg3">Vp - o valor presente ou valor total correspondente ao valor atual de uma série de pagamentos futuros; também conhecido como principal.</param>
        <param name="Arg4">Vf - o valor futuro, ou o saldo, que você deseja obter depois do último pagamento. Se vf for omitido, será considerado 0, ou seja, o valor futuro de um empréstimo será 0.</param>
        <param name="Arg5">Tipo - o número 0 (zero) ou 1 e indica as datas de vencimento dos pagamentos.</param>
        <summary>Calcula o pagamento de um empréstimo com base em pagamentos constantes e em uma taxa de juros constante.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obter uma descrição mais completa dos argumentos em <b>Pmt</b>, consulte a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> função.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>O pagamento retornado pelo <b>Pmt</b> inclui principal e juros, mas nenhum imposto, pagamentos de reserva ou taxas às vezes associados a empréstimos. </para>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se fizer pagamentos mensais de um empréstimo de quatro anos com taxa de juros anual de 12%, use 12%/12 para taxa e 4*12 para nper. Se você fizer pagamentos anuais para o mesmo empréstimo, use 12% para taxa e 4 para nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o número de eventos.</param>
        <param name="Arg2">Média - o valor numérico esperado.</param>
        <param name="Arg3">Cumulativo - um valor lógico que determina o formato da distribuição de probabilidade retornada. Se cumulativo for VERDADEIRO, POISSON retornará a probabilidade Poisson cumulativa em que o número de eventos aleatórios ocorrendo será entre zero e x inclusive; se FALSO, retornará a função de probabilidade de massa em que o número de eventos ocorrendo será exatamente x</param>
        <summary>Retorna a distribuição Poisson. Uma aplicação comum da distribuição Poisson é prever o número de eventos em um período específico, como o número de carros que passam por um pedágio por minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se x não for um inteiro, ele será truncado.</para>
          <para>Se x ou média não for numerada, <b>Poisson</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>Poisson</b> retornará o #NUM! valor de erro. </para>
          <para>Se for ≤ 0, <b>Poisson</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>Poisson</b> é calculado da seguinte forma. </para>
          <para>Para cumulativo = <b>false</b>:</para>
          <para>Figura 1: Calculação quando cumulativa é false</para>
          <para> </para>
          <para> </para>
          <para>Para cumulativo = <b>true</b>:</para>
          <para>Figura 2: Calculação quando cumulativa for verdadeira</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o número de eventos.</param>
        <param name="Arg2">Média - O valor numérico esperado.</param>
        <param name="Arg3">Cumulativa - Um valor lógico que determina a forma da distribuição de probabilidade retornada. Se cumulativo for <b>verdadeiro,</b>Poisson_Dist retornará <b>a</b> probabilidade de Poisson acumulado de que o número de eventos aleatórios que ocorrerão será entre 0 (zero) e x inclusive; if <b>false</b>, it returns the Poisson probability mass function that the number of events occurring will be exactly x.</param>
        <summary>Retorna a distribuição Poisson. Uma aplicação comum da distribuição Poisson é prever o número de eventos por um determinado tempo, como o número de carros que devem chegar a um posto de pedágio em um minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x não for um inteiro, ele será truncado.</para>
          <para>Se x ou média não for numerada, <b>Poisson_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>Poisson_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se for ≤ 0, <b>Poisson_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>Poisson_Dist</b> é calculado da seguinte forma. </para>
          <para>Para cumulativo = <b>false</b>:</para>
          <para>Figura 1: Calculação quando cumulativa é false</para>
          <para> </para>
          <para> </para>
          <para>Para cumulativo = <b>true</b>:</para>
          <para>Figura 2: Calculação quando cumulativa for verdadeira</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - o número base. Pode ser qualquer número real.</param>
        <param name="Arg2">Potência - o expoente ao qual o número base é elevado.</param>
        <summary>Retorna o resultado de um número elevado a uma potência.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros por período.</param>
        <param name="Arg2">Per - o período e deve ser no intervalo de 1 a nper.</param>
        <param name="Arg3">Nper - o número total de períodos de pagamento em uma anuidade.</param>
        <param name="Arg4">Vp - o valor presente — o valor total correspondente ao valor atual de uma série de pagamentos futuros.</param>
        <param name="Arg5">Vf - o valor futuro, ou o saldo, que você deseja obter depois do último pagamento. Se vf for omitido, será considerado 0, ou seja, o valor futuro de um empréstimo será 0.</param>
        <param name="Arg6">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos.</param>
        <summary>Retorna o pagamento sobre o principal para um determinado período de um investimento baseado em pagamentos periódicos e constantes e em uma taxa de juros constante.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obter uma descrição mais completa dos argumentos em <b>Ppmt,</b>consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se fizer pagamentos mensais de um empréstimo de quatro anos com taxa de juros de 12% ao ano, use 12%/12 para taxa e 4*12 para nper. Se você fizer pagamentos anuais para o mesmo empréstimo, use 12% para taxa e 4 para nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Taxa - a taxa anual de cupom do título.</param>
        <param name="Arg4">Lcr - o rendimento anual do título.</param>
        <param name="Arg5">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg6">Frequência - o número de pagamentos de cupom por ano. Para pagamentos anuais, frequência = 1; para pagamentos semestrais, frequência = 2; para pagamentos trimestrais, frequência = 4.</param>
        <param name="Arg7">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o preço pelo valor nominal R$100 de um título que paga juros periódicos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, frequência e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>Price</b> retornará a #VALUE! valor de erro. </para>
          <para>Se yld &lt; 0 ou se taxa &lt; 0, <b>Price</b> retornará a #NUM! valor de erro. </para>
          <para>Se o resgate ≤ 0, <b>Price</b> retornará o #NUM! valor de erro. </para>
          <para>Se frequência for qualquer número diferente de 1, 2 ou 4, <b>Price</b> retornará a #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>Price</b> retornará a #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>Price</b> retornará a #NUM! valor de erro. <b>O</b> preço é calculado da seguinte forma: </para>
          <para>Figura 1: Método Equação para Preço</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>DSC = número de dias da liquidação até a próxima data do cupom.</para>
          <para>E = número de dias no período de cupom no qual a data de liquidação cai.</para>
          <para>N = número de cupons a pagar entre a data de liquidação e a data de resgate.</para>
          <para>Um = número de dias do início do período de cupom até a data de liquidação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Desconto - a taxa de desconto do título.</param>
        <param name="Arg4">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg5">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o preço por valor nominal de R$ 100,00 de um título descontado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>PriceDisc</b> retornará a #VALUE! valor de erro. </para>
          <para>Se o ≤ 0 ou se o resgate ≤ 0, <b>PriceDisc</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>PriceDisc</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>PriceDisc</b> retornará a #NUM! valor de erro. </para>
          <para>
            <b>PriceDisc</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação do método PriceDisc</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>B = número de dias no ano, dependendo do ano.</para>
          <para>DSM = número de dias de liquidação para vencimento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Emissão - a data de emissão do título, expressa como um número de série de data.</param>
        <param name="Arg4">Taxa - a taxa de juros do título na data de emissão.</param>
        <param name="Arg5">Lcr - o rendimento anual do título.</param>
        <param name="Arg6">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o preço pelo valor nominal R$100 de um título que paga juros no vencimento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, emissão e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento ou emissão não for uma data válida, <b>PriceMat</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se yld &lt; 0, <b>PriceMat</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>PriceMat</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>PriceMat</b> retornará o #NUM! valor de erro. <b>PriceMat</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação do método PriceMat</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>B = número de dias no ano, dependendo do ano.</para>
          <para>DSM = número de dias de liquidação para vencimento.</para>
          <para>DIM = número de dias de emissão para vencimento.</para>
          <para>Um = número de dias de problema para liquidação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Intervalo_x - o intervalo de valores numéricos de x aos quais há probabilidades associadas.</param>
        <param name="Arg2">Intervalo_prob - um conjunto de probabilidades associadas aos valores no intervalo_x.</param>
        <param name="Arg3">Limite_inferior - o limite inferior no valor para o qual deseja obter uma probabilidade.</param>
        <param name="Arg4">Limite_superior - o limite superior opcional no valor para o qual deseja obter uma probabilidade.</param>
        <summary>Retorna a probabilidade de os valores de um intervalo estarem entre dois limites. Se limite_superior não for fornecido, retornará a probabilidade dos valores do intervalo_x serem iguais ao limite_inferior.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum valor prob_range ≤ 0 ou se algum valor em prob_range &gt; 1, <b>Prob</b> retornará o #NUM! valor de erro. </para>
          <para>Se a soma dos valores em prob_range ¹ 1, <b>Prob</b> retornará a #NUM! valor de erro. </para>
          <para>Se upper_limit for omitido, <b>Prob</b> retornará a probabilidade de ser igual a lower_limit. </para>
          <para>Se x_range e prob_range um número diferente de pontos de dados, <b>Prob</b> retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 números a serem multiplicados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica todos os números fornecidos como argumentos e retorna o produto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos que forem números, valores lógicos ou representações de números em texto serão contados; os argumentos que forem valores de erro ou texto que não possa ser convertido em números provocarão erros. </para>
          <para>Se um argumento for uma matriz ou referência, apenas os números da matriz ou referência serão contados. Células vazias, valores lógicos, valores de texto ou de erro na matriz ou referência são ignorados.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto - texto entre aspas, uma fórmula que retorne texto ou uma referência a uma célula contendo texto ao qual você deseja aplicar maiúsculas em algumas partes.</param>
        <summary>Aplica maiúscula à primeira letra de uma cadeia de texto e a qualquer outra letra do texto que venha depois de qualquer caractere que não seja uma letra. Converte todas as outras letras em minúsculas.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taxa - a taxa de juros por período. Por exemplo, se você obtiver um empréstimo para compra de um automóvel com uma taxa de juros anual de 10% e fizer pagamentos mensais, sua taxa de juros mensal será de 10%/12, ou 0,83%.Você inseriria 10%/12 ou 0,83% ou 0,0083 na fórmula como taxa.</param>
        <param name="Arg2">Nper - o número total de períodos de pagamento em uma anuidade. Por exemplo, se você obtiver um empréstimo de quatro anos para compra de um automóvel e fizer pagamentos mensais, seu empréstimo terá 4*12 (ou 48) períodos. Você inseriria 48 na fórmula para nper.</param>
        <param name="Arg3">Pgto - o pagamento feito em cada período e não pode mudar durante a vigência da anuidade. Geralmente, pgto inclui o principal e os juros e nenhuma outra taxa ou tributo. Por exemplo, os pagamentos mensais de um empréstimo de R$ 10.000,00 para compra de um carro em quatro anos a 12% são de R$ 263,33. Você inseriria -263,33 na fórmula como pagto. Se pgto for omitido, você deverá incluir o argumento vf.</param>
        <param name="Arg4">Vf - o valor futuro ou um saldo em caixa que você deseja manter após o último pagamento. Se vf for omitido, ele será considerado 0 (o valor de um empréstimo, como 0). Por exemplo, se você deseja economizar R$ 50.000,00 para pagar um projeto especial em 18 anos, R$ 50.000,00 é o valor futuro. Você poderia fazer uma suposição conservadora na taxa de juros e determinar quanto precisa economizar mensalmente. Se vf for omitido, você deverá incluir o argumento pgto.</param>
        <param name="Arg5">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos.</param>
        <summary>Retorna o valor presente de um investimento. O valor presente é o valor total de uma série de pagamentos futuros. Por exemplo, quando você empresta dinheiro, o valor do empréstimo é o valor presente para o credor.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Verifique se você está sendo consistente quanto às unidades usadas para especificar taxa e nper. Se fizer pagamentos mensais de um empréstimo de quatro anos com taxa de juros de 12% ao ano, use 12%/12 para taxa e 4*12 para nper. Se você fizer pagamentos anuais para o mesmo empréstimo, use 12% para taxa e 4 para nper. </para>
          <para>As seguintes funções se aplicam a anuidades: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>VP</description>
            </item>
            <item>
              <term>VF</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Uma anuidade é uma série de pagamentos em dinheiro constantes feitos em um período contínuo. Por exemplo, um empréstimo para compra de um carro ou uma hipoteca é uma anuidade. Para obter mais informações, consulte a descrição de cada função de anuidade. </para>
          <para>Em funções de anuidade, saque, como um depósito em poupança, é representado por um número negativo; depósito recebidos, como um cheque de dividendos, é representados por um número positivo. Por exemplo, um depósito de R$ 1.000,00 no banco seria representado pelo argumento -1000 se você fosse o depositante e pelo argumento 1000 se você fosse o banco. </para>
          <para>O Microsoft Excel resolve um argumento financeiro em relação aos demais. Se a taxa não for 0, então: </para>
          <para>Figura 1: Equação quando a taxa não é 0</para>
          <para> </para>
          <para> </para>
          <para>Se a taxa for 0, então:</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou intervalo de célula de valores numéricos cujo valor quartil você deseja obter.</param>
        <param name="Arg2">Quarto - indica o valor a ser retornado.</param>
        <summary>Retorna o quartil do conjunto de dados. Quartis são comumente usados em dados de vendas e de pesquisas para dividir a população em grupos. Por exemplo, você pode usar <b>Quartil para</b> encontrar os 25% principais de renda em uma população.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> métodos e.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Valor mínimo</description>
            </item>
            <item>
              <term>1</term>
              <description>Primeiro quartil (25º percentil)</description>
            </item>
            <item>
              <term>2</term>
              <description>Valor médio (50º percentil)</description>
            </item>
            <item>
              <term>3</term>
              <description>Terceiro quartil (75º percentil)</description>
            </item>
            <item>
              <term>4 </term>
              <description>Valor máximo</description>
            </item>
          </list>
          <para>Se a matriz estiver vazia, <b>Quartil</b> retornará o #NUM! valor de erro. </para>
          <para>Se quarto não for um número inteiro, será truncado.</para>
          <para>Se quarto &lt; 0 ou se quarto &gt; 4, <b>Quartil retorna</b> o #NUM! valor de erro. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, e retorne o mesmo valor que Quartil quando quart for igual a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zero), 2 e 4, respectivamente. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - A matriz ou intervalo de células de valores numéricos para os quais você deseja o valor quartil.</param>
        <param name="Arg2">Quarto - O valor a ser retornado.</param>
        <summary>Retorna o quartil do conjunto de dados, com base em valores de percentil de 0..1, exclusive.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Quartile_Exc</b> retornará o #NUM! valor de erro. </para>
          <para>Se quarto não for um número inteiro, será truncado.</para>
          <para>Se quart ≤ 0 ou se quart ≥ <b>4,</b> Quartile_Exc retorna o #NUM! valor de erro. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, e retorne o mesmo valor que Quartile_Exc quando quart for igual a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zero), 2 e 4, respectivamente. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou intervalo de célula de valores numéricos cujo valor quartil você deseja obter.</param>
        <param name="Arg2">Quarto - O valor a ser retornado.</param>
        <summary>Retorna o quartil de um conjunto de dados com base em valores de percentil de 0..1, inclusive. Quartis são frequentemente usados em vendas e dados de pesquisa, para dividir as populações em grupos. Por exemplo, você pode usar QUARTILE_INC para localizar os 25% superiores de renda de uma população.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Quartile_Inc</b> retornará o #NUM! valor de erro. </para>
          <para>Se quarto não for um número inteiro, será truncado.</para>
          <para>Se quarto &lt; 0 ou se quarto 4, Quartile_Inc &gt; retorna o #NUM! <b></b> valor de erro. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, e retorne o mesmo valor que Quartile_Inc quando quart for igual a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zero), 2 e 4, respectivamente. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerador - o dividendo.</param>
        <param name="Arg2">Denominador - o divisor.</param>
        <summary>Retorna a parte inteira de uma divisão. Use esta função para descartar o resto de uma divisão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se um dos argumentos não for numerado, <b>Quotient</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ângulo - um ângulo em graus que você deseja converter.</param>
        <summary>Converte graus em radianos.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inferior - o menor inteiro que ALEATÓRIOENTRE retornará.</param>
        <param name="Arg2">Superior - o maior inteiro que ALEATÓRIOENTRE retornará.</param>
        <summary>Retorna um número aleatório inteiro entre os números especificados. Um novo número aleatório inteiro será retornado sempre que a planilha for calculada.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número cuja posição se deseja encontrar.</param>
        <param name="Arg2">Ref - uma matriz ou referência a uma lista de números. Valores não numéricos em ref são ignorados.</param>
        <param name="Arg3">Ordem - um número que especifica como posicionar um número em uma ordem.</param>
        <summary>Retorna a posição de um número em uma lista de números. A ordem de um número é seu tamanho em relação a outros valores de uma lista. (Se você fosse classificar a lista, a ordem do número seria a sua posição).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> métodos e.</para>
          <para>Se ordem for 0 ou omitido, o Microsoft Excel ordenará o número como se ref fosse uma lista classificada na ordem descendente.</para>
          <para>Se ordem for qualquer valor diferente de zero, o Microsoft Excel ordenará o número como se ref fosse uma lista classificada na ordem ascendente.</para>
          <para>
            <b>A</b> classificação dá aos números duplicados a mesma classificação. No entanto, a presença de números duplicados afeta a ordem dos números subsequentes. Por exemplo, em uma lista de números inteiros classificados em ordem crescente, se o número 10 aparecer duas vezes e tiver uma ordem de 5, então 11 teria uma ordem de 7 (nenhum número teria uma ordem de 6).</para>
          <para>Para algumas finalidades, é possível usar uma definição de ordem que considere os empates. No exemplo anterior, precisaríamos de uma ordem revista de 5,5 para o número 10. Isso pode ser feito adicionando o fator de correção a seguir ao valor retornado por <b>Rank</b>. Esse fator de correção é apropriado tanto para o caso em que a classificação é calculada em ordem decrescente (ordem = 0 ou omitida) ou ordem crescente (ordem = valor nãozero).</para>
          <para>Fator de correção para ranks=[COUNT(ref) + 1 – RANK(number, ref, 0) – RANK(number, ref, 1)]/2.</para>
          <para>No exemplo a seguir, RANK(A2,A1:A5,1) é igual a 3. O fator de correção é (5 + 1 – 2 – 3)/2 = 0,5 e a ordem revisada que considera o empate é 3 + 0,5 = 3,5. Se o número ocorrer apenas uma vez no ref, o fator de correção será 0, já que <b>Rank</b> não precisa ser ajustado para um empate.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - O número cuja posição você deseja localizar.</param>
        <param name="Arg2">Ref - Uma matriz de ou uma referência a uma lista de números. Valores não numéricos em referência são ignorados.</param>
        <param name="Arg3">Ordem - Um número que especifica como classificar o número. Se a ordem for 0 (zero) ou omitida, o Microsoft Excel ordenará o número como se a referência fosse uma lista classificada em ordem decrescente. Se a ordem for qualquer valor diferente de zero, o Microsoft Excel ordenará o número como se a referência fosse uma lista classificada em ordem crescente.</param>
        <summary>Retorna a posição de um número em uma lista de números, que é o seu tamanho em relação a outros valores na lista. Se mais de um valor tiver a mesma posição, a classificação média será retornada.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número - O número cuja posição você deseja localizar.</param>
        <param name="Arg2">Ref - Uma matriz de ou uma referência a uma lista de números. Valores não numéricos em referência são ignorados.</param>
        <param name="Arg3">Ordem - Um número que especifica como classificar o número.</param>
        <summary>Retorna a posição de um número em uma lista de números. A ordem de um número é seu tamanho em relação a outros valores de uma lista. (Se você fosse classificar a lista, a ordem do número seria a sua posição).</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a ordem for 0 (zero) ou omitida, o Microsoft Excel ordenará o número como se a referência fosse uma lista classificada em ordem decrescente.</para>
          <para>Se a ordem for qualquer valor diferente de zero, o Microsoft Excel ordenará o número como se a referência fosse uma lista classificada em ordem crescente.</para>
          <para>
            <b>Rank_Eq</b> dá aos números duplicados a mesma classificação. No entanto, a presença de números duplicados afeta a ordem dos números subsequentes. Por exemplo, em uma lista de números inteiros classificados em ordem crescente, se o número 10 aparecer duas vezes e tiver uma ordem de 5, então 11 teria uma ordem de 7 (nenhum número teria uma ordem de 6).</para>
          <para>Para algumas finalidades, talvez seja interessante usar uma definição de classificação que considere vínculos. No exemplo anterior, você precisava de uma ordem revista de 5,5 para o número 10. Para fazer isso, adicione o fator de correção a seguir ao valor retornado <b>por Rank_Eq</b>. Esse fator de correção é apropriado tanto para o caso em que a classificação é calculada em ordem decrescente (ordem = 0 ou omitida) ou ordem crescente (ordem = valor nãozero).</para>
          <para>Fator de correção para ranks=[COUNT(ref) + 1 – RANK_EQ(number, ref, 0) – RANK_EQ(number, ref, 1)]/2.No exemplo a seguir, RANK_EQ(A2,A1:A5,1) é igual a 3. O fator de correção é (5 + 1 – 2 – 3)/2 = 0,5 e a ordem revisada que considera o empate é 3 + 0,5 = 3,5. Se o número ocorrer apenas uma vez no ref, <b></b> o fator de correção será 0, pois Rank_Eq não precisa ser ajustado para um empate.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nper - o número total de períodos de pagamento em uma anuidade.</param>
        <param name="Arg2">Pgto - o pagamento feito em cada período e não pode mudar durante a vigência da anuidade. Geralmente, pgto inclui o principal e os juros e nenhuma outra taxa ou tributo. Se pgto for omitido, você deverá incluir o argumento vf.</param>
        <param name="Arg3">Vp - o valor presente — o valor total correspondente ao valor atual de uma série de pagamentos futuros.</param>
        <param name="Arg4">Vf - o valor futuro, ou o saldo, que você deseja obter depois do último pagamento. Se vf for omitido, será considerado 0 (o valor futuro de um empréstimo, por exemplo, é 0).</param>
        <param name="Arg5">Tipo - o número 0 ou 1 e indica as datas de vencimento dos pagamentos.</param>
        <param name="Arg6">Guess - your guess for what the rate will be.</param>
        <summary>Retorna a taxa de juros por período de uma anuidade. TAXA é calculado por iteração e pode ter zero ou mais soluções. Se os resultados sucessivos de TAXA não convergirem para 0,0000001 depois de 20 iterações, TAXA retornará o valor de erro #NÚM!.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para uma descrição completa dos argumentos nper, pmt, pv, fv e type, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>No fim do período</description>
            </item>
            <item>
              <term>1</term>
              <description>No início do período</description>
            </item>
          </list>
          <para>Se você omitir estimativa, este argumento será considerado 10%.</para>
          <para>Se <b>Rate</b> não convergir, tente valores diferentes para adivinhar. <b>A</b> taxa geralmente converge se o palpite estiver entre 0 e 1.</para>
          <para>Certifique-se de que esteja sendo consistente quanto às unidades usadas para especificar estimativa e nper. Se você fizer pagamentos mensais por um empréstimo de quatro anos com juros de 12% ao ano, utilize 12%/12 para estimativa e 4*12 para nper. Se fizer pagamentos anuais para o mesmo empréstimo, utilize 12% para estimativa e 4 para nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Investimento - a quantia investida no título.</param>
        <param name="Arg4">Desconto - a taxa de desconto do título.</param>
        <param name="Arg5">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna a quantia recebida no vencimento de um título totalmente investido.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>Received</b> retornará a #VALUE! valor de erro. </para>
          <para>Se o investimento ≤ 0 ou se o ≤ 0, <b>Received</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>Received</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, Received retornará o #NUM! valor de erro. <b>Recebido</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação do método Received</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>B = número de dias em um ano, dependendo da base do ano.</para>
          <para>DIM = número de dias de emissão para vencimento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto no qual você deseja substituir alguns caracteres.</param>
        <param name="Arg2">A posição do caractere <paramref name="Arg1" /> no que você deseja substituir por <paramref name="Arg4" /> .</param>
        <param name="Arg3">O número de caracteres <paramref name="Arg1" /> em que você deseja que o método substitua por <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <paramref name="Arg4" /> .</param>
        <param name="Arg4">Texto que substituirá caracteres em <paramref name="Arg1" /> .</param>
        <summary>Substitui parte de uma sequência de caracteres de texto, baseada no número de caracteres especificado, por uma sequência de caracteres de texto diferente.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto_antigo - texto no qual você deseja substituir alguns caracteres.</param>
        <param name="Arg2">Núm_inicial - a posição do caractere em texto_antigo que você deseja substituir por novo_texto.</param>
        <param name="Arg3">Núm_caract - o número de caracteres em texto_antigo que você deseja que MUDAR substitua por novo_texto.</param>
        <param name="Arg4">Novo_texto - o texto que substituirá os caracteres em texto_antigo.</param>
        <summary>SUBSTITUIRB substitui parte de uma sequência de caracteres de texto, com base no número de bytes especificado, por uma sequência diferente.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: destina-se a ser usado com idiomas que usam o conjunto de caracteres de byte único <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> (SBCS), enquanto <b>ReplaceB</b> destina-se a ser usado com idiomas que usam o conjunto de caracteres de byte duplo (DBCS). A configuração de idioma padrão no computador afeta o valor de retorno da seguinte forma:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> sempre conta cada caractere, seja de byte único ou de byte duplo, como 1, independentemente da configuração de idioma padrão. </para>
          <para>
            <b>ReplaceB</b> conta cada caractere de byte duplo como 2 quando você habilitar a edição de um idioma que dá suporte a DBCS e defini-lo como o idioma padrão. Caso contrário, <b>ReplaceB</b> conta cada caractere como 1. </para>
          <para>Os idiomas com suporte para DBCS são: japonês, chinês (simplificado), chinês (tradicional) e coreano.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto - o texto que você deseja repetir.</param>
        <param name="Arg2">Núm_vezes - um número positivo que especifica o número de vezes que você deseja repetir texto.</param>
        <summary>Repete um texto um determinado número de vezes. Utilize REPT para preencher uma célula com um número de ocorrências de uma sequência de caracteres de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se number_times for 0 (zero), <b>Rept</b> retornará "" (texto vazio). </para>
          <para>Se núm_vezes não for um inteiro, será truncado.</para>
          <para>O resultado da função <b>Rept</b> não pode ter mais de 32.767 caracteres ou <b>Rept</b> retorna #VALUE!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o algarismo arábico a ser convertido.</param>
        <param name="Arg2">Forma - o algarismo que especifica o tipo de algarismo romano desejado. O estilo do algarismo romano varia de clássico a simplificado, tornando-se mais conciso à medida que o valor da forma aumenta.</param>
        <summary>Converte um numeral árabe em romano, como texto.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>Clássica.</description>
            </item>
            <item>
              <term>1</term>
              <description>Mais conciso.</description>
            </item>
            <item>
              <term>2</term>
              <description>Mais conciso.</description>
            </item>
            <item>
              <term>3</term>
              <description>Mais conciso.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Simplificado.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Clássica.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Simplificado.</description>
            </item>
          </list>
          <para>Se o número for negativo, o valor de erro #VALOR! será retornado.</para>
          <para>Se o número for maior do que 3999, o valor de erro #VALOR! será retornado.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número que se deseja arredondar.</param>
        <param name="Arg2">Núm_dígitos - especifica o número de dígitos para o qual você deseja arredondar núm.</param>
        <summary>Arredonda um número até uma quantidade especificada de dígitos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se núm_dígitos for maior que 0, então núm será arredondado para o número especificado de casas decimais. </para>
          <para>Se núm_dígitos for 0, então núm será arredondado para o inteiro mais próximo. </para>
          <para>Se núm_dígitos for menor que 0, então núm será arredondado para a esquerda da vírgula decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - qualquer número real que se deseja arredondar para baixo.</param>
        <param name="Arg2">Núm_dígitos - especifica o número de dígitos para o qual você deseja arredondar núm.</param>
        <summary>Arredonda um número para baixo até zero.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> se comporta como <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , exceto que sempre arredonda um número para baixo. </para>
          <para>Se núm_dígitos for maior do que 0, então o número será arredondado para baixo pelo número de casas decimais especificado.</para>
          <para>Se núm_dígitos for 0, núm será arredondado para baixo até o inteiro mais próximo.</para>
          <para>Se núm_dígitos for menor do que 0, então o número será arredondado para baixo à esquerda da vírgula decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - qualquer número real que se deseja arredondar para cima.</param>
        <param name="Arg2">Núm_dígitos - especifica o número de dígitos para o qual você deseja arredondar núm.</param>
        <summary>Arredonda um número para cima afastando-o de zero.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> se comporta como <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , exceto que sempre arredonda um número para cima. </para>
          <para>Se núm_dígitos for maior do que 0, então o número será arredondado para cima pelo número de casas decimais especificado.</para>
          <para>Se núm_dígitos for 0, núm será arredondado para cima até o inteiro mais próximo.</para>
          <para>Se núm_dígitos for menor do que 0, então o número será arredondado para cima à esquerda da vírgula decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número de períodos para o investimento.</param>
        <param name="Arg2">Valor presente do investimento.</param>
        <param name="Arg3">Valor futuro do investimento.</param>
        <summary>Retorna uma taxa de juros equivalente para o crescimento de um investimento.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - uma matriz ou intervalo de pontos de dados.</param>
        <param name="Arg2">Val_conhecidos_x - uma matriz ou intervalo de pontos de dados.</param>
        <summary>Retorna o quadrado do coeficiente de correlação do momento do produto de Pearson através dos pontos de dados em val_conhecidos_y e val_conhecidos_x. Para obter mais informações, confira <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. O valor r ao quadrado pode ser interpretado como a proporção da variância em y que pode ser atribuída à variância em x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se known_y e known_x estão vazios ou têm um número diferente de pontos de dados, <b>O RSq</b> retorna o valor de erro #N/A. </para>
          <para>Se known_y e known_x contêm apenas 1 ponto de dados, <b>o RSq</b> retornará o #DIV/0! valor de erro. </para>
          <para>A equação para o coeficiente de correlação do momento do produto Pearson, r, é: </para>
          <para>Figura 1: Coeficiente de correlação do momento do produto pearson</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa AVERAGE(known_x's) e AVERAGE(known_y's).</para>
          <para>
            <b>RSq</b> retorna r2, que é o quadrado desse coeficiente de correlação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Uma sequência de caracteres representando o identificador de programação do servidor em tempo real.</param>
        <param name="server">nome do servidor, <b>cadeia de</b> caracteres null ou <b>constante vbNullString.</b></param>
        <param name="topic1"><paramref name="topic1" /> – <paramref name="topic28" /> Uma cadeia de <b>caracteres</b> que representa um tópico.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Este método conecta a uma fonte para receber dados em tempo real.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto_procurado - o texto que você deseja localizar.</param>
        <param name="Arg2">No_texto - o texto em que você deseja localizar o texto_procurado.</param>
        <param name="Arg3">Núm_inicial - o número do caractere em no_texto em que você deseja iniciar a pesquisa.</param>
        <summary><b>Pesquise</b> e localize uma cadeia de caracteres de texto em uma segunda cadeia de caracteres de texto e retorne o número da posição inicial da primeira cadeia de caracteres de texto do primeiro caractere da segunda cadeia <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> de caracteres de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>a pesquisa destina-se a ser usada com idiomas que usam o conjunto de caracteres de byte único (SBCS), enquanto que se destina ao uso com idiomas que usam o conjunto de caracteres de byte duplo <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (DBCS). A configuração de idioma padrão em seu computador afeta o valor de retorno da seguinte<b>maneira:</b> a pesquisa sempre conta cada caractere, seja de byte único ou de byte duplo, como 1, independentemente da configuração de idioma padrão. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> conta cada caractere de byte duplo como 2 quando você habilitar a edição de um idioma que dá suporte a DBCS e defini-lo como o idioma padrão. Caso contrário, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> conta cada caractere como 1.</para>
          <para>Os idiomas com suporte para DBCS são: japonês, chinês (simplificado), chinês (tradicional) e coreano.</para>
          <para>Use <b>Pesquisar</b> e para determinar o local de um caractere ou cadeia de caracteres de texto em outra cadeia de caracteres de texto para que você possa usar o MID e MIDB ou funções para alterar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texto. </para>
          <para>
            <b>Pesquise</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> e não sejam sensíveis a minúsculas. Se você quiser fazer uma pesquisa de caso sensível, você pode usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> e <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>É possível usar os caracteres curinga ponto de interrogação (?) e asterisco (*) em texto_procurado. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou asterisco real, digite um til (~) antes do caractere.</para>
          <para>Se texto_procurado não for localizado, o valor de erro #VALOR! será retornado.</para>
          <para>Se núm_inicial for omitido, será equivalente a 1.</para>
          <para>Se núm_inicial não for maior do que 0 ou for maior do que o comprimento de no_texto, o valor de erro #VALOR! será retornado.</para>
          <para>Use núm_inicial para ignorar um número de caracteres especificado. Usando <b>a Pesquisa</b> como exemplo, suponha que você está trabalhando com a cadeia de caracteres de texto "AYF0093. YoungMensApparel". Para localizar o número do primeiro "R" na parte descritiva da sequência de caracteres de texto, defina núm_inicial como 8 para que a parte do texto relativa ao número de série não seja localizada. <b>A</b> pesquisa começa com o caractere 8, find_text no próximo caractere e retorna o número 9. <b>A</b> pesquisa sempre retorna o número de caracteres do início do within_text, contando os caracteres que você ignora se start_num for maior que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto_procurado - o texto que você deseja localizar.</param>
        <param name="Arg2">No_texto - o texto em que você deseja localizar o texto_procurado.</param>
        <param name="Arg3">Núm_inicial - o número do caractere em no_texto em que você deseja iniciar a pesquisa.</param>
        <summary>As funções LOCALIZAR e LOCALIZARB localizam uma sequência de caracteres de texto em outra sequência e retornam o número da posição inicial da primeira sequência de caracteres de texto do primeiro caractere da segunda sequência de caracteres de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>a pesquisa destina-se a ser usada com idiomas que usam o conjunto de caracteres de byte único (SBCS), enquanto que se destina ao uso com idiomas que usam o conjunto de caracteres de byte duplo <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (DBCS). A configuração de idioma padrão em seu computador afeta o valor de retorno da seguinte<b>maneira:</b> a pesquisa sempre conta cada caractere, seja de byte único ou de byte duplo, como 1, independentemente da configuração de idioma padrão. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> conta cada caractere de byte duplo como 2 quando você habilitar a edição de um idioma que dá suporte a DBCS e defini-lo como o idioma padrão. Caso contrário, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> conta cada caractere como 1.</para>
          <para>Os idiomas com suporte para DBCS são: japonês, chinês (simplificado), chinês (tradicional) e coreano.</para>
          <para>Use <b>Pesquisar</b> e para determinar o local de um caractere ou cadeia de caracteres de texto em outra cadeia de caracteres de texto para que você possa usar o MID e MIDB ou funções para alterar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texto. </para>
          <para>
            <b>Pesquise</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> e não sejam sensíveis a minúsculas. Se você quiser fazer uma pesquisa de caso sensível, você pode usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> e <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>É possível usar os caracteres curinga ponto de interrogação (?) e asterisco (*) em texto_procurado. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou asterisco real, digite um til (~) antes do caractere.</para>
          <para>Se texto_procurado não for localizado, o valor de erro #VALOR! será retornado.</para>
          <para>Se núm_inicial for omitido, será equivalente a 1.</para>
          <para>Se núm_inicial não for maior do que 0 ou for maior do que o comprimento de no_texto, o valor de erro #VALOR! será retornado.</para>
          <para>Use núm_inicial para ignorar um número de caracteres especificado. Usando <b>a Pesquisa</b> como exemplo, suponha que você está trabalhando com a cadeia de caracteres de texto "AYF0093. YoungMensApparel". Para localizar o número do primeiro "R" na parte descritiva da sequência de caracteres de texto, defina núm_inicial como 8 para que a parte do texto relativa ao número de série não seja localizada. <b>A</b> pesquisa começa com o caractere 8, find_text no próximo caractere e retorna o número 9. <b>A</b> pesquisa sempre retorna o número de caracteres do início do within_text, contando os caracteres que você ignora se start_num for maior que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ângulo em radianos para o qual você deseja o secant.</param>
        <summary>Retorna o secant de um ângulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ângulo em radianos para o qual você deseja o secant hiperbólico.</param>
        <summary>Retorna o secanto hiperbólico de um ângulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor de entrada da série polinomial.</param>
        <param name="Arg2">N - a potência inicial à qual você deseja elevar x.</param>
        <param name="Arg3">M - o passo pelo qual se acrescenta n a cada termo na sequência.</param>
        <param name="Arg4">Coeficientes - um conjunto de coeficientes pelo qual cada potência de x é multiplicada. O número de valores em coeficientes determina o número de termos na série polinomial. Por exemplo, se houver três valores em coeficientes, haverá três termos na série polinomial.</param>
        <summary>Retorna a soma de uma série de energia com base na fórmula: SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>SeriesSum</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Númr é qualquer número real.</param>
        <summary>Retorna o seno hiperbólico de um número.</summary>
        <returns>To be added.</returns>
        <remarks><para>A fórmula para o seno hiperbólico é:</para>
          <para>Figura 1: Fórmula para o seno hiperbólico</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2,... - de 1 a 30 argumentos para os quais você deseja calcular a distorção. Você também pode usar uma única matriz ou referência a uma matriz em vez de argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a distorção de uma distribuição. O valor enviesado caracteriza o grau de assimetria de uma distribuição em torno de sua média. Um valor enviesado positivo indica uma distribuição com uma ponta assimétrica que se estende em direção a valores mais positivos. Um valor enviesado negativo indica uma distribuição com uma ponta assimétrica que se estende em direção a valores mais negativos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se houver menos de três pontos de dados ou o desvio padrão de amostra for zero, <b>Skew</b> retornará a #DIV/0! valor de erro. </para>
          <para>A equação para o valor enviesado é definida como: 

 </para>
          <para>Figura 1: Equação para distorção</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg2">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg3">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg4">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg5">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg6">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg7">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg8">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg9">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg10">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg11">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg12">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg13">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg14">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg15">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg16">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg17">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg18">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg19">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg20">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg21">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg22">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg23">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg24">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg25">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg26">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg27">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg28">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg29">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <param name="Arg30">De 1 a 254 números ou nomes, matrizes ou referências que contenham números para os quais você deseja a distorção da população.</param>
        <summary>Retorna a distorção de uma distribuição com base em uma população: uma caracterização do grau de assimetria de uma distribuição em torno de sua média.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Custo - o custo inicial do ativo.</param>
        <param name="Arg2">Recuperação - o valor no final da depreciação (às vezes chamado de valor residual do ativo).</param>
        <param name="Arg3">Vida_útil - o número de períodos durante os quais o ativo é depreciado (às vezes chamado de vida útil do ativo).</param>
        <summary>Retorna a depreciação em linha reta de um ativo durante um período.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - uma matriz ou intervalo de células de pontos de dados dependentes e numéricos.</param>
        <param name="Arg2">Val_conhecidos_x - o conjunto de pontos de dados independentes.</param>
        <summary>Retorna a inclinação da linha de regressão linear através de pontos de dados em val_conhecidos_y e val_conhecidos_x. A inclinação é a distância vertical dividida pela distância horizontal entre dois pontos quaisquer na linha, que é a taxa de mudança ao longo da linha de regressão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se known_y e known_x estão vazios ou têm um número diferente de pontos de dados, <b>Slope</b> retornará o valor de erro #N/A. </para>
          <para>A equação para a inclinação da linha de regressão é: </para>
          <para>Figura 1: Equação para a inclinação da linha de regressão</para>
          <para> </para>
          <para> </para>
          <para>O algoritmo subjacente usado na <b>Inclinação</b> e funções é diferente do algoritmo subjacente <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> usado na <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> função. A diferença entre esses algoritmos pode levar a diferentes resultados quando os dados forem indeterminados e colineares. Por exemplo, se os pontos de dados do argumento val_conhecidos_y forem 0 e os pontos de dados do argumento val_conhecidos_x forem 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Inclinar</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> e retornar um #DIV/0! . O <b>Slope</b> e o algoritmo foram projetados para procurar uma e apenas uma resposta e, nesse caso, pode <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> haver mais de uma resposta. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> retorna um valor de 0. O algoritmo foi projetado para retornar resultados razoáveis para dados <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> collineares e, nesse caso, pelo menos uma resposta pode ser encontrada.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - uma matriz ou intervalo de dados numéricos cujo k-ésimo menor valor você deseja determinar.</param>
        <param name="Arg2">K - a posição (a partir do menor) na matriz ou intervalo de dados a ser fornecido.</param>
        <summary>Retorna o k-ésimo menor valor do conjunto de dados. Use esta função para retornar valores com uma posição específica relativa em um conjunto de dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Small</b> retornará o #NUM! valor de erro. </para>
          <para>Se k ≤ 0 ou se k exceder o número de pontos de dados, <b>Small</b> retornará a #NUM! valor de erro. </para>
          <para>Se n for o número de pontos de dados em matriz, MENOR(matriz,1) será igual ao menor valor, e MENOR(matriz,n) será igual ao maior valor.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - o número pelo qual se multiplica pi.</param>
        <summary>Retorna a raiz quadrada de (núm* pi).</summary>
        <returns>To be added.</returns>
        <remarks><para>Se o &lt; número 0, <b>SqrtPi</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor que você deseja normalizar.</param>
        <param name="Arg2">Média - a média aritmética da distribuição.</param>
        <param name="Arg3">Desv_padrão - o desvio padrão da distribuição.</param>
        <summary>Retorna um valor normalizado de uma distribuição caracterizada por média e desv_padrão.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se standard_dev ≤ 0, <b>Padronizar</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para o valor normalizado é: 

 </para>
          <para>Figura 1: Equação para o valor normalizado</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma amostra de uma população. Você também pode usar uma única matriz ou uma referência a uma matriz, em vez de argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Estima o desvio padrão com base em uma amostra. O desvio padrão é uma medida de quanto os valores estão dispersos em relação ao valor médio (a média).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> método.</para>
          <para>
            <b>StDev</b> supõe que seus argumentos são uma amostra da população. Se seus dados representarem toda a população, calcule o desvio padrão usando <b>StDev</b>. </para>
          <para>O desvio padrão é calculado usando o método "não polarizado" ou "n-1".</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>StDev</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação do método StDev</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - argumentos números 1 a 30 que correspondem a uma população. Use também uma matriz única ou uma referência a uma matriz, em vez de argumentos separados por vírgulas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula o desvio padrão com base na população inteira fornecida como argumentos. O desvio padrão é uma medida de quanto os valores estão dispersos em relação ao valor médio (a média).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> supõe que seus argumentos sejam a população inteira. Se seus dados representarem um exemplo da população, calcule o desvio padrão usando <b>StDev_P</b>. </para>
          <para>Para tamanhos de exemplo grandes e <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> StDev_P retornar valores aproximadamente iguais. <b></b> </para>
          <para>O desvio padrão é calculado usando o método "polarizado" ou "n".</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de texto de números digitados diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>StDev_P</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação para o StDev_P método</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma amostra de uma população. Você também pode usar uma única matriz ou uma referência a uma matriz, em vez de argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Estima o desvio padrão com base em uma amostra. O desvio padrão é uma medida de quanto os valores estão dispersos em relação ao valor médio (a média).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> supõe que seus argumentos são uma amostra da população. Se seus dados representarem toda a população, calcule o desvio padrão usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>O desvio padrão é calculado usando o método "não polarizado" ou "n-1".</para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>StDev_S</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação para o StDev_S método</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma amostra de uma população. Você também pode usar uma única matriz ou uma referência a uma matriz, em vez de argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula o desvio padrão com base na população inteira fornecida como argumentos. O desvio padrão é uma medida de quanto os valores estão dispersos em relação ao valor médio (a média).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> método.</para>
          <para>
            <b>StDevP</b> supõe que seus argumentos sejam a população inteira. Se seus dados representarem um exemplo da população, calcule o desvio padrão usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Para tamanhos de exemplo grandes <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> e <b>StDevP</b> retornam valores aproximadamente iguais. </para>
          <para>O desvio padrão é calculado usando o método "polarizado" ou "n". Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números. </para>
          <para>Os valores lógicos e as representações de texto de números digitados diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros. <b>StDevP</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação para o método StDevP</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - uma matriz ou intervalo de pontos de dados dependentes.</param>
        <param name="Arg2">Val_conhecidos_x - uma matriz ou intervalo de pontos de dados independentes.</param>
        <summary>Retorna o erro padrão do valor-y previsto para cada x da regressão. O erro padrão é uma medida da quantidade de erro na previsão de y para um x individual.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>Se known_y e known_x tiver um número diferente de pontos de dados, <b>StEyx</b> retornará o valor de erro #N/A. </para>
          <para>Se known_y e known_x estão vazios ou têm menos de três pontos de dados, <b>StEyx</b> retorna o #DIV/0! valor de erro. </para>
          <para>A equação do erro padrão do y previsto é: </para>
          <para>Figura 1: Equação para o erro padrão do y previsto</para>
          <para> </para>
          <para> </para>
          <para>onde x e y são o exemplo significa AVERAGE(known_x's) e AVERAGE(known_y's) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto - o texto ou a referência a uma célula que contém o texto no qual deseja substituir caracteres.</param>
        <param name="Arg2">Texto_antigo - o texto que se deseja substituir.</param>
        <param name="Arg3">Novo_texto - o texto pelo qual deseja substituir texto_antigo.</param>
        <param name="Arg4">Núm_da_ocorrência - especifica que ocorrência de texto_antigo se deseja substituir por novo_texto. Se especificar núm_da_ocorrência, apenas aquela ocorrência de texto_antigo será substituída. Caso contrário, cada ocorrência de texto_antigo no texto é alterada para novo_texto.</param>
        <summary>Coloca novo_texto no lugar de texto_antigo em uma sequência de caracteres de texto. Use SUBSTITUIR quando quiser substituir texto específico em uma sequência de caracteres de texto; use MUDAR quando quiser substituir qualquer texto que ocorra em um local específico de uma sequência de caracteres de texto.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Um número indicando a função de agregação a ser usada pelo método.</param>
        <param name="Arg2">O primeiro <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objeto para o qual um subtotal deve ser calculado.</param>
        <param name="Arg3"><paramref name="Arg3" /> – <paramref name="Arg30" /> Objetos <see cref="T:Microsoft.Office.Interop.Excel.Range" /> subsequentes para os quais um subtotal deve ser calculado.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cria subtotais.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - argumentos de 1 a 30 cuja soma ou valor total você deseja obter.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Adiciona todos os números em um intervalo de células.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os números, valores lógicos e representações em forma de texto de números digitados diretamente na lista de argumentos são contados. </para>
          <para>Se um argumento for uma matriz ou referência, apenas os números nesta matriz ou referência serão contados. Células vazias, valores lógicos ou texto na matriz ou referência são ignorados. </para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Intervalo - o intervalo de células que você deseja avaliar por critérios.</param>
        <param name="Arg2">Critérios - os critérios na forma de um número, expressão ou texto que define quais células serão adicionadas. Por exemplo, os critérios podem ser expressos como 32, "32", " &gt; 32" ou "maçãs".</param>
        <param name="Arg3">Intervalo_soma - as células reais a serem adicionadas se as células correspondentes no intervalo coincidirem com os critérios. Se intervalo_soma for omitido, as células no intervalo serão avaliadas pelos critérios e adicionadas se corresponderem aos mesmos.</param>
        <summary>Adiciona as células especificadas por um determinado critério.</summary>
        <returns>To be added.</returns>
        <remarks><para>Intervalo_soma não possui o mesmo tamanho e a mesma forma que o intervalo. As células reais que foram adicionadas são determinadas utilizando-se o intervalo_soma na célula superior, à esquerda, como a célula inicial e então incluindo as células que correspondem em tamanho e forma ao intervalo. Por exemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Você pode utilizar caracteres curinga, como ponto de interrogação (?) e asterisco (*), nos critérios. Um ponto de interrogação corresponde a qualquer caractere; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou asterisco real, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range - o intervalo a ser somado.</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... - um ou mais intervalos nos quais os critérios associados serão avaliados.</param>
        <param name="Arg3">Criteria1, criteria2, ... - um ou mais critérios no formulário de um número, uma expressão, uma referência de célula ou um texto que define quais células serão contadas. Por exemplo, os critérios podem ser expressos como 32, "32", " &gt; 32", "maçãs" ou B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Adiciona as células de um intervalo que atendam a vários critérios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cada célula em sum_range só será resumida se todos os critérios correspondentes especificados forem verdadeiros para aquela célula.</para>
          <para>Células em sum_range que contêm <b>verdadeira</b> avaliação como 1; células em sum_range que contêm <b>false</b> avaliar como 0 (zero). </para>
          <para>Você pode usar os caracteres curinga, o ponto de interrogação (?) e o asterisco (*) nos critérios. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se você quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para>Cada criteria_range não precisa ter o mesmo tamanho e a mesma forma do sum_range. As células reais adicionadas são determinadas pelo uso da célula superior esquerda do criteria_range como a célula inicial e pela inclusão de células que correspondam em tamanho e em forma a sum_range. Por exemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1, matriz2, matriz3, ... - de 2 a 30 matrizes cujos componentes se deseja multiplicar e depois somar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica os componentes correspondentes nas matrizes fornecidas e retorna a soma destes produtos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos de matriz devem ter as mesmas dimensões. Se não o fizerem, <b>SumProduct</b> retornará o #VALUE! valor de erro. </para>
          <para>
            <b>SumProduct</b> trata entradas de matriz que não são numéricas como se fossem zeros.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - de 1 a 30 argumentos para os quais se deseja a soma dos quadrados. Você pode também usar uma única matriz ou referência a uma matriz em vez dos argumentos separados por vírgulas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Retorna a soma dos quadrados dos argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números. </para>
          <para>Os números, valores lógicos e representações em forma de texto de números digitados diretamente na lista de argumentos são contados. </para>
          <para>Se um argumento for uma matriz ou referência, apenas os números da matriz ou referência serão contados. Células vazias, valores lógicos, valores de texto ou de erro na matriz ou referência são ignorados. </para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz_x - a primeira matriz ou intervalo de valores.</param>
        <param name="Arg2">Matriz_y - a segunda matriz ou intervalo de valores.</param>
        <summary>Retorna a soma da diferença dos quadrados dos valores correspondentes em duas matrizes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se array_x e array_y têm um número diferente de valores, <b>SumX2MY2 retorna</b> o valor de erro #N/A. </para>
          <para>A equação para a soma da diferença dos quadrados é: 

 </para>
          <para>Figura 1: Equação para a soma da diferença de quadrados</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz_x - a primeira matriz ou intervalo de valores.</param>
        <param name="Arg2">Matriz_y - a segunda matriz ou intervalo de valores.</param>
        <summary>Retorna a soma da soma dos quadrados dos valores correspondentes em duas matrizes. A soma da soma dos quadrados é um termo comum em muitos cálculos estatísticos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se array_x e array_y um número diferente de valores, <b>SumX2PY2</b> retornará o valor de erro #N/A. </para>
          <para>A equação para a soma da soma dos quadrados é: 

 </para>
          <para>Figura 1: Equação para a soma da soma de quadrados</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz_x - a primeira matriz ou intervalo de valores.</param>
        <param name="Arg2">Matriz_y - a segunda matriz ou intervalo de valores.</param>
        <summary>Retorna a soma dos quadrados das diferenças dos valores correspondentes em duas matrizes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Os argumentos devem ser números ou nomes, matrizes ou referências que contenham números.</para>
          <para>Se uma matriz ou argumento de referência contiver texto, valores lógicos ou células vazias, estes valores serão ignorados; no entanto, células com valor zero serão incluídas.</para>
          <para>Se array_x e array_y um número diferente de valores, <b>SumXMY2</b> retornará o valor de erro #N/A. </para>
          <para>A equação para a soma da diferença dos quadrados é: 

 </para>
          <para>Figura 1: Equação para a soma de diferenças quadradas</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Custo - o custo inicial do ativo.</param>
        <param name="Arg2">Recuperação - o valor no final da depreciação (às vezes chamado de valor residual do ativo).</param>
        <param name="Arg3">Vida_útil - o número de períodos durante os quais o ativo é depreciado (às vezes chamado de vida útil do ativo).</param>
        <param name="Arg4">Per - o período e deve utilizar as mesmas unidades de vida útil.</param>
        <summary>Retorna a depreciação dos dígitos da soma dos anos de um ativo para um período especificado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b> é calculado da seguinte forma:</para>
          <para>Figura 1: Equação para o método Syd</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - O valor numérico no qual se avalia a distribuição.</param>
        <param name="Arg2">Deg_freedom - Um inteiro que indica o número de graus de liberdade.</param>
        <param name="Arg3">Cumulativo - um valor lógico que determina a forma da função. Se cumulativo for <b>verdadeiro,</b> <b>T_Dist</b> retornará a função de distribuição cumulativa; se <b>false</b>, ele retorna a função de densidade de probabilidade.</param>
        <summary>Retorna uma distribuição t de Student onde um valor numérico (x) é um valor calculado de t para o qual são calculados os pontos percentuais.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numerado, <b>T_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se deg_freedom &lt; 1, <b>T_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>Se x &lt; 0, <b>T_Dist</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - O valor numérico no qual se avalia a distribuição.</param>
        <param name="Arg2">Deg_freedom - Um inteiro que indica o número de graus de liberdade.</param>
        <summary>Retorna a distribuição t de Student bicaudal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numérico, <b>T_Dist_2T</b> retornará o #VALUE! valor de erro. </para>
          <para>Se deg_freedom &lt; 1, <b>T_Dist_2T</b> retorna o #NUM! valor de erro. </para>
          <para>Se x &lt; 0, <b>T_Dist_2T</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - O valor numérico no qual se avalia a distribuição.</param>
        <param name="Arg2">Graus_liberdade - Um número inteiro que indica o número de graus de liberdade.</param>
        <summary>Retorna distribuição t de Student de cauda direita onde um valor numérico (x) é um valor calculado de t para o qual os pontos percentuais devem ser computados. A distribuição t é usada no teste de hipótese dos conjuntos de dados de amostra pequena. Use esta função em lugar de uma tabela de valores críticos para a distribuição t.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se algum argumento não for numérico, <b>T_Dist_RT</b> retornará o #VALUE! valor de erro. </para>
          <para>Se degrees_freedom &lt; 1, <b>T_Dist_RT</b> retorna o #NUM! valor de erro. </para>
          <para>Os argumentos graus_liberdade e caudas são truncados para números inteiros.</para>
          <para>Se caudas for qualquer valor diferente de 1 ou 2, <b>T_Dist_RT</b> retornará o #NUM! valor de erro. </para>
          <para>Se x &lt; 0, <b>T_Dist_RT</b> retornará o #NUM! valor de erro. </para>
          <para>Se caudas = 1, <b>T_Dist_RT</b> é calculado como T_DIST_RT = P( X x ), onde X é uma variável aleatória que segue &gt; a distribuição t. Se caudas = 2, <b>T_Dist_RT</b> é calculado como T_DIST_RT = P(| X| &gt; x) = P(X &gt; x ou X &lt; -x). </para>
          <para>Como x 0 não é permitido, para usar T_Dist_RT quando x 0, observe que &lt; <b></b> &lt; T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X &gt; -x) e T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(| X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - A probabilidade associada à distribuição t de Student.</param>
        <param name="Arg2">Deg_freedom - O número de graus de liberdade com o qual caracterizar a distribuição.</param>
        <summary>Retorna o inverso de cauda esquerda da distribuição t de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se um dos argumentos não for numérico, <b>T_Inv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou se probabilidade &gt; 1, <b>T_Inv</b> retornará o #NUM! valor de erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se deg_freedom &lt; 1, <b>T_Inv</b> retorna o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - A probabilidade associada à distribuição t bicaudal de Student.</param>
        <param name="Arg2">Graus_liberdade - O número de graus de liberdade que caracteriza a distribuição.</param>
        <summary>Retorna o valor t da distribuição t de Student como uma função da probabilidade e dos graus de liberdade.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se um dos argumentos não for numérico, <b>T_Inv_2T</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou se probabilidade 1, T_Inv_2T &gt; retorna o #NUM! <b></b> valor de erro. Se graus_liberdade não for um inteiro, será truncado. </para>
          <para>Se degrees_freedom &lt; 1, <b>T_Inv_2T</b> retorna o #NUM! valor de erro. </para>
          <para>
            <b>T_Inv_2T</b> retorna esse valor t, de forma que P(| X| &gt; t) = probabilidade em que X é uma variável aleatória que segue a distribuição t e P(| X| &gt; t) = P(X &lt; -t ou X &gt; t). </para>
          <para>Um valor t de cauda única pode ser retornado substituindo a probabilidade por 2 *probabilidades. Para uma probabilidade de 0,05 e graus de liberdade de 10, o valor de duas caudas é calculado com T_INV_2T(0,05,10), que retorna 2,28139.* O valor de cauda única para a mesma probabilidade e graus de liberdade pode ser calculado com T_INV_2T(2 0,05,10), que retorna 1,812462. </para>
          <para>
            <b>Observação</b>: em algumas tabelas, a probabilidade é descrita como (1-p).</para>
          <para>Dado um valor para <b>probabilidade</b> T_Inv_2T busca esse valor x de T_DIST_RT que T_DIST_RT(x, degrees_freedom, 2) = probabilidade. Assim, a precisão <b>de T_Inv_2T</b> depende da precisão de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> . <b>T_Inv_2T</b> usa uma técnica de pesquisa iterativa. Se a pesquisa não tiver convergido após 100 iterações, a função retornará o valor de erro #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1 - O primeiro conjunto de dados.</param>
        <param name="Arg2">Matriz2 - O segundo conjunto de dados.</param>
        <param name="Arg3">Caudas - Especifica o número de caudas da distribuição. Se caudas = 1, <b>T_Test</b> usa a distribuição de cauda única. Se caudas = 2, <b>T_Test</b> usa a distribuição de duas caudas.</param>
        <param name="Arg4">Tipo - O tipo de teste-t a executar.</param>
        <summary>Retorna a probabilidade associada a um teste t de Student. Use T_TEST para determinar a probabilidade de duas amostras serem provenientes das mesmas duas populações subjacentes que têm a mesma média.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se matriz1 e matriz2 têm um número diferente de pontos de <b></b> dados e tipo = 1 (emparelhado), T_Test retornará o valor de erro #N/A. </para>
          <para>Os argumentos caudas e tipo são truncados para números inteiros.</para>
          <para>Se caudas ou tipo não for numérico, <b>T_Test</b> retornará o #VALUE! valor de erro. </para>
          <para>Se caudas for qualquer valor diferente de 1 ou 2, <b>T_Test</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>T_Test</b> usa os dados em matriz1 e matriz2 para calcular uma estatística t não negativa. Se tails=1, <b>T_Test</b> retornará a probabilidade de um valor mais alto da estatística t sob a suposição de que matriz1 e matriz2 são amostras de populações com a mesma média. O valor retornado por <b>T_Test</b> quando tails=2 é o dobro retornado quando tails=1 e corresponde à probabilidade de um valor absoluto maior da estatística t na suposição de "mesma população".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm - qualquer número real.</param>
        <summary>Retorna a tangente hiperbólica de um número.</summary>
        <returns>To be added.</returns>
        <remarks><para>A fórmula para a tangente hiperbólica é:</para>
          <para>Figura 1: Fórmula para a tangente hiperbólica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação da obrigação do Tesouro. A data de liquidação do título é a data após a data de emissão quando a obrigação do Tesouro é negociada com o comprador.</param>
        <param name="Arg2">Vencimento - a data de vencimento da obrigação do Tesouro. A data de vencimento é a data em que a obrigação do Tesouro expira.</param>
        <param name="Arg3">ImportantDates deve ser inserido usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Problemas podem ocorrer se as datas são inseridas como texto. Desconto - a taxa de desconto da fatura do Tesouro.</param>
        <summary>Retorna o rendimento de um título equivalente a uma obrigação do Tesouro.</summary>
        <returns>To be added.</returns>
        <remarks><para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Liquidação e vencimento são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>TBillEq</b> retornará a #VALUE! valor de erro. </para>
          <para>Se o ≤ 0, <b>TBillEq</b> retornará o #NUM! valor de erro. </para>
          <para>Se o vencimento de liquidação, ou se o vencimento for superior a um ano após a &gt; liquidação, <b>TBillEq</b> retornará a #NUM! valor de erro. </para>
          <para>
            <b>TBillEq</b> é calculado como TBILLEQ = (365 x taxa)/(360-(taxa x DSM)), onde DSM é o número de dias entre liquidação e vencimento calculado de acordo com a base de 360 dias por ano.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação da obrigação do Tesouro. A data de liquidação do título é a data após a data de emissão quando a obrigação do Tesouro é negociada com o comprador.</param>
        <param name="Arg2">Vencimento - a data de vencimento da obrigação do Tesouro. A data de vencimento é a data em que a obrigação do Tesouro expira.</param>
        <param name="Arg3">Desconto - a taxa de desconto da obrigação do Tesouro.</param>
        <summary>Retorna o preço por R$ 100,00 de valor nominal de uma obrigação do Tesouro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto.</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Liquidação e vencimento são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>TBillPrice</b> retornará a #VALUE! valor de erro. </para>
          <para>Se o ≤ 0, <b>TBillPrice</b> retornará o #NUM! valor de erro. </para>
          <para>Se o vencimento da liquidação ou se o vencimento for superior a um ano após a &gt; liquidação, <b>TBillPrice</b> retornará a #NUM! valor de erro. </para>
          <para>
            <b>TBillPrice</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para o método TBillPrice</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>DSM = número de dias de liquidação até o vencimento, excluindo qualquer data de vencimento que seja mais de um ano de calendário após a data de liquidação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação da obrigação do Tesouro. A data de liquidação do título é a data após a data de emissão quando a obrigação do Tesouro é negociada com o comprador.</param>
        <param name="Arg2">Vencimento - a data de vencimento da obrigação do Tesouro. A data de vencimento é a data em que a obrigação do Tesouro expira.</param>
        <param name="Arg3">Pr - o preço da obrigação do Tesouro por R$ 100,00 de valor nominal.</param>
        <summary>Retorna o rendimento de uma obrigação do Tesouro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se datas forem inseridas como texto.</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Liquidação e vencimento são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>TBillYield</b> retornará a #VALUE! valor de erro. </para>
          <para>Se pr ≤ 0, <b>TBillYield</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, ou se o vencimento for superior a um ano após a liquidação, <b>TBillYield</b> retornará a #NUM! valor de erro. </para>
          <para>
            <b>TBillYield</b> é calculado da seguinte forma: </para>
          <para>Figura 1: Equação para o método TBillYield</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>DSM = número de dias de liquidação até o vencimento, excluindo qualquer data de vencimento que seja mais de um ano de calendário após a data de liquidação.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor numérico em que se avalia a distribuição.</param>
        <param name="Arg2">Graus_liberdade - um número inteiro indicando o número de graus de liberdade.</param>
        <param name="Arg3">Caudas - especifica o número de caudas da distribuição a ser retornado. Se caudas = 1, DISTT retornará a distribuição unicaudal. Se caudas = 2, DISTT retornará a distribuição bicaudal.</param>
        <summary>Retorna os pontos percentuais (probabilidade) para a distribuição t de Student, onde o valor numérico (x) é um valor calculado de t para o qual os pontos percentuais devem ser computados. A distribuição t é usada no teste de hipóteses de pequenos conjuntos de dados de amostras. Use esta função em vez de uma tabela de valores críticos para a distribuição t.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> métodos , <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> e.</para>
          <para>Se algum argumento não for numerado, <b>TDist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se degrees_freedom &lt; 1, <b>TDist</b> retornará o #NUM! valor de erro. </para>
          <para>Os argumentos graus_liberdade e caudas são truncados para números inteiros.</para>
          <para>Se caudas for qualquer valor diferente de 1 ou 2, <b>TDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se x &lt; 0, <b>TDist</b> retornará o #NUM! valor de erro. </para>
          <para>Se caudas = 1, <b>TDist</b> é calculado como TDIST = P( X x ), onde X é uma variável aleatória que segue &gt; a distribuição t. Se caudas = 2, <b>TDist</b> será calculado como TDIST = P(| X| &gt; x) = P(X &gt; x ou X &lt; -x). </para>
          <para>Como x 0 não é permitido &lt; usar <b>TDist</b> quando x 0, observe que &lt; TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P(X &gt; -x) e TDIST(-x,df,2) = TDIST(x df,2) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor numérico, fórmula que resulta em valor numérico ou referência a uma célula que contenha valor numérico.</param>
        <param name="Arg2">Um formato de número em formato de texto que é fornecido na caixa Categoria na guia Número da caixa de diálogo Formatar Células.</param>
        <summary>Converte um valor em texto com um formato de número específico.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidade - a probabilidade associada à distribuição t de Student bicaudal.</param>
        <param name="Arg2">Graus_liberdade - o número de graus de liberdade que caracteriza a distribuição.</param>
        <summary>Retorna o valor t da distribuição t de Student como uma função da probabilidade e dos graus de liberdade.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre as novas funções, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> métodos e.</para>
          <para>Se um dos argumentos não for numerado, <b>TInv</b> retornará o #VALUE! valor de erro. </para>
          <para>Se probabilidade &lt; 0 ou se probabilidade &gt; 1, <b>TInv</b> retorna o #NUM! valor de erro. </para>
          <para>Se graus_liberdade não for um inteiro, será truncado.</para>
          <para>Se degrees_freedom &lt; 1, <b>TInv</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>TInv</b> retorna esse valor t, de forma que P(| X| &gt; t) = probabilidade em que X é uma variável aleatória que segue a distribuição t e P(| X| &gt; t) = P(X &lt; -t ou X &gt; t). </para>
          <para>Um valor t de cauda única pode ser retornado substituindo a probabilidade por 2 *probabilidades. Para uma probabilidade de 0,05 e graus de liberdade de 10, o valor de duas caudas é calculado com TINV(0,05,10), que retorna 2,28139.* O valor de cauda única para a mesma probabilidade e graus de liberdade pode ser calculado com TINV(2 0,05,10), que retorna 1,812462. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - uma matriz ou um intervalo de células em uma planilha que se deseja transpor. A transposição de uma matriz é criada utilizando-se a primeira linha da matriz como a primeira coluna da nova matriz, a segunda linha da matriz como a segunda coluna da nova matriz, e assim por diante.</param>
        <summary>Retorna um intervalo vertical de células como um intervalo horizontal ou vice-versa. A função TRANSPOR precisa ser inserida como uma fórmula de matriz em um intervalo com o mesmo número de linhas e colunas, respectivamente, das existentes em uma matriz. Use TRANSPOR para deslocar a orientação vertical e horizontal de uma matriz em uma planilha.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Val_conhecidos_y - o conjunto de valores y que você já conhece na relação y = mx + b.</param>
        <param name="Arg2">Val_conhecidos_x - um conjunto opcional de valores x que talvez você já conheça na relação y = mx + b.</param>
        <param name="Arg3">Novos_valores_x - novos valores x para os quais você deseja que TENDÊNCIA retorne valores y correspondentes.</param>
        <param name="Arg4">Constante - um valor lógico que especifica a necessidade de forçar ou não a constante b igual a zero.</param>
        <summary>Retorna valores em uma tendência linear. Ajusta uma linha (usando o método de quadrados mínimos) às matrizes val_conhecidos_y e val_conhecidos_x. Retorna os valores y nessa linha para a matriz de novos_valores_x que você especificar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz val_conhecidos_y estiver em uma única coluna, cada coluna de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>Se a matriz val_conhecidos_y estiver em uma única linha, cada linha de val_conhecidos_x será interpretada como uma variável separada.</para>
          <para>
				A matriz val_conhecidos_x pode incluir um ou mais conjuntos de variáveis. Se apenas uma variável for usada, val_conhecidos_y e val_conhecidos_x podem ser intervalos de qualquer formato, desde que tenham dimensões iguais. Se mais de uma variável for usada, val_conhecidos_y deverá ser um vetor (ou seja, um intervalo com altura de uma linha ou largura de uma coluna).
</para>
          <para>Se val_conhecidos_x for omitido, pressupõe-se que a matriz {1,2,3,...} seja do mesmo tamanho que val_conhecidos_y.</para>
          <para>
				Novos_valores_x deve incluir uma coluna (ou linha) para cada variável independente, da mesma forma que val_conhecidos_x. Portanto, se val_conhecidos_y estiver em uma única coluna, val_conhecidos_x e novos_valores_x devem ter o mesmo número de colunas. Se val_conhecidos_y estiver em uma única linha, val_conhecidos_x e novos_valores_x devem ter o mesmo número de linhas.
</para>
          <para>Se você omitir novos_valores_x, pressupõe-se que seja igual a val_conhecidos_x.</para>
          <para>Se você omitir val_conhecidos_x e novos_valores_x, eles serão considerados como a matriz {1,2,3,...} que é do mesmo tamanho que val_conhecidos_y.</para>
          <para>Se const for <b>verdadeiro</b> ou omitido, b será calculado normalmente. </para>
          <para>Se const for <b>false,</b>b será definido como 0 (zero) e os valores m serão ajustados para que y = mx. </para>
          <para>Para obter informações sobre como Microsoft Excel uma linha para dados, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Você pode usar <b>Trend para</b> ajuste de curva polinomial regredindo em relação à mesma variável elevada para potências diferentes. Por exemplo, considere que a coluna A contém valores y e a coluna B, valores x. É possível inserir x^2 na coluna C, x^3 na coluna D, e assim por diante, e depois regredir as colunas B a D em relação à coluna A. </para>
          <para>As fórmulas que fornecem matrizes devem ser inseridas como fórmulas matriciais.</para>
          <para>Ao inserir uma constante de matriz para um argumento, como val_conhecidos_x, use vírgulas na mesma linha e pontos-e-vírgulas para separar linhas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto - o texto do qual se deseja remover espaços.</param>
        <summary>Remove todos os espaços do texto exceto os espaços únicos entre palavras. Use ARRUMAR no texto que recebeu de outro aplicativo que pode ter espaçamento irregular.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: a <b>função Trim</b> foi projetada para cortar o caractere de espaço ASCII de 7 bits (valor 32) do texto. No conjunto de caracteres Unicode, há um caractere de espaço adicional chamado caractere de espaço incondicional, que tem um valor decimal de 160. Esse caractere é comumente usado em páginas da Web como a entidade HTML, <b> &amp; nbsp;</b>. Por si só, a <b>função Trim</b> não remove esse caractere de espaço não abreviado.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz - a matriz ou intervalo de valores a se calcular a média desprezando os desvios.</param>
        <param name="Arg2">Porcentagem - o número fracionário de ponto de dados a ser excluído do cálculo. Por exemplo, se porcentagem = 0,2, serão arrumados 4 pontos de um conjunto de dados de 20 pontos (20 x 0,2): 2 da parte superior e 2 da parte inferior do conjunto.</param>
        <summary>Retorna a média do interior de um conjunto de dados. MÉDIA.INTERNA calcula a média obtida excluindo-se uma porcentagem dos pontos de dados das pontas superior e inferior de um conjunto de dados. Você pode usar esta função quando quiser excluir dados externos à sua análise.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se por &lt; cento 0 ou &gt; por cento 1, <b>TrimMean</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>TrimMean</b> arreda o número de pontos de dados excluídos para o múltiplo mais próximo de 2. Se porcentagem = 0,1, 10% de 30 pontos de dados será igual a 3 pontos. Para simetria, <b>TrimMean</b> exclui um único valor da parte superior e inferior do conjunto de dados.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1 - o primeiro conjunto de dados.</param>
        <param name="Arg2">Matriz2 - o segundo conjunto de dados.</param>
        <param name="Arg3">Caudas - especifica o número de caudas da distribuição. Se caudas = 1, TESTET usará a distribuição unicaudal. Se caudas = 2, TESTET usará a distribuição bicaudal.</param>
        <param name="Arg4">Tipo - o tipo de Teste t a ser executado.</param>
        <summary>Retorna a probabilidade associada ao teste t de Student. Use TESTET para determinar se duas amostras poderão ser provenientes de duas populações subjacentes que possuem a mesma média.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> método.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Emparelhado</description>
            </item>
            <item>
              <term>2</term>
              <description>Variância igual de duas amostras (homoscedástica)</description>
            </item>
            <item>
              <term>3</term>
              <description>Variância desigual de duas amostras (heteroscedástica)</description>
            </item>
          </list>
          <para>Se matriz1 e matriz2 têm um número diferente de pontos de dados e tipo = 1 (emparelhado), <b>TTest</b> retornará o valor de erro #N/A. </para>
          <para>Os argumentos caudas e tipo são truncados para números inteiros.</para>
          <para>Se caudas ou tipo não for numerado, <b>TTest</b> retornará o #VALUE! valor de erro. </para>
          <para>Se caudas for qualquer valor diferente de 1 ou 2, <b>TTest</b> retornará o #NUM! valor de erro. </para>
          <para>
            <b>O TTest</b> usa os dados na matriz1 e na matriz2 para calcular uma estatística t não negativa. Se tails=1, <b>TTest</b> retornará a probabilidade de um valor mais alto da estatística t sob a suposição de que array1 e array2 são amostras de populações com a mesma média. O valor retornado por <b>TTest</b> quando tails=2 é o dobro retornado quando tails=1 e corresponde à probabilidade de um valor absoluto maior da estatística t na suposição "mesma população significa".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Número Unicode que representa um caractere.</param>
        <summary>Retorna o caractere Unicode referenciado pelo valor numérico determinado.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Caractere de que você deseja o valor Unicode.</param>
        <summary>Retorna o número (ponto de código) correspondente ao primeiro caractere do texto.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma referência a uma célula que contém um número, ou uma fórmula que é avaliada em um número.</param>
        <param name="Arg2">O número de dígitos à direita da vírgula decimal. Se Arg2 for negativo, o número será arredondado à esquerda da vírgula decimal. Se você omitir decimais, será considerado 2.</param>
        <summary>Converte um número em formato de texto e aplica um símbolo de moeda. O nome do método (e o símbolo que ele aplica) depende das configurações do idioma.
</summary>
        <returns>To be added.</returns>
        <remarks><para>O <b>método USDollar</b> converte um número em texto usando formato de moeda, com os decimais arredondados para o local especificado. O formato usado é $#,##0.00_);($#,##0.00).</para>
          <para>A principal diferença entre a formatação de uma célula que contém um número com o comando Format Cells e a formatação de um número diretamente com o método é que converte seu <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> resultado em texto. Um número formatado com o comando Format Cells não deixa de ser um número. Você pode continuar a usar números formatados com em fórmulas, porque Excel converte números inseridos como valores de texto em números <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> quando ele calcula.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma amostra de uma população.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Estima a variância com base em uma amostra.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> supõe que seus argumentos são uma amostra da população. Se seus dados representarem toda a população, calcule a variação usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de texto de números digitados diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>Var</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação para o método Var</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma população.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula a variância com base na população inteira.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> supõe que seus argumentos sejam a população inteira. Se seus dados representarem um exemplo da população, calcule a variação usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de texto de números digitados diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>A equação para <b>Var_P</b> é: </para>
          <para>Figura 1: Equação para o Var_P método</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2...- argumentos de números 1 a 30, correspondentes a uma amostra de uma população.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Estima a variância com base em uma amostra.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> supõe que seus argumentos são uma amostra da população. Se seus dados representarem toda a população, calcule a variação usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de números por extenso que você digita diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>
            <b>Var_S</b> usa a seguinte fórmula: </para>
          <para>Figura 1: Equação para o Var_S método</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm1, núm2, ... - de 1 a 30 argumentos numéricos correspondentes a uma população.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula a variância com base na população inteira.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> método.</para>
          <para>
            <b>VarP</b> assume que seus argumentos são a população inteira. Se seus dados representarem um exemplo da população, calcule a variação usando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Os argumentos podem ser números, ou nomes, matrizes ou referências que contenham números.</para>
          <para>Os valores lógicos e as representações de texto de números digitados diretamente na lista de argumentos são contados.</para>
          <para>Se um argumento for uma matriz ou referência, apenas os números dessa matriz ou referência serão contados. Células vazias, valores lógicos, texto ou valores de erro na matriz ou referência serão ignorados.</para>
          <para>Os argumentos que são valores de erro ou texto e que não podem ser convertidos em números geram erros.</para>
          <para>A equação para <b>VarP</b> é: </para>
          <para>Figura 1: Equação para o método VarP</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(number1,number2,...) e n é o tamanho da amostra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Custo - o custo inicial do ativo.</param>
        <param name="Arg2">Recuperação - o valor no final da depreciação (às vezes chamado de valor residual do ativo). Este valor pode ser 0.</param>
        <param name="Arg3">Vida_útil - o número de períodos durante os quais o ativo é depreciado (às vezes chamado de vida útil do ativo).</param>
        <param name="Arg4">Início_período - o período inicial para o qual se deseja calcular a depreciação. Início_período deve usar as mesmas unidades que vida_útil.</param>
        <param name="Arg5">Final_período - o período final para o qual se deseja calcular a depreciação. Final_período deve usar as mesmas unidades que vida_útil.</param>
        <param name="Arg6">Fator - a taxa à qual o saldo diminui. Se o fator for omitido, será considerado 2 (método balanço de declínio duplo). Altere o fator caso não deseje usar o método balanço de declínio duplo. Para uma descrição do método de balanceamento de declínio duplo, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> .</param>
        <param name="Arg7">Sem_mudança - o valor lógico que especifica se deve haver mudança para depreciação de linha reta quando a depreciação for maior do que o cálculo do balanço de declínio.</param>
        <summary>Retorna a depreciação de um ativo para o período que você especificar, incluindo períodos parciais, usando o método balanço declinante duplo ou algum outro método especificado. BDV é o balanço de declínio variável.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se no_switch for <b>verdadeiro,</b>Microsoft Excel não alternará para depreciação em linha reta, mesmo quando a depreciação for maior do que o cálculo do saldo em declínio. </para>
          <para>Se no_switch for <b>falso</b> ou omitido, o Excel alterna para depreciação em linha reta quando a depreciação for maior do que o cálculo do saldo em declínio.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - o valor a ser pesquisado na primeira coluna da matriz de tabela. Lookup_value pode ser um valor ou uma referência. Se o lookup_value for menor do que o menor valor da primeira coluna de table_array, VLOOKUP retornará o valor de erro #N/A.</param>
        <param name="Arg2">Table_array - duas ou mais colunas de dados. Use uma referência para um intervalo ou um nome do intervalo. Os valores da primeira coluna da table_array são os valores pesquisados por lookup_value. Esses valores podem ser texto, números ou valores lógicos. Os textos em maiúsculas e em minúsculas são equivalentes.</param>
        <param name="Arg3">Col_index_num - o número da coluna na table_array da qual o valor correspondente deverá ser retornado. Um col_index_num 1 retorna o valor na primeira coluna da table_array; um col_index_num 2 retorna o valor na segunda coluna da table_array e assim por diante.</param>
        <param name="Arg4">Range_lookup - um valor lógico que especifica se você deseja que o método encontre uma combinação <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> exata ou uma combinação aproximada:</param>
        <summary>Procura um valor na primeira coluna de uma matriz de tabela e retorna um valor na mesma linha de outra coluna da matriz da tabela.</summary>
        <returns>To be added.</returns>
        <remarks><para>O V de <b>VLookup</b> significa vertical. Use o <b>método VLookup</b> em vez do método quando seus valores de comparação estão localizados em uma coluna à esquerda dos dados <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> que você deseja encontrar.</para>
          <para>Se Col_index_num for menor do que 1, o método <b>VLookup</b> gerará um erro.</para>
          <para>Se Col_index_num for maior do que o número de colunas na table_array, o método <b>VLookup</b> gerará um erro.</para>
          <para>Se Range_lookup for <b>verdadeiro</b> ou omitido, uma combinação exata ou aproximada será retornada. Se uma correspondência exata não for encontrada, o próximo valor maior que for menor do que o lookup_value será retornado. </para>
          <para>Os valores na primeira coluna da table_array deverão ser posicionados em ordem crescente; caso contrário, é possível que o método  <b>VLookup</b> não ofereça o valor correto.</para>
          <para>Se Range_lookup for <b>falso,</b>o <b>método VLookup</b> encontrará apenas uma combinação exata. Nesse caso, os valores da primeira coluna da table_array não precisam ser classificados. Se houver dois ou mais valores na primeira coluna da table_array que correspondam ao lookup_value, o primeiro valor encontrado será usado. Se uma correspondência exata não for encontrada, será gerado um erro.</para>
          <para>Ao pesquisar valores de texto na primeira coluna do table_array, verifique se os dados na primeira coluna do table_array não têm espaços à esquerda, espaços à direita, uso inconsistente das aspas retas ( ' ou " ) e curly ( ' ou ") ou caracteres não impressões. Nesses casos, o método <b>VLookup</b> pode dar um valor incorreto ou inesperado. Para obter informações sobre como limpar ou cortar valores, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> os <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> métodos e. Ao pesquisar valores de número ou de data, verifique se os dados da primeira coluna da table_array não estão armazenados como valores de texto. Nesse caso, o método <b>VLookup</b> pode dar um valor incorreto ou inesperado. </para>
          <para>Se range_lookup for <b>falso</b> e lookup_value for texto, você poderá usar os caracteres curinga, ponto de interrogação (?) e asterisco (*), em lookup_value. Um ponto de interrogação corresponde a qualquer caractere único; um asterisco corresponde a qualquer sequência de caracteres. Se quiser localizar um ponto de interrogação ou um asterisco, digite um til (~) antes do caractere.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">A URL do serviço Web para fazer a solicitação HTTP GET.</param>
        <summary>Função subjacente que chama o serviço Web de forma assíncrona, usando uma solicitação GET HTTP e retorna a resposta.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm_série - um número sequencial que representa a data do dia que você está tentando encontrar. As datas devem ser inseridas com a função DATA ou como resultado de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</param>
        <param name="Arg2">Retornar_tipo - um número que determina o tipo do valor retornado.</param>
        <summary>Retorna o dia da semana correspondente a uma data. O dia é dado como um inteiro, variando de 1 (domingo) a 7 (sábado), por padrão.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 ou omitido</term>
              <description>Números 1 (domingo) a 7 (sábado). Como nas versões anteriores do Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>Números 1 (segunda-feira) a 7 (domingo).</description>
            </item>
            <item>
              <term>3</term>
              <description>Números 0 (segunda-feira) a 6 (domingo).</description>
            </item>
            <item>
              <term>11</term>
              <description>Números 1 (segunda-feira) a 7 (domingo).</description>
            </item>
            <item>
              <term>12 </term>
              <description>Números 1 (terça-feira) a 7 (segunda-feira)</description>
            </item>
            <item>
              <term>13</term>
              <description>Números 1 (quarta-feira) a 7 (terça-feira)</description>
            </item>
            <item>
              <term>14 </term>
              <description>Números 1 (quinta-feira) a 7 (quarta-feira)</description>
            </item>
            <item>
              <term>15</term>
              <description>Números 1 (sexta-feira) a 7 (quinta-feira)</description>
            </item>
            <item>
              <term>16 </term>
              <description>Números 1 (sábado) a 7 (sexta-feira)</description>
            </item>
            <item>
              <term>17 </term>
              <description>Números 1 (domingo) a 7 (sábado)</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Núm_série - uma data na semana. As datas devem ser inseridas com a função DATA ou como resultado de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</param>
        <param name="Arg2">Tipo_retorno - um número que determina em que dia a semana começa. O valor padrão é 1.</param>
        <summary>Retorna o número que indica onde se encontra a semana, numericamente, em um ano.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: A <b>função WeekNum</b> considera a semana que contém 1º de janeiro como a primeira semana do ano. No entanto, existe um padrão europeu que define a primeira semana como aquela que tem o maior número de dias (quatro ou mais) no novo ano. Isso significa que, durante anos em que há três dias ou menos na primeira semana de janeiro, a função <b>WeekNum</b> retorna números de semana incorretos de acordo com o padrão europeu.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>A semana começa no domingo. Os dias da semana são numerados de 1 a 7.</description>
            </item>
            <item>
              <term>2</term>
              <description>A semana começa na segunda-feira. Os dias da semana são numerados de 1 a 7.</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Alfa - um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - um parâmetro da distribuição.</param>
        <param name="Arg4">Cumulativo - determina a forma da função.</param>
        <summary>Retorna a distribuição Weibull. Use esta distribuição na análise de confiabilidade, como no cálculo do tempo médio de falha para determinado dispositivo.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> método.</para>
          <para>Se x, alfa ou beta não for numerado, <b>Weibull</b> retornará o #VALUE! valor de erro. Se x &lt; 0, <b>Weibull</b> retorna o #NUM! valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>Weibull</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de distribuição cumulativa Weibull é: 

 </para>
          <para>Figura 1: Equação para a distribuição cumulativa weibull</para>
          <para> </para>
          <para> </para>
          <para>A equação para a função de densidade de probabilidade Weibull é: 

</para>
          <para>Figura 2: Equação para a densidade de probabilidade weibull</para>
          <para> </para>
          <para> </para>
          <para>Quando alfa = 1, <b>Weibull</b> retorna a distribuição exponencial com:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - o valor no qual se avalia a função.</param>
        <param name="Arg2">Alfa - Um parâmetro da distribuição.</param>
        <param name="Arg3">Beta - Um parâmetro da distribuição.</param>
        <param name="Arg4">Cumulativo - Determina a forma da função.</param>
        <summary>Retorna a distribuição Weibull. Use esta distribuição na análise de confiabilidade, como no cálculo do tempo médio de falha de um dispositivo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se x, alfa ou beta não for numérico, <b>Weibull_Dist</b> retornará o #VALUE! valor de erro. </para>
          <para>Se x &lt; 0, <b>Weibull_Dist</b> retorna o #NUM! valor de erro. </para>
          <para>Se alfa ≤ 0 ou se beta ≤ 0, <b>Weibull_Dist</b> retornará o #NUM! valor de erro. </para>
          <para>A equação para a função de distribuição cumulativa Weibull é: 

 </para>
          <para>Figura 1: Equação para a distribuição cumulativa weibull</para>
          <para> </para>
          <para> </para>
          <para>A equação para a função de densidade de probabilidade Weibull é: 

</para>
          <para>Figura 2: Equação para a densidade de probabilidade weibull</para>
          <para> </para>
          <para> </para>
          <para>Quando alfa = 1, <b>Weibull_Dist</b> retorna a distribuição exponencial com:</para>
          <para>Figura 3: Equação</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_inicial - uma data que representa a data inicial.</param>
        <param name="Arg2">Dias - o número de dias úteis antes ou depois de data_inicial. Um valor positivo para dias gera uma data futura; um valor negativo gera uma data passada.</param>
        <param name="Arg3">Feriados - uma lista opcional com uma ou mais datas a serem excluídas do calendário de trabalho, como feriados estaduais, federais e flutuantes. A lista pode ser um intervalo de células que contém as datas ou uma constante de matriz dos números de série que representam as datas.</param>
        <summary>Retorna um número que representa uma data que é o número indicado de dias úteis antes ou após uma data (a data inicial). Os dias úteis excluem fins de semana e quaisquer datas identificadas como feriados. Use DIATRABALHO para excluir os fins de semana ou feriados ao calcular as datas de vencimento de fatura, horas de entrega esperadas ou o número de dias de trabalho executado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Problemas podem ocorrer se as datas são inseridas como texto .</para>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Se algum argumento não for uma data válida, <b>WorkDay</b> retornará o #VALUE! valor de erro. </para>
          <para>Se start_date mais dias gerar uma data inválida, <b>WorkDay</b> retornará o #NUM! valor de erro. </para>
          <para>Se dias não for um inteiro, será truncado.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - A data de início, truncada para inteiro.</param>
        <param name="Arg2">Dias - O número de dias úteis antes ou depois da start_date. Um valor positivo gera uma data futura; um valor negativo gera uma data passada; um valor 0 (zero) produz a data_inicial. Mudanças de dias são truncadas para números inteiros.</param>
        <param name="Arg3">Fim de semana - Indica os dias da semana que são dias de fim de semana e não são considerados dias úteis. Final de semana é um número ou cadeia de caracteres que especifica quando ocorre o final de semana.</param>
        <param name="Arg4">Feriados - Um conjunto opcional de uma ou mais datas que devem ser excluídas do calendário do dia de trabalho. Feriados estão em um intervalo de células que contêm as datas ou uma constante de matriz dos valores de série que representam essas datas. A ordem dos valores de série ou datas em feriados pode ser arbitrária.</param>
        <summary>Retorna o número de série da data, antes ou depois de um número especificado de dias úteis, com parâmetros personalizados de final de semana. Parâmetros de final de semana indicam quais e quantos dias são finais de semana. Finais de semana e todos os outros dias especificados como feriados não são considerados como dias úteis.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se start_date estiver fora do intervalo para o valor base de data <b>atual,</b> WorkDay_Intl retornará o #NUM! valor de erro. </para>
          <para>Se qualquer data em feriados estiver fora do intervalo para o valor base de data <b>atual,</b> WorkDay_Intl retornará a #NUM! valor de erro. </para>
          <para>Se start_date mais deslocamento de dia gerar uma data <b>inválida,</b> WorkDay_Intl retornará o #NUM! valor de erro. </para>
          <para>Se uma cadeia de caracteres de fim de semana tiver um comprimento inválido ou contiver caracteres <b>inválidos, WorkDay_Intl</b> retornará o #VALUE! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores - uma sequência de fluxos de caixa que corresponde ao cronograma de pagamentos em datas. O primeiro pagamento é opcional e corresponde a um custo ou pagamento que ocorre no início do investimento. Se o primeiro valor for um custo ou pagamento, ele deverá ser negativo. Todos os pagamentos subsequentes são descontados com base em um ano de 365 dias. A série de valores deve conter pelo menos um valor positivo e um negativo.</param>
        <param name="Arg2">Datas - um cronograma de datas de pagamentos que corresponde aos pagamentos de fluxo de caixa. A primeira data de pagamento indica o início do cronograma de pagamentos. Todas as outras datas devem ser posteriores a essa data, mas podem estar em qualquer ordem. As datas devem ser inseridas com a função DATA ou como resultado de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</param>
        <param name="Arg3">Guess - um número que você acha que está perto do resultado de <b>Xirr</b>.</param>
        <summary>Fornece a taxa interna de retorno para um programa de fluxos de caixa que não é necessariamente periódico. Para calcular a taxa interna de retorno para uma sequência de fluxos de caixa periódicos, use a função TIR.</summary>
        <returns>To be added.</returns>
        <remarks><para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Os números em datas são truncados para inteiros.</para>
          <para>
            <b>A Xirr</b> espera pelo menos um fluxo de caixa positivo e um fluxo de caixa negativo; caso contrário, <b>Xirr</b> retorna o #NUM! valor de erro. </para>
          <para>Se algum número em datas não for uma data válida, <b>Xirr</b> retornará o #VALUE! valor de erro. </para>
          <para>Se algum número em datas preceder a data de início, <b>Xirr</b> retornará a #NUM! valor de erro. </para>
          <para>Se valores e datas contêm um número diferente de valores, <b>Xirr</b> retornará o #NUM! valor de erro. </para>
          <para>Na maioria dos casos, você não precisa fornecer suposição para o cálculo <b>Xirr.</b> Se for omitida, estimativa será equivalente a 0,1 (10%). </para>
          <para>
            <b>Xirr</b> está intimamente relacionado a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> , a função de valor de presente líquido. A taxa de retorno calculada por <b>Xirr</b> é a taxa de juros correspondente a XNPV = 0. </para>
          <para>Excel usa uma técnica iterativa para calcular <b>Xirr</b>. Usando uma taxa de alteração (começando com suposição), <b>Xirr</b> passa pelo cálculo até que o resultado seja preciso em 0,000001%. Se <b>Xirr</b> não conseguir encontrar um resultado que funcione após 100 tentativas, a #NUM! será retornado. A taxa é alterada até: </para>
          <para>Figura 1: Equação</para>
          <para> </para>
          <para> </para>
          <para>em que:</para>
          <para>di = a ith, ou a última, data de pagamento.</para>
          <para>d1 = a 0ª data de pagamento.</para>
          <para>Pi = ith, ou last, payment.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uma série de fluxos de caixa que corresponde a um cronograma de pagamentos em datas. O primeiro pagamento é opcional e corresponde a um custo ou pagamento que ocorre no início do investimento.</param>
        <param name="Arg2">Um cronograma de datas de pagamento que corresponde aos pagamentos de fluxo de caixa. A primeira data de pagamento indica o início do cronograma de pagamentos. Todas as outras datas devem ser posteriores a essa data, mas podem ocorrer em qualquer ordem.
</param>
        <summary>Retorna o valor líquido atual de um cronograma de fluxos de caixa que não é necessariamente periódico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: o <b>método Xnpv</b> não fornece um parâmetro que corresponde ao argumento de taxa exigido pela função XNPV correspondente (=XNPV(taxa, valores, datas)). Para resolver essa limitação no código VBA, em vez de usar o método <b>Xpnv,</b> chame a função XNPV usando o <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> método.</para>
          <para>Para calcular o valor presente líquido para uma série de fluxos de caixa que são periódicos, use o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> método.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg2">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg3">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg4">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg5">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg6">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg7">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg8">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg9">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg10">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg11">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg12">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg13">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg14">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg15">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg16">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg17">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg18">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg19">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg20">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg21">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg22">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg23">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg24">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg25">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg26">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg27">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg28">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg29">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <param name="Arg30">1 a 254 condições que você deseja testar que podem ser <b>VERDADEIROs</b> ou <b>FALSE</b> e podem ser valores lógicos, matrizes ou referências.</param>
        <summary>Retorna um OR lógico exclusivo de todos os argumentos.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_inicial - uma data que representa a data inicial.</param>
        <param name="Arg2">Data_final - a data que representa a data final.</param>
        <param name="Arg3">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Calcula a fração de ano que representa o número de dias inteiros entre duas datas (data_inicial e data_final). Use a função de planilha FRAÇÃOANO para identificar a proporção dos benefícios ou obrigações de um ano inteiro a serem designados para um determinado termo.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>Todos os argumentos são truncados para inteiros.</para>
          <para>Se start_date ou end_date não são datas válidas, <b>YearFrac</b> retornará o #VALUE! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>YearFrac</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Pr - o preço do título por R$ 100 de valor nominal.</param>
        <param name="Arg4">Resgate - o valor de resgate do título por R$ 100 de valor nominal.</param>
        <param name="Arg5">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o rendimento anual de um título descontado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento e base são truncados para números inteiros.</para>
          <para>Se liquidação ou vencimento não for uma data válida, <b>YieldDisc</b> retornará a #VALUE! valor de erro. </para>
          <para>Se pr ≤ 0 ou se o resgate ≤ 0, <b>YieldDisc</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>YieldDisc</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>YieldDisc</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidação - a data de liquidação do título. A data de liquidação do título é aquela após a data de emissão quando o título foi negociado com o cliente.</param>
        <param name="Arg2">Vencimento - a data de vencimento do título. A data de vencimento é a data em que o título expira.</param>
        <param name="Arg3">Emissão - a data de emissão do título, expressa como um número de série de data.</param>
        <param name="Arg4">Taxa - a taxa de juros do título na data de emissão.</param>
        <param name="Arg5">Pr - o preço do título por R$ 100 de valor nominal.</param>
        <param name="Arg6">Base - o tipo de base de contagem diária a ser usado.</param>
        <summary>Retorna o rendimento anual de um título que paga juros no vencimento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: As datas devem ser inseridas usando a função DATE ou como resultados de outras fórmulas ou funções. Por exemplo, use DATA(2008;5;23) para 23 de maio de 2008. Poderão ocorrer problemas se as datas forem inseridas como texto.</para>
          <list type="table">
            <item>
              <term>0 ou omitido</term>
              <description>USA (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europeu 30/360</description>
            </item>
          </list>
          <para>O Microsoft Excel armazena datas como números de série sequenciais para que eles possam ser usados em cálculos. Por padrão, 1 de janeiro de 1900 é o número de série 1, e 1 de janeiro de 2008 é o número de série 39448, porque vem 39.448 dias depois de 1 de janeiro de 1900. O Microsoft Excel para o Macintosh usa um sistema de data diferente como padrão.</para>
          <para>A data de liquidação é a data em que um cliente compra um cupom, como um título, por exemplo. A data de vencimento é a data em que o cupom expira. Por exemplo, imagine que um título de 30 anos seja emitido em 1º de janeiro de 2008 e seja comprado por um cliente seis meses depois. A data de emissão seria 1º de janeiro de 2008, a data de liquidação, 1º de julho de 2008, e a data de vencimento, 1º de janeiro de 2038, ou seja, 30 anos após 1º de janeiro de 2008, a data de emissão.</para>
          <para>Liquidação, vencimento, emissão e base são truncados para números inteiros.</para>
          <para>Se liquidação, vencimento ou emissão não for uma data válida, <b>YieldMat</b> retornará a #VALUE! valor de erro. </para>
          <para>Se a &lt; taxa 0 ou se pr ≤ 0, <b>YieldMat</b> retornará o #NUM! valor de erro. </para>
          <para>Se a &lt; base 0 ou se base &gt; 4, <b>YieldMat</b> retornará o #NUM! valor de erro. </para>
          <para>Se liquidação ≥ vencimento, <b>YieldMat</b> retornará o #NUM! valor de erro.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz é a matriz ou intervalo de dados no qual é testada a média da população hipotética.</param>
        <param name="Arg2">O valor a testar.</param>
        <param name="Arg3">Sigma - O desvio padrão da população (conhecido). Se omitido, será usado o desvio padrão da amostra.</param>
        <summary>Retorna o valor de probabilidade unicaudal de um teste-z. Para uma determinada média hipotética da população, Z_TEST retorna a probabilidade de que a média da amostra seja maior do que a média de observações no conjunto de dados (matriz) — ou seja, a média da amostra observada.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se a matriz estiver vazia, <b>Z_Test</b> retornará o valor de erro #N/A. </para>
          <para>
            <b>Z_Test</b> é calculado da seguinte forma quando sigma não é omitido: </para>
          <para>Figura 1: Equação para Z_Test quando sigma não é omitido</para>
          <para> </para>
          <para> </para>
          <para>ou quando sigma é omitido:</para>
          <para>Figura 2: Equação para Z_Test quando sigma é omitido</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(array); s é o desvio padrão de STDEV_S(matriz); e n é o número de observações na amostra COUNT(array).</para>
          <para>
            <b>Z_Test</b> representa a probabilidade de que a média de amostra seja maior do que o valor observado AVERAGE(array), quando a média de população subjacente é μ0. Pela simetria da distribuição Normal, se AVERAGE(array) &lt; μ0, Z_Test retornará um valor maior que 0,5. <b></b></para>
          <para>A fórmula Excel a seguir pode ser usada para calcular a probabilidade de que a média de amostra seja maior do que μ0 (em qualquer direção) do que AVERAGE(array), quando a média da população subjacente for μ0:</para>
          <para>=2 * MIN(Z_TEST(array,μ0,sigma), 1 - Z_TEST(array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz é a matriz ou intervalo de dados no qual é testada a média da população hipotética.</param>
        <param name="Arg2">O valor a testar.</param>
        <param name="Arg3">Sigma - o desvio padrão da população (conhecido). Se omitido, o desvio padrão da amostra será usado.</param>
        <summary>Retorna o valor de probabilidade unicaudal de um teste-z. Para uma média de população hipotética, TESTEZ retorna a probabilidade de que a média da população seja maior que a média de observações no conjunto de dados (matriz) — ou seja, a média da amostra observada.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante</b>: essa função foi substituída por uma ou mais funções novas que podem fornecer uma precisão aprimorada e cujos nomes refletem melhor seu uso. Essa função ainda está disponível para compatibilidade com versões anteriores do Excel. No entanto, se a compatibilidade com backward não for necessária, você deve considerar o uso das novas funções a partir de agora, pois elas descrevem com mais precisão suas funcionalidades. Para obter mais informações sobre a nova função, consulte o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> método.</para>
          <para>Se a matriz estiver vazia, <b>ZTest</b> retornará o valor de erro #N/A. </para>
          <para>
            <b>ZTest</b> é calculado da seguinte forma quando sigma não é omitido: </para>
          <para>Figura 1: Equação para ZTest quando sigma não é omitido</para>
          <para> </para>
          <para> </para>
          <para>ou quando sigma é omitido:</para>
          <para>Figura 2: Equação para ZTest quando sigma é omitido</para>
          <para> </para>
          <para> </para>
          <para>onde x é a média de amostra AVERAGE(array); s é o desvio padrão de exemplo STDEV(array); e n é o número de observações na amostra COUNT(array).</para>
          <para>
            <b>ZTest</b> representa a probabilidade de que a média de amostra seja maior do que o valor observado AVERAGE(array), quando a média de população subjacente é μ0. Pela simetria da distribuição Normal, se AVERAGE(array) μ0, o ZTEST retornará um &lt; valor maior que 0,5.</para>
          <para>A fórmula Excel a seguir pode ser usada para calcular a probabilidade de que a média de amostra seja mais distante de μ0 (em qualquer direção) do que AVERAGE(array), quando a média da população subjacente é μ0:=2 * MIN(ZTEST(array,μ0,sigma), 1 - ZTEST(array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>